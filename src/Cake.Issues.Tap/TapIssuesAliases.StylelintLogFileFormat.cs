namespace Cake.Issues.Tap;

using System;
using Cake.Core;
using Cake.Core.Annotations;
using Cake.Issues.Tap.LogFileFormat;

/// <content>
/// Aliases for provider to read issues in Test Anything Protocol file generated by Stylelint.
/// </content>
public static partial class TapIssuesAliases
{
    /// <summary>
    /// Gets an instance for the log format for Test Anything Protocol file generated by Stylelint.
    /// </summary>
    /// <param name="context">The context.</param>
    /// <returns>Instance for the Test Anything Protocol format generated by Stylelint.</returns>
    [CakePropertyAlias]
    [CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]
    public static BaseTapLogFileFormat StylelintLogFileFormat(
        this ICakeContext context)
    {
        context.NotNull();

        return new StylelintLogFileFormat(context.Log);
    }

    /// <summary>
    /// Registers a new URL resolver with default priority of 0.
    /// </summary>
    /// <param name="context">The context.</param>
    /// <param name="resolver">Resolver which returns an <see cref="Uri"/> linking to a site
    /// containing help for a specific <see cref="BaseRuleDescription"/>.</param>
    /// <example>
    /// <para>Adds a provider with default priority of 0 returning a link for all rules starting
    /// with the string <c>Foo</c> to search with Google for the rule:</para>
    /// <code>
    /// <![CDATA[
    /// TapStylelintAddRuleUrlResolver(x =>
    ///     x.Rule.StartsWith("Foo") ?
    ///     new Uri("https://www.google.com/search?q=%22" + x.Rule + "%22") :
    ///     null)
    /// ]]>
    /// </code>
    /// </example>
    [CakeMethodAlias]
    [CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]
    public static void TapStylelintAddRuleUrlResolver(
        this ICakeContext context,
        Func<BaseRuleDescription, Uri> resolver)
    {
        context.NotNull();
        resolver.NotNull();

        StylelintRuleUrlResolver.Instance.AddUrlResolver(resolver);
    }

    /// <summary>
    /// Registers a new URL resolver with a specific priority.
    /// </summary>
    /// <param name="context">The context.</param>
    /// <param name="resolver">Resolver which returns an <see cref="Uri"/> linking to a site
    /// containing help for a specific <see cref="BaseRuleDescription"/>.</param>
    /// <param name="priority">Priority of the resolver. Resolver with a higher priority are considered
    /// first during resolving of the URL.</param>
    /// <example>
    /// <para>Adds a provider of priority 5 returning a link for all rules starting with the string
    /// <c>Foo</c> to search with Google for the rule:</para>
    /// <code>
    /// <![CDATA[
    /// TapStylelintAddRuleUrlResolver(x =>
    ///     x.Rule.StartsWith("Foo") ?
    ///     new Uri("https://www.google.com/search?q=%22" + x.Rule + "%22") :
    ///     null,
    ///     5)
    /// ]]>
    /// </code>
    /// </example>
    [CakeMethodAlias]
    [CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]
    public static void TapStylelintAddRuleUrlResolver(
        this ICakeContext context,
        Func<BaseRuleDescription, Uri> resolver,
        int priority)
    {
        context.NotNull();
        resolver.NotNull();

        StylelintRuleUrlResolver.Instance.AddUrlResolver(resolver, priority);
    }
}
