@inherits IEnumerable<Cake.Issues.IIssue>

@using System.Collections.Generic
@using System.Linq
@using Cake.Issues
@using Cake.Issues.Serialization
@using Cake.Issues.Reporting.Generic

<!DOCTYPE html>

@{
    // Read options and apply default values.
    var title = ViewBagHelper.ValueOrDefault(ViewBag.Title, "Issues Report");
    DevExtremeTheme theme = ViewBagHelper.ValueOrDefault(ViewBag.Theme, DevExtremeTheme.Light);
    bool showHeader = ViewBagHelper.ValueOrDefault(ViewBag.ShowHeader, true);
    bool enableSearching = ViewBagHelper.ValueOrDefault(ViewBag.EnableSearching, true);
    bool enableGrouping = ViewBagHelper.ValueOrDefault(ViewBag.EnableGrouping, true);
    bool enableFiltering = ViewBagHelper.ValueOrDefault(ViewBag.EnableFiltering, true);
    bool enableExporting = ViewBagHelper.ValueOrDefault(ViewBag.EnableExporting, false);
    string exportFileName = ViewBagHelper.ValueOrDefault(ViewBag.ExportFileName, "issue-report");
    HtmlDxDataGridExportFormat exportFormat = ViewBagHelper.ValueOrDefault(ViewBag.ExportFormat, HtmlDxDataGridExportFormat.Excel);
    bool providerTypeVisible = ViewBagHelper.ValueOrDefault(ViewBag.ProviderTypeVisible, false);
    ColumnSortOrder providerTypeSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.ProviderTypeSortOder, ColumnSortOrder.Ascending);
    bool providerNameVisible = ViewBagHelper.ValueOrDefault(ViewBag.ProviderNameVisible, true);
    ColumnSortOrder providerNameSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.ProviderNameSortOder, ColumnSortOrder.Ascending);
    bool runVisible = ViewBagHelper.ValueOrDefault(ViewBag.RunVisible, Model.Any(x => !string.IsNullOrWhiteSpace(x.Run)));
    ColumnSortOrder runSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.RunSortOder, ColumnSortOrder.Ascending);
    bool priorityVisible = ViewBagHelper.ValueOrDefault(ViewBag.PriorityVisible, false);
    ColumnSortOrder prioritySortOrder = ViewBagHelper.ValueOrDefault(ViewBag.PrioritySortOrder, ColumnSortOrder.Descending);
    bool priorityNameVisible = ViewBagHelper.ValueOrDefault(ViewBag.PriorityNameVisible, true);
    ColumnSortOrder priorityNameSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.PriorityNameSortOrder, ColumnSortOrder.Descending);
    bool projectPathVisible = ViewBagHelper.ValueOrDefault(ViewBag.ProjectPathVisible, false);
    ColumnSortOrder projectPathSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.ProjectPathSortOder, ColumnSortOrder.Ascending);
    bool projectNameVisible = ViewBagHelper.ValueOrDefault(ViewBag.ProjectNameVisible, true);
    ColumnSortOrder projectNameSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.ProjectNameSortOder, ColumnSortOrder.Ascending);
    bool filePathVisible = ViewBagHelper.ValueOrDefault(ViewBag.FilePathVisible, false);
    ColumnSortOrder filePathSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.FilePathSortOder, ColumnSortOrder.Ascending);
    bool fileDirectoryVisible = ViewBagHelper.ValueOrDefault(ViewBag.FileDirectoryVisible, true);
    ColumnSortOrder fileDirectorySortOrder = ViewBagHelper.ValueOrDefault(ViewBag.FileDirectorySortOder, ColumnSortOrder.Ascending);
    bool fileNameVisible = ViewBagHelper.ValueOrDefault(ViewBag.FileNameVisible, true);
    ColumnSortOrder fileNameSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.FileNameSortOder, ColumnSortOrder.Ascending);
    bool lineVisible = ViewBagHelper.ValueOrDefault(ViewBag.LineVisible, false);
    ColumnSortOrder lineSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.LineSortOder, ColumnSortOrder.Ascending);
    bool endLineVisible = ViewBagHelper.ValueOrDefault(ViewBag.EndLineVisible, false);
    ColumnSortOrder endLineSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.EndLineSortOder, ColumnSortOrder.Ascending);
    bool columnVisible = ViewBagHelper.ValueOrDefault(ViewBag.ColumnVisible, false);
    ColumnSortOrder columnSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.ColumnSortOder, ColumnSortOrder.Ascending);
    bool endColumnVisible = ViewBagHelper.ValueOrDefault(ViewBag.EndColumnVisible, false);
    ColumnSortOrder endColumnSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.EndColumnSortOder, ColumnSortOrder.Ascending);
    bool locationVisible = ViewBagHelper.ValueOrDefault(ViewBag.LocationVisible, true);
    ColumnSortOrder locationSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.LocationSortOder, ColumnSortOrder.Ascending);
    bool ruleIdVisible = ViewBagHelper.ValueOrDefault(ViewBag.RuleIdVisible, true);
    ColumnSortOrder ruleIdSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.RuleIdSortOder, ColumnSortOrder.Ascending);
    bool ruleNameVisible = ViewBagHelper.ValueOrDefault(ViewBag.RuleNameVisible, true);
    ColumnSortOrder ruleNameSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.RuleNameSortOder, ColumnSortOrder.Ascending);
    bool ruleUrlVisible = ViewBagHelper.ValueOrDefault(ViewBag.RuleUrlVisible, false);
    ColumnSortOrder ruleUrlSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.RuleUrlSortOder, ColumnSortOrder.Ascending);
    bool messageVisible = ViewBagHelper.ValueOrDefault(ViewBag.MessageVisible, true);
    ColumnSortOrder messageSortOrder = ViewBagHelper.ValueOrDefault(ViewBag.MessageSortOder, ColumnSortOrder.Ascending);
    var groupedColumns = ViewBagHelper.ValueOrDefault(ViewBag.GroupedColumns, new List<ReportColumn> { ReportColumn.ProviderName, ReportColumn.Run });
    var sortedColumns = ViewBagHelper.ValueOrDefault(ViewBag.SortedColumns, new List<ReportColumn> { ReportColumn.PriorityName, ReportColumn.ProjectName, ReportColumn.FileDirectory, ReportColumn.FileName, ReportColumn.Line });
    IdeIntegrationSettings ideIntegrationSettings = ViewBagHelper.ValueOrDefault<IdeIntegrationSettings>(ViewBag.IdeIntegrationSettings, null);
    List<HtmlDxDataGridColumnDescription> additionalColumns = ViewBagHelper.ValueOrDefault(ViewBag.AdditionalColumns, new List<HtmlDxDataGridColumnDescription>());
    string jQueryLocation = ViewBagHelper.ValueOrDefault(ViewBag.JQueryLocation, "https://ajax.aspnetcdn.com/ajax/jquery/").Trim();
    jQueryLocation = jQueryLocation.WithEnding("/");
    string jQueryVersion = ViewBagHelper.ValueOrDefault(ViewBag.JQueryVersion, "3.7.0").Trim();
    string excelJsLocation = ViewBagHelper.ValueOrDefault(ViewBag.ExcelJsLocation, "https://cdnjs.cloudflare.com/ajax/libs/exceljs/").Trim();
    excelJsLocation = excelJsLocation.WithEnding("/");
    string excelJsVersion = ViewBagHelper.ValueOrDefault(ViewBag.ExcelJsVersion, "4.3.0").Trim();
    string filesaverJsLocation = ViewBagHelper.ValueOrDefault(ViewBag.FileSaverJsLocation, "https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/").Trim();
    filesaverJsLocation = filesaverJsLocation.WithEnding("/");
    string filesaverJsVersion = ViewBagHelper.ValueOrDefault(ViewBag.FileSaverJsVersion, "2.0.5").Trim();
    string jsPdfLocation = ViewBagHelper.ValueOrDefault(ViewBag.JsPdfLocation, "https://cdnjs.cloudflare.com/ajax/libs/jspdf/").Trim();
    jsPdfLocation = jsPdfLocation.WithEnding("/");
    string jsPdfVersion = ViewBagHelper.ValueOrDefault(ViewBag.FileSaverJsVersion, "2.5.1").Trim();
    string jsPdfAutoTableLocation = ViewBagHelper.ValueOrDefault(ViewBag.FileSaverJsLocation, "https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/").Trim();
    jsPdfAutoTableLocation = jsPdfAutoTableLocation.WithEnding("/");
    string jsPdfAutoTableVersion = ViewBagHelper.ValueOrDefault(ViewBag.FileSaverJsVersion, "3.5.29").Trim();
    string devExtremeLocation = ViewBagHelper.ValueOrDefault(ViewBag.DevExtremeLocation, "https://cdn3.devexpress.com/jslib/").Trim();
    devExtremeLocation = devExtremeLocation.WithEnding("/");
    string devExtremeVersion = ViewBagHelper.ValueOrDefault(ViewBag.DevExtremeVersion, "22.2.6").Trim();
}

@{
    // Prepare issues.
    var issues =
        from issue in Model
        select
            issue.GetExpandoObject(
                addProviderType: providerTypeVisible,
                addProviderName: providerNameVisible,
                addRun: runVisible,
                addPriority: priorityVisible || priorityNameVisible,
                addPriorityName: priorityNameVisible,
                addProjectPath: projectPathVisible,
                addProjectName: projectNameVisible,
                addFilePath: filePathVisible || ideIntegrationSettings != null,
                addFileDirectory: fileDirectoryVisible,
                addFileName: fileNameVisible,
                addFileLink: true,
                addLine: lineVisible || ideIntegrationSettings != null,
                addEndLine: endLineVisible || ideIntegrationSettings != null,
                addColumn: columnVisible || ideIntegrationSettings != null,
                addEndColumn: endColumnVisible || ideIntegrationSettings != null,
                addLocation: locationVisible,
                addRuleId: ruleIdVisible,
                addRuleName: ruleNameVisible,
                addRuleUrl: ruleIdVisible || ruleNameVisible || ruleUrlVisible,
                addMessageHtml: messageVisible,
                additionalValues: additionalColumns.ToDictionary(x => x.Id, x => x.ValueRetriever));
}

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>@title</title>

    @* DevExtreme dependencies *@
    <script type="text/javascript" src="@($"{jQueryLocation}jquery-{jQueryVersion}.min.js")"></script>
    @if (enableExporting)
    {
        @switch (exportFormat)
        {
            case HtmlDxDataGridExportFormat.Excel:
                <script type="text/javascript" src="@($"{excelJsLocation}{excelJsVersion}/exceljs.min.js")"></script>
                <script type="text/javascript" src="@($"{filesaverJsLocation}{filesaverJsVersion}/FileSaver.min.js")"></script>
                break;
            case HtmlDxDataGridExportFormat.Pdf:
                <script type="text/javascript" src="@($"{jsPdfLocation}{jsPdfVersion}/jspdf.umd.min.js")"></script>
                <script type="text/javascript" src="@($"{jsPdfAutoTableLocation}{jsPdfAutoTableVersion}/jspdf.plugin.autotable.min.js")"></script>
                break;
        }
    }
    @* DevExtreme themes *@
    <link rel="stylesheet" type="text/css" href="@($"{devExtremeLocation}{devExtremeVersion}/css/dx.common.css")" />
    <link rel="stylesheet" type="text/css" href="@($"{devExtremeLocation}{devExtremeVersion}/css/{theme.GetCssFileName()}")" />
    @* DevExtreme library *@
    <script type="text/javascript" src="@($"{devExtremeLocation}{devExtremeVersion}/js/dx.all.js")"></script>
    @* Additional JavaScript for IDE integration *@
    @if (ideIntegrationSettings != null && !string.IsNullOrWhiteSpace(ideIntegrationSettings.JavaScript))
    {
        <script type="text/javascript">
            @Html.Raw(ideIntegrationSettings.JavaScript)
        </script>
    }

    <style>
        @* Styles for making sure drop down glyph is not shown for menu in file column in any theme *@
        td[role=gridcell] .dx-menu-item-popout
        {
            display: none;
        }
        td[role=gridcell] .dx-icon
        {
            margin: 0px !important;
        }
        @* Style for making sure menu in file column in any theme is not too high *@
        .dx-datagrid .dx-menu .dx-menu-item .dx-menu-item-content, .dx-datagrid-container .dx-menu .dx-menu-item .dx-menu-item-content
        {
            padding: 0px;
        }
    </style>
</head>
<body class="dx-viewport">
    @if (showHeader)
    {
        <h1>@title</h1>
    }

    <div class="container">
        <div id="gridContainer"></div>
    </div>

    <script type="text/javascript">
    var issues = @Html.Raw(issues.SerializeToJsonString());
    </script>

    <script type="text/javascript">
        $(function () {
            @if (ideIntegrationSettings != null && !string.IsNullOrWhiteSpace(ideIntegrationSettings.OpenInIdeCall))
            {
                <text>
                    @* Creates the menu in the file column *@
                    function getFileCellMenuElement(filePath, line, endLine, column, endColumn) {
                        var element =
                            $('<div>')
                                .css("float", "right")
                                .dxMenu({
                                    items: [{
                                        text: "",
                                        icon: "overflow",
                                        items: [
                                            {
                                                text: "@ideIntegrationSettings.MenuEntryText",
                                                action: "openInIde"
                                            }
                                        ]
                                    }],
                                    onItemClick: function (e) {
                                        if (e.itemData.action === "openInIde") {
                                            @Html.Raw(ideIntegrationSettings.GetOpenInIdeCall("filePath", "line", "endLine", "column", "endColumn"))
                                        }
                                    }
                                });
                        return element;
                    }
                </text>
            };

            $("#gridContainer").dxDataGrid({
                dataSource: issues,
                loadPanel: {
                    enabled: true
                },
                searchPanel: {
                    visible: @enableSearching.ToString().ToLowerInvariant()
                },
                groupPanel: {
                    visible: @enableGrouping.ToString().ToLowerInvariant()
                },
                headerFilter: {
                    visible: @enableFiltering.ToString().ToLowerInvariant()
                },
                sorting: {
                    mode: "multiple"
                },
                @if (enableExporting)
                {
                    <text>
                        export: {
                            enabled: true
                        },
                    </text>
                    @switch (exportFormat)
                    {
                        case HtmlDxDataGridExportFormat.Excel:
                            <text>
                                onExporting: function(e) {
                                    const workbook = new ExcelJS.Workbook();
                                    const worksheet = workbook.addWorksheet("@title");
                                    DevExpress.excelExporter.exportDataGrid({
                                        worksheet: worksheet,
                                        component: e.component,
                                    }).then(function() {
                                        workbook.xlsx.writeBuffer().then(function(buffer) {
                                            saveAs(new Blob([buffer], { type: "application/octet-stream" }), "@(exportFileName).xlsx");
                                        });
                                    });
                                    @* Disable deprecated built-in Excel export *@
                                    e.cancel = true;
                                },
                            </text>
                            break;
                        case HtmlDxDataGridExportFormat.Pdf:
                            <text>
                                onExporting: function(e) {
                                    const pdfOptions = {
                                        orientation: "landscape",
                                        unit: "pt",
                                        format: "a4"
                                    };
                                    const doc = new jspdf.jsPDF(pdfOptions);
                                    DevExpress.pdfExporter.exportDataGrid({
                                        jsPDFDocument: doc,
                                        component: e.component
                                    }).then(function() {
                                        doc.save("@(exportFileName).pdf");
                                    });
                                    @* Disable deprecated built-in Excel export *@
                                    e.cancel = true;
                                },
                            </text>
                            break;
                    }
                }
                rowAlternationEnabled: true,
                allowColumnResizing: true,
                columns: [
                    @if (providerTypeVisible)
                    {
                        <text>
                            {
                                dataField: "ProviderType",
                                visibleIndex: @((int)ReportColumn.ProviderType),
                                @if (groupedColumns.Contains(ReportColumn.ProviderType))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.ProviderType),
                                }
                                @if (sortedColumns.Contains(ReportColumn.ProviderType))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.ProviderType),
                                    @:sortOrder: "@providerTypeSortOrder.ToShortString()",
                                }
                            },
                        </text>
                    }
                    @if (providerNameVisible)
                    {
                        <text>
                            {
                                caption: "Provider",
                                dataField: "ProviderName",
                                visibleIndex: @((int)ReportColumn.ProviderName),
                                @if (groupedColumns.Contains(ReportColumn.ProviderName))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.ProviderName),
                                }
                                @if (sortedColumns.Contains(ReportColumn.ProviderName))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.ProviderName),
                                    @:sortOrder: "@providerNameSortOrder.ToShortString()",
                                }
                            },
                        </text>
                    }
                    @if (runVisible)
                    {
                        <text>
                            {
                                dataField: "Run",
                                visibleIndex: @((int)ReportColumn.Run),
                                @if (groupedColumns.Contains(ReportColumn.Run))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.Run),
                                }
                                @if (sortedColumns.Contains(ReportColumn.Run))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.Run),
                                    @:sortOrder: "@runSortOrder.ToShortString()",
                                }
                            },
                        </text>
                    }
                    @if (priorityVisible)
                    {
                        <text>
                            {
                                dataField: "Priority",
                                width: "90px",
                                visibleIndex: @((int)ReportColumn.Priority),
                                @if (groupedColumns.Contains(ReportColumn.Priority))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.Priority),
                                }
                                @if (sortedColumns.Contains(ReportColumn.Priority))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.Priority),
                                    @:sortOrder: "@prioritySortOrder.ToShortString()",
                                }
                            },
                        </text>
                    }
                    @if (priorityNameVisible)
                    {
                        <text>
                            {
                                caption: "Severity",
                                dataField: "PriorityName",
                                calculateSortValue: "Priority",
                                width: "90px",
                                visibleIndex: @((int)ReportColumn.PriorityName),
                                @if (groupedColumns.Contains(ReportColumn.PriorityName))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.PriorityName),
                                }
                                @if (sortedColumns.Contains(ReportColumn.PriorityName))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.PriorityName),
                                    @:sortOrder: "@priorityNameSortOrder.ToShortString()",
                                }
                            },
                        </text>
                    }
                    @if (projectPathVisible)
                    {
                        <text>
                            {
                                dataField: "ProjectPath",
                                visibleIndex: @((int)ReportColumn.ProjectPath),
                                @if (groupedColumns.Contains(ReportColumn.ProjectPath))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.ProjectPath),
                                }
                                @if (sortedColumns.Contains(ReportColumn.ProjectPath))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.ProjectPath),
                                    @:sortOrder: "@projectPathSortOrder.ToShortString()",
                                }
                            },
                        </text>
                    }
                    @if (projectNameVisible)
                    {
                        <text>
                            {
                                caption: "Project",
                                dataField: "ProjectName",
                                visibleIndex: @((int)ReportColumn.ProjectName),
                                @if (groupedColumns.Contains(ReportColumn.ProjectName))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.ProjectName),
                                }
                                @if (sortedColumns.Contains(ReportColumn.ProjectName))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.ProjectName),
                                    @:sortOrder: "@projectNameSortOrder.ToShortString()",
                                }
                            },
                        </text>
                    }
                    @if (filePathVisible)
                    {
                        <text>
                            {
                                dataField: "FilePath",
                                visibleIndex: @((int)ReportColumn.FilePath),
                                @if (groupedColumns.Contains(ReportColumn.FilePath))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.FilePath),
                                }
                                @if (sortedColumns.Contains(ReportColumn.FilePath))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.FilePath),
                                    @:sortOrder: "@filePathSortOrder.ToShortString()",
                                }
                            },
                        </text>
                    }
                    @if (fileDirectoryVisible)
                    {
                        <text>
                            {
                                caption: "Directory",
                                dataField: "FileDirectory",
                                visibleIndex: @((int)ReportColumn.FileDirectory),
                                @if (groupedColumns.Contains(ReportColumn.FileDirectory))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.FileDirectory),
                                }
                                @if (sortedColumns.Contains(ReportColumn.FileDirectory))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.FileDirectory),
                                    @:sortOrder: "@fileDirectorySortOrder.ToShortString()",
                                }
                            },
                        </text>
                    }
                    @if (fileNameVisible)
                    {
                        <text>
                            {
                                caption: "File",
                                dataField: "FileName",
                                visibleIndex: @((int)ReportColumn.FileName),
                                @if (groupedColumns.Contains(ReportColumn.FileName))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.FileName),
                                }
                                @if (sortedColumns.Contains(ReportColumn.FileName))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.FileName),
                                    @:sortOrder: "@fileNameSortOrder.ToShortString()",
                                }
                                cellTemplate: function (container, options) {
                                    if (options.data["FileLink"]) {
                                        var $wrapper =
                                            $('<div>')
                                                .css("float", "left");
                                        var $link =
                                            $('<a>', {
                                                text: options.value,
                                                href: options.data["FileLink"],
                                                target: "_blank"
                                            });
                                        $wrapper.append($link);
                                        $wrapper.appendTo(container);
                                    }
                                    else {
                                        $('<div>')
                                            .text(options.value)
                                            .css("float", "left")
                                            .appendTo(container);
                                    }
                                    @if (ideIntegrationSettings != null && !string.IsNullOrWhiteSpace(ideIntegrationSettings.OpenInIdeCall))
                                    {
                                        <text>
                                            getFileCellMenuElement(options.data["FilePath"], options.data["Line"], options.data["EndLine"], options.data["Column"], options.data["EndColumn"])
                                                .appendTo(container);
                                        </text>
                                    }
                                }
                            },
                        </text>
                    }
                    @if (lineVisible)
                    {
                        <text>
                            {
                                dataField: "Line",
                                allowFiltering: false,
                                allowGrouping: false,
                                width: "70px",
                                visibleIndex: @((int)ReportColumn.Line),
                                @if (groupedColumns.Contains(ReportColumn.Line))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.Line),
                                }
                                @if (sortedColumns.Contains(ReportColumn.Line))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.Line),
                                    @:sortOrder: "@lineSortOrder.ToShortString()",
                                }
                                cellTemplate: function (container, options) {
                                    if (options.data["FileLink"]) {
                                        $('<a>', {
                                            text: options.value,
                                            href: options.data["FileLink"],
                                            target: "_blank"
                                        }).appendTo(container);
                                    }
                                    else {
                                        container.text(options.value);
                                    }
                                }
                            },
                        </text>
                    }
                    @if (endLineVisible)
                    {
                        <text>
                            {
                                dataField: "EndLine",
                                allowFiltering: false,
                                allowGrouping: false,
                                width: "70px",
                                visibleIndex: @((int)ReportColumn.EndLine),
                                @if (groupedColumns.Contains(ReportColumn.EndLine))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.EndLine),
                                }
                                @if (sortedColumns.Contains(ReportColumn.EndLine))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.EndLine),
                                    @:sortOrder: "@endLineSortOrder.ToShortString()",
                                }
                                cellTemplate: function (container, options) {
                                    if (options.data["FileLink"]) {
                                        $('<a>', {
                                            text: options.value,
                                            href: options.data["FileLink"],
                                            target: "_blank"
                                        }).appendTo(container);
                                    }
                                    else {
                                        container.text(options.value);
                                    }
                                }
                            },
                        </text>
                    }
                    @if (columnVisible)
                    {
                        <text>
                            {
                                dataField: "Column",
                                allowFiltering: false,
                                allowGrouping: false,
                                width: "70px",
                                visibleIndex: @((int)ReportColumn.Column),
                                @if (groupedColumns.Contains(ReportColumn.Column))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.Column),
                                }
                                @if (sortedColumns.Contains(ReportColumn.Column))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.Column),
                                    @:sortOrder: "@columnSortOrder.ToShortString()",
                                }
                                cellTemplate: function (container, options) {
                                    if (options.data["FileLink"]) {
                                        $('<a>', {
                                            text: options.value,
                                            href: options.data["FileLink"],
                                            target: "_blank"
                                        }).appendTo(container);
                                    }
                                    else {
                                        container.text(options.value);
                                    }
                                }
                            },
                        </text>
                    }
                    @if (endColumnVisible)
                    {
                        <text>
                            {
                                dataField: "EndColumn",
                                allowFiltering: false,
                                allowGrouping: false,
                                width: "70px",
                                visibleIndex: @((int)ReportColumn.EndColumn),
                                @if (groupedColumns.Contains(ReportColumn.EndColumn))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.EndColumn),
                                }
                                @if (sortedColumns.Contains(ReportColumn.EndColumn))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.EndColumn),
                                    @:sortOrder: "@endColumnSortOrder.ToShortString()",
                                }
                                cellTemplate: function (container, options) {
                                    if (options.data["FileLink"]) {
                                        $('<a>', {
                                            text: options.value,
                                            href: options.data["FileLink"],
                                            target: "_blank"
                                        }).appendTo(container);
                                    }
                                    else {
                                        container.text(options.value);
                                    }
                                }
                            },
                        </text>
                    }
                    @if (locationVisible)
                    {
                        <text>
                            {
                                dataField: "Location",
                                allowFiltering: false,
                                allowGrouping: false,
                                width: "70px",
                                visibleIndex: @((int)ReportColumn.Location),
                                @if (groupedColumns.Contains(ReportColumn.Location))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.Location),
                                }
                                @if (sortedColumns.Contains(ReportColumn.Location))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.Location),
                                    @:sortOrder: "@locationSortOrder.ToShortString()",
                                }
                                cellTemplate: function (container, options) {
                                    if (options.data["FileLink"]) {
                                        $('<a>', {
                                            text: options.value,
                                            href: options.data["FileLink"],
                                            target: "_blank"
                                        }).appendTo(container);
                                    }
                                    else {
                                        container.text(options.value);
                                    }
                                }
                            },
                        </text>
                    }
                    @if (ruleIdVisible)
                    {
                        <text>
                            {
                                dataField: "RuleId",
                                visibleIndex: @((int)ReportColumn.RuleId),
                                @if (groupedColumns.Contains(ReportColumn.RuleId))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.RuleId),
                                }
                                @if (sortedColumns.Contains(ReportColumn.RuleId))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.RuleId),
                                    @:sortOrder: "@ruleIdSortOrder.ToShortString()",
                                }
                                cellTemplate: function (container, options) {
                                    if (options.data["RuleUrl"]) {
                                        $('<a>', {
                                            text: options.value,
                                            href: options.data["RuleUrl"],
                                            target: "_blank"
                                        }).appendTo(container);
                                    }
                                    else {
                                        container.text(options.value);
                                    }
                                }
                            },
                        </text>
                    }
                    @if (ruleNameVisible)
                    {
                        <text>
                            {
                                dataField: "RuleName",
                                visibleIndex: @((int)ReportColumn.RuleName),
                                @if (groupedColumns.Contains(ReportColumn.RuleName))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.RuleName),
                                }
                                @if (sortedColumns.Contains(ReportColumn.RuleName))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.RuleName),
                                    @:sortOrder: "@ruleNameSortOrder.ToShortString()",
                                }
                                cellTemplate: function (container, options) {
                                    if (options.data["RuleUrl"]) {
                                        $('<a>', {
                                            text: options.value,
                                            href: options.data["RuleUrl"],
                                            target: "_blank"
                                        }).appendTo(container);
                                    }
                                    else {
                                        container.text(options.value);
                                    }
                                }
                            },
                        </text>
                    }
                    @if (ruleUrlVisible)
                    {
                        <text>
                            {
                                dataField: "RuleUrl",
                                visibleIndex: @((int)ReportColumn.RuleUrl),
                                @if (groupedColumns.Contains(ReportColumn.RuleUrl))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.RuleUrl),
                                }
                                @if (sortedColumns.Contains(ReportColumn.RuleUrl))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.RuleUrl),
                                    @:sortOrder: "@ruleUrlSortOrder.ToShortString()",
                                }
                                cellTemplate: function (container, options) {
                                    if (options.data["RuleUrl"]) {
                                        $('<a>', {
                                            text: options.value,
                                            href: options.data["RuleUrl"],
                                            target: "_blank"
                                        }).appendTo(container);
                                    }
                                }
                            },
                        </text>
                    }
                    @if (messageVisible)
                    {
                        <text>
                            {
                                caption: "Message",
                                dataField: "MessageHtml",
                                encodeHtml: false,
                                visibleIndex: @((int)ReportColumn.Message),
                                @if (groupedColumns.Contains(ReportColumn.Message))
                                {
                                    @:groupIndex: @groupedColumns.IndexOf(ReportColumn.Message),
                                }
                                @if (sortedColumns.Contains(ReportColumn.Message))
                                {
                                    @:sortIndex: @sortedColumns.IndexOf(ReportColumn.Message),
                                    @:sortOrder: "@messageSortOrder.ToShortString()",
                                }
                            },
                        </text>
                    }
                    @foreach (var additionalColumn in additionalColumns)
                    {
                        <text>
                            {
                                dataField: "@additionalColumn.Id",
                                @if (!string.IsNullOrWhiteSpace(additionalColumn.Caption))
                                {
                                    @:caption: "@additionalColumn.Caption",
                                }
                                visibleIndex: @additionalColumn.VisibleIndex,
                                allowGrouping: @additionalColumn.AllowGrouping.ToString().ToLowerInvariant(),
                                allowFiltering: @additionalColumn.AllowFiltering.ToString().ToLowerInvariant(),
                                allowSorting: @additionalColumn.AllowSorting.ToString().ToLowerInvariant()
                            },
                        </text>
                    }
                ],
                summary: {
                    groupItems: [{
                        column: "ProviderType",
                        summaryType: "count",
                        displayFormat: "{0} issues",
                    }],
                    totalItems: [{
                        column: "PriorityName",
                        summaryType: "count",
                        displayFormat: "{0} issues"
                    }]
                }
            });
        });
    </script>
</body>
</html>