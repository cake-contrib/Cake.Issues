{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"api/","title":"API","text":""},{"location":"api/#core-addins","title":"Core Addins","text":"<ul> <li>Cake.Issues</li> <li>Cake.Issues.Reporting</li> <li>Cake.Issues.PullRequests</li> </ul>"},{"location":"api/#issue-provider","title":"Issue Provider","text":"<ul> <li>Cake.Issues.DocFx</li> <li>Cake.Issues.EsLint</li> <li>Cake.Issues.GitRepository</li> <li>Cake.Issues.InspectCode</li> <li>Cake.Issues.Markdownlint</li> <li>Cake.Issues.MsBuild</li> <li>Cake.Issues.Sarif</li> <li>Cake.Issues.Terraform</li> </ul>"},{"location":"api/#report-formats","title":"Report Formats","text":"<ul> <li>Cake.Issues.Reporting.Console</li> <li>Cake.Issues.Reporting.Generic</li> <li>Cake.Issues.Reporting.Sarif</li> </ul>"},{"location":"api/#pull-request-systems","title":"Pull Request Systems","text":"<ul> <li>Cake.Issues.PullRequests.AppVeyor</li> <li>Cake.Issues.PullRequests.AzureDevOps</li> <li>Cake.Issues.PullRequests.GitHubActions</li> </ul>"},{"location":"blog/","title":"News","text":""},{"location":"blog/2020/08/22/cake-issues-v090-released/","title":"Cake Issues v0.9.0 Released","text":"<p>Cake Issues version 0.9.0 has been released. This is a major release bringing a lot of new features across all addins.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>AdmiringWorm</li> <li>christianbumann</li> <li>eoehen</li> <li>gep13</li> <li>janniksam</li> <li>mholo65</li> <li>pascalberger</li> <li>Speeedy01</li> <li>jokay</li> </ul>"},{"location":"blog/2020/08/22/cake-issues-v090-released/#full-cross-platform-support","title":"Full cross-platform support","text":"<p>While in previous versions most parts of Cake Issues was already targeting .NET Standard and with this could be executed on .NET Framework, .NET Core and Mono, <code>Cake.Issues.Reporting.Generic</code> could only run on .NET Framework and Mono, but not on .NET Core. With this release <code>Cake.Issues.Reporting.Generic</code> was ported to also run on .NET Core.</p> <p>The migration was done by gep13 on his Twitch stream and you can watch work done in Stream 90 - Working on Cake.Issues.Recipe, Stream 91 - Working on Cake.Issues.Reporting.Generic and Gazorator and Stream 92 - Working on Cake.Issues.Reporting.Generic and Gazorator - Part 2.</p>"},{"location":"blog/2020/08/22/cake-issues-v090-released/#enhanced-issue-information","title":"Enhanced issue information","text":"<p>The description for issues has been extended by additional information for column and ranges:</p> <ul> <li><code>IIssue.EndLine</code></li> <li><code>IIssue.Column</code></li> <li><code>IIssue.EndColumn</code></li> </ul> <p>Existing issue providers have been updated to provide the additional information where available. See feature description for individual issue providers for which information a specific issue provider supports.</p>"},{"location":"blog/2020/08/22/cake-issues-v090-released/#file-linking","title":"File linking","text":"<p>In previous versions <code>Cake.Issues.Reporting.Generic</code> supported entries linking to the file on the source code provider (GitHub, Azure Repos, ...). With this release file linking infrastructure has been moved to the <code>Cake.Issues</code> addin and can be used by any addin.</p> <p>File link settings can  be defined while reading issues and are passed through the new <code>IIssue.FileLink</code> property to reporting formats, pull request systems and build server implementations:</p> <pre><code>var settings =\n    new ReadIssuesSettings(@\"c:\\repo\")\n    {\n        FileLinkSettings =\n            IssueFileLinkSettingsForGitHubCommit(\n                \"https://github.com/cake-contrib/Cake.Issues.Reporting.Generic\",\n                \"76a7cacef7ad4295a6766646d45c9b56\")\n    };\n\n    var issues =\n        ReadIssues(\n            InspectCodeIssuesFromFilePath(\n                @\"C:\\build\\inspectcode.log\"),\n            settings));\n</code></pre> <p><code>Cake.Issues</code> comes with out-of-the-box support for linking to files hosted on GitHub and Azure Repos, either for a specific branch or commit. Additionally there are aliases which can be used to define any custom pattern.</p>"},{"location":"blog/2020/08/22/cake-issues-v090-released/#support-for-passing-additional-run-information","title":"Support for passing additional run information","text":"<p>If a build script needed to parse multiple log files from the same tool, e.g. because multiple MsBuild solutions were built, this was currently possible by calling the issue provider multiple times. If the results were read into the same list and shown on the same report, individual issues could not be assigned to any of the calls, since issue provider type and name were identical. Starting with Cake.Issues 0.9.0 it is now possible to pass additional run information while reading issues, which then will be stored with each issues in the <code>IIssue.Run</code> property:</p> <pre><code>var issues = new List&lt;IIssue&gt;();\n\n// Parse issues from build of solutions 1\nissues.AddRange(\n    ReadIssues(\n        MsBuildIssuesFromFilePath(\n            @\"C:\\build\\solution1-msbuild.log\",\n            MsBuildXmlFileLoggerFormat),\n        new ReadIssuesSettings(@\"c:\\repo\")\n        {\n            Run = \"Solution 1\"\n        }\n    )\n);\n\n// Parse issues from build of solutions 2\nissues.AddRange(\n    ReadIssues(\n        MsBuildIssuesFromFilePath(\n            @\"C:\\build\\solution2-msbuild.log\",\n            MsBuildXmlFileLoggerFormat),\n        new ReadIssuesSettings(@\"c:\\repo\")\n        {\n            Run = \"Solution 2\"\n        }\n    )\n);\n</code></pre>"},{"location":"blog/2020/08/22/cake-issues-v090-released/#improved-pull-request-integration","title":"Improved pull request integration","text":"<p>In previous versions the text message of an issue was used to detect issues already reported in a previous run. This didn't work well for issues which contain information in the message which likely changes between runs, like e.g. line information. In this version a specific identifier, <code>IIssue.Identifier</code>, is used which can be set by the issue provider.</p> <p>When working with legacy code bases which contain a lot of existing issues, using something like Cake.Issues can be hard, since it will notify about every existing issue if something is changed in a file. To work around this issue it is possible to limit issues which will be posted to pull request systems. In previous versions it was already possible to limit the total number of issues, the number of issues for every issue provider and the total number of issues across multiple run. With 0.9.0 it will additionally be possible to limit the number of issues for specific issue providers for either a single or across multiple runs. This allows advanced scenarios like posting a maximum of 10 MsBuild issues every run, but not more than 20 in total across all runs.</p>"},{"location":"blog/2020/08/22/cake-issues-v090-released/#get-everything-together","title":"Get everything together","text":"<p>Cake.Issues.Recipe, the Cake Recipe script which you can integrate into your build script for easy integration of full feature issue management, has been updated to version 0.4.0, bringing all the new features of Cake.Issues 0.9.0.</p>"},{"location":"blog/2020/08/22/cake-issues-v090-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues 0.9.0 is a breaking release, which means that it probably requires changes to your build script. This section documents the most common changes which might be required:</p> <ul> <li>Cake.Issues</li> <li>Serialization format has been updated to version 3.     Older version are still supported for deserialization.</li> <li>Cake.Issues.Markdownlint</li> <li><code>MarkdownlintLogFileFormat</code> alias has been renamed to <code>MarkdownlintV1LogFileFormat</code>     (#116).</li> <li>Cake.Issues.PullRequest</li> <li><code>ReportIssuesToPullRequest</code> alias which accepts an issue provider, or a list of issue providers, and settings requires now settings of type     <code>IReportIssuesToPullRequestFromIssueProviderSettings</code> instead of <code>ReportIssuesToPullRequestSettings</code> to     provider additional functionality, like support for File linking and Support for passing additional run information.</li> <li>Cake.Issues.PullRequests.AzureDevOps</li> <li>Cake.Issues.PullRequests.AzureDevOps requires at least Cake.AzureDevOps 0.5.0</li> <li>Cake.Issues.Reporting</li> <li><code>CreateIssueReport</code> alias which accepts an issue provider, or a list of issue providers, and settings requires now settings of type     <code>ICreateIssueReportFromIssueProviderSettings</code> instead of <code>CreateIssueReportSettings</code> to     provider additional functionality, like support for File linking and Support for passing additional run information.</li> <li>Cake.Issues.Reporting.Generic</li> <li>Cake.Issues.Reporting.Generic requires at least Cake 0.38.0</li> <li><code>HtmlDxDataGridOption.FileLinkSettings</code> has been removed.     File link settings can now be defined while reading the issues.     For details see File linking.     (#265).</li> <li><code>HtmlDxDataGridOption.JSZipLocation</code> has been split into <code>HtmlDxDataGridOption.JsZipLocation</code> and     <code>HtmlDxDataGridOption.JsZipVersion</code>     (#320).</li> <li>Cake.Issues.Recipe</li> <li>Cake.Issues.Recipe requires at least Cake 0.38.0</li> </ul> <p>For details see release notes of the individual addins:</p> <ul> <li>Cake.Issues 0.9.0</li> <li>Cake.Issues.MsBuild 0.9.0</li> <li>Cake.Issues.InspectCode 0.9.0</li> <li>Cake.Issues.DupFinder 0.9.0</li> <li>Cake.Issues.GitRepository 0.9.0</li> <li>Cake.Issues.Markdownlint 0.9.0</li> <li>Cake.Issues.EsLint 0.9.0</li> <li>Cake.Issues.DocFx 0.9.0</li> <li>Cake.Issues.PullRequests 0.9.0</li> <li>Cake.Issues.PullRequests.AzureDevOps 0.9.0</li> <li>Cake.Issues.PullRequests.AppVeyor 0.9.0</li> <li>Cake.Issues.Reporting 0.9.0</li> <li>Cake.Issues.Reporting.Generic 0.9.0</li> <li>Cake.Issues.Reporting.Sarif 0.9.0</li> <li>Cake.Issues.Recipe 0.4.0</li> </ul>"},{"location":"blog/2020/09/19/cake-issues-v091-released/","title":"Cake Issues v0.9.1 Released","text":"<p>Version 0.9.1 of Cake Issues and Cake.Issues.PullRequests.AzureDevOps have been released. These are minor releases containing improvements and bug fixes.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>christianbumann</li> <li>janniksam</li> <li>pascalberger</li> <li>jokay</li> </ul>"},{"location":"blog/2020/09/19/cake-issues-v091-released/#easier-file-linking-for-manually-created-issues","title":"Easier file linking for manually created issues","text":"<p>With 0.8.0 file links was implemented in Cake.Issues.Reporting.Generic and worked for any issues passed to the report. With 0.9.0 file link infrastructure was moved to Cake.Issues. File link settings can now be set while reading issues, and are passed through the <code>IIssue.FileLink</code> property to reports and pull request systems.</p> <p>While this solution works for issues read by an issue provider, where file link settings can be passed to the <code>ReadIssues</code> alias, it become much more complicated for issues created using the <code>NewIssue</code> alias, where an URL can be set, which needs to be resolved manually before.</p> <p>Cake.Issues 0.9.1 adds an <code>WithFileLinkSettings</code> method to <code>IIssueBuilder</code> where a file link setting object can be passed which does resolve the URL.</p>"},{"location":"blog/2020/09/19/cake-issues-v091-released/#line-range-and-column-support-in-azure-devops-pull-request-integration","title":"Line range and column support in Azure DevOps pull request integration","text":"<p>Cake Issues 0.9.0 added support for line ranges and column information. With 0.9.0 the Azure DevOps pull request integration didn't use this information while posting comments to pull requests. Cake.Issues.PullRequests.AzureDevOps 0.9.1 fixes this and will post comments for line and column ranges if they are available on an issue.</p>"},{"location":"blog/2020/09/19/cake-issues-v091-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues and Cake.Issues.PullRequests.AzureDevOps 0.9.1 are compatible with version 0.9.0 without any breaking changes. To update to the new version bump the version of the specific addins.</p>"},{"location":"blog/2020/09/24/cake-issues-recipe-v042-released-bringing-support-for-github-actions/","title":"Cake Issues Recipe v0.4.2 released, bringing support for GitHub Actions","text":"<p>Version 0.4.2 of Cake Issues Recipe has been released bringing support for GitHub Actions.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>admiringworm</li> <li>pascalberger</li> </ul>"},{"location":"blog/2020/09/24/cake-issues-recipe-v042-released-bringing-support-for-github-actions/#support-for-github-actions","title":"Support for GitHub Actions","text":"<p>This version of Cake.Issues.Recipe brings support for running under GitHub Actions. Currently supported feature is writing of issues to build server which will show up in the build log grouped by issue provider / run:</p> <p></p> <p>Additionally the issues show up as annotations:</p> <p></p> <p>Having issues available as annotations also means that they will be shown in pull requests on the related file / position:</p> <p></p> <p>It's planned to support remaining features like providing full issue report as artifact in a future release.</p> <p>Info</p> <p>Support for GitHub Actions integration is currently only available in Cake.Issues.Recipe, but not as a standalone addin. It's planned to additionally provide a standalone addin which can be used outside of Cake.Issues.Recipe in the future.</p>"},{"location":"blog/2020/09/24/cake-issues-recipe-v042-released-bringing-support-for-github-actions/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues.Recipe 0.4.2 is compatible with version 0.4.x without any breaking changes. To update to the new version bump the version in your build script.</p>"},{"location":"blog/2020/09/27/new-github-actions-addin/","title":"New GitHub Actions addin","text":"<p>A new Cake.Issues.PullRequest.GitHubActions addin has been released which brings integration with GitHub Actions and GitHub pull requests.</p> <p>Cake.Issues.PullRequest.GitHubActions addin creates annotations from issues when running on GitHub Actions:</p> <p></p> <p>These annotations will also be shown in pull requests on the related file / position, bringing first class integration for GitHub pull requests to Cake.Issues:</p> <p></p> <p>This integration was first released in Cake.Issues.Recipe 0.4.2 and has now been moved to its own addin, which can also be used outside of Cake.Issues.Recipe.</p>"},{"location":"blog/2020/10/09/cake-issues-pullrequests-v091-released/","title":"Cake Issues PullRequests v0.9.1 Released","text":"<p>Version 0.9.1 of Cake.Issues.PullRequests has been released. This is a minor releases containing bug fixes.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>janniksam</li> <li>pascalberger</li> <li>phlorian</li> </ul>"},{"location":"blog/2020/10/09/cake-issues-pullrequests-v091-released/#dont-post-issues-if-a-provider-limit-is-set-to-0","title":"Don't post issues if a provider limit is set to 0","text":"<p>This version fixes a bug where if <code>MaxIssuesToPost</code> or <code>MaxIssuesToPostAcrossRuns</code> was set to 0 all issues were posted to the pull request instead of none.</p>"},{"location":"blog/2020/10/09/cake-issues-pullrequests-v091-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues.PullRequests 0.9.1 is compatible with version 0.9.0 without any breaking changes. To update to the new version bump the version of the addin.</p>"},{"location":"blog/2020/10/20/cake-issues-msbuild-v091-released/","title":"Cake Issues MsBuild v0.9.1 Released","text":"<p>Version 0.9.1 of MsBuild support for Cake.Issues has been released. This is a minor release containing improvements.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>cho-trackman</li> <li>eoehen</li> <li>pascalberger</li> <li>jokay</li> </ul>"},{"location":"blog/2020/10/20/cake-issues-msbuild-v091-released/#support-for-reading-of-errors","title":"Support for reading of errors","text":"<p>Until now MsBuild support did read warnings from MsBuild log files. Starting with version 0.9.1 it will also return errors. Reading of errors has been implemented for <code>MsBuildBinaryLogFileFormat</code> and <code>MsBuildXmlFileLoggerFormat</code>. For errors <code>IIssue.Priority</code> will be set to <code>IssuePriority.Error</code>.</p> <p>Info</p> <p>To keep previous behavior result after reading the issues can be filtered for <code>IIssue.Priority == IIssuePriority.Warning</code>.</p>"},{"location":"blog/2020/10/20/cake-issues-msbuild-v091-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues.MsBuild 0.9.1 is compatible with version 0.9.0 without any breaking changes. To update to the new version bump the version of the addin.</p>"},{"location":"blog/2020/12/01/cake-issues-recipe-v044-released-bringing-support-for-eslint/","title":"Cake Issues Recipe v0.4.4 released, bringing support for ESLint","text":"<p>Version 0.4.4 of Cake Issues Recipe has been released bringing support for ESLint.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions. For details see full release notes.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>pascalberger</li> </ul>"},{"location":"blog/2020/12/01/cake-issues-recipe-v044-released-bringing-support-for-eslint/#support-for-eslint","title":"Support for ESLint","text":"<p>This version of Cake.Issues.Recipe brings support for issues reported by ESLint. Currently supported are files generated using the ESLint json formatter</p>"},{"location":"blog/2020/12/01/cake-issues-recipe-v044-released-bringing-support-for-eslint/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues.Recipe 0.4.4 is compatible with version 0.4.x without any breaking changes. To update to the new version bump the version in your build script.</p>"},{"location":"blog/2021/07/27/new-addin-for-terraform-support/","title":"New addin for Terraform support","text":"<p>A new Cake.Issues.Terraform addin has been released which adds support for reading issues from Terraform <code>validate</code> command.</p> <p>Cake.Issues.Terraform addin brings support for Terraform to the Cake.Issues ecosystem. It allows to read the output of the Terraform <code>validate</code> command. Together with other Cake.Issues addins it is possible to create powerful infrastructure as code pipelines which ensure quality standards by validating Terraform files before merging or deploying the changes. When using a pull requests workflow it is also possible to have the issues reported by Terraform validate automatically reported as comments to pull request.</p>"},{"location":"blog/2021/07/28/cake-issues-v100-released/","title":"Cake Issues v1.0.0 Released","text":"<p>More than 4 years after the first commit for Cake.Prca, the predecessor of Cake Issues, we're happy to announce that Cake Issues version 1.0.0 has been released. This is a major release bringing a lot of new features across all addins.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>eoehen</li> <li>janniksam</li> <li>pascalberger</li> <li>phlorian</li> <li>jokay</li> </ul>"},{"location":"blog/2021/07/28/cake-issues-v100-released/#support-for-cake-10","title":"Support for Cake 1.0","text":"<p>All addins have been updated to support Cake 1.x.</p>"},{"location":"blog/2021/07/28/cake-issues-v100-released/#support-for-cake-frosting","title":"Support for Cake Frosting","text":"<p>All addins can be used with Cake Frosting.</p> <p>Cake Issues addins have always been self-contained, shipping with all required dependencies, to provide the best user experience. While this approach makes sense for Cake script runners, it makes things more complex than required when running under Cake Frosting. This is especially true for the Cake.Issues.Reporting.Generic addin, which uses Razor engine to generate the reports.</p> <p>It was therefore decided to release separate versions of the Cake.Issues.Reporting.Generic addin for the different script runners:</p> <ul> <li>Cake.Issues.Reporting.Generic: The addin packaged in a self-contained NuGet package for use with Cake script runners</li> <li>Cake.Frosting.Issues.Reporting.Generic: The addin packaged in a NuGet package containing dependencies for use with Cake Frosting</li> </ul> <p>Cake.Frosting.Issues.Reporting.Generic has the additional benefit for the user that it gives the user full control of what exact version of dependencies should be used. In the future more Cake Issues addins might be released in Frosting specific packages.</p>"},{"location":"blog/2021/07/28/cake-issues-v100-released/#support-for-arbitrary-values-in-an-issue","title":"Support for arbitrary values in an issue","text":"<p>Specific issue providers might have additional information for which no equivalent does exist on <code>IIssue</code>. These kind of information can now be stored in the <code>IIssue.AdditionalInformation</code> property.</p>"},{"location":"blog/2021/07/28/cake-issues-v100-released/#new-provider-type-property","title":"New provider type property","text":"<p>While there are aliases to get provider type name (e.g. MsBuildIssuesProviderTypeName), this information was in previous versions not available through the <code>IIssueProvider</code> interface. There is a new <code>IIssueProvider.ProviderType</code> property which can be used to retrieve the provider type.</p>"},{"location":"blog/2021/07/28/cake-issues-v100-released/#pdf-export","title":"PDF export","text":"<p>A new PDF export has been added to the <code>HtmlDxDataGrid</code> template of the <code>Cake.Issues.Reporting.Generic</code> addin.</p>"},{"location":"blog/2021/07/28/cake-issues-v100-released/#simplified-release-process","title":"Simplified release process","text":"<p>Starting with Cake Issues 1.0.0 the three core addins <code>Cake.Issues</code>, <code>Cake.Issues.PullRequests</code> and <code>Cake.Issues.Reporting</code> will be always released together. For that source code for the addin has been merged in the Cake.Issues repository. Please open any issues related to any of the core addins in the Cake.Issues issue tracker.</p>"},{"location":"blog/2021/07/28/cake-issues-v100-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues 1.0.0 is a breaking release, which means that it probably requires changes to your build script. This section documents the most common changes which might be required:</p> <ul> <li>Cake.Issues</li> <li>Serialization format has been updated to version 4.     Older version are still supported for deserialization.</li> <li><code>IIssueProvider</code> was extended with an additional <code>ProviderType</code> property.     For issue providers inheriting from <code>BaseIssueProvider</code> no action is required to keep the same behavior     as with previous versions, with the type name used as provider type.</li> </ul> <p>Info</p> <p>Cake.Recipe has not been updated to 1.0 yet.</p> <p>For details see release notes of the individual addins:</p> <ul> <li>Cake.Issues 1.0.0</li> <li>Cake.Issues.MsBuild 1.0.0</li> <li>Cake.Issues.InspectCode 1.0.0</li> <li>Cake.Issues.DupFinder 1.0.0</li> <li>Cake.Issues.GitRepository 1.0.0</li> <li>Cake.Issues.Markdownlint 1.0.0</li> <li>Cake.Issues.EsLint 1.0.0</li> <li>Cake.Issues.DocFx 1.0.0</li> <li>Cake.Issues.Terraform 1.0.0</li> <li>Cake.Issues.PullRequests 1.0.0</li> <li>Cake.Issues.PullRequests.AzureDevOps 1.0.0</li> <li>Cake.Issues.PullRequests.AppVeyor 1.0.0</li> <li>Cake.Issues.Reporting 1.0.0</li> <li>Cake.Issues.Reporting.Generic 1.0.0</li> <li>Cake.Issues.Reporting.Sarif 1.0.0</li> </ul>"},{"location":"blog/2021/07/30/cake-issues-eslint-v101-released/","title":"Cake Issues ESLint v1.0.1 Released","text":"<p>Version 1.0.1 of ESLint support for Cake.Issues has been released. This is a minor release containing bug fixes.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>eoehen</li> <li>pascalberger</li> <li>Speeedy01</li> </ul>"},{"location":"blog/2021/07/30/cake-issues-eslint-v101-released/#bug-fix-for-issues-with-line-column-or-rule","title":"Bug fix for issues with line, column or rule","text":"<p>When an issue reported by ESLint didn't contain line or column information, or rule was set to <code>null</code> an exception ocurred while parsing the file. This release fixes this and can now also correctly parse issues without position or rule information.</p>"},{"location":"blog/2021/07/30/cake-issues-eslint-v101-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues.EsLint 1.0.1 is compatible with version 1.0.0 without any breaking changes. To update to the new version bump the version of the addin.</p>"},{"location":"blog/2021/08/04/cake-issues-recipe-v100-released-bringing-support-for-cake-frosting/","title":"Cake Issues Recipe v1.0.0 Released, bringing support for Cake Frosting","text":"<p>Hard on the heels of the announcement for release 1.0 of Cake.Issues addins, we're happy to announce release 1.0 of the recipe script for Cake.Issues.</p> <p>This is a major release bringing support for Cake Frosting and other new features.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>pascalberger</li> </ul>"},{"location":"blog/2021/08/04/cake-issues-recipe-v100-released-bringing-support-for-cake-frosting/#support-for-cake-10","title":"Support for Cake 1.0","text":"<p>Cake Issues recipe has been updated to use latest 1.x versions of the Cake.Issues addins which support Cake 1.x.</p> <p>See announcement for release 1.0 of Cake.Issues addins for features added in the individual addins.</p>"},{"location":"blog/2021/08/04/cake-issues-recipe-v100-released-bringing-support-for-cake-frosting/#support-for-cake-frosting","title":"Support for Cake Frosting","text":"<p>Additionally to the existing Cake.Issues.Recipe package, which works fine for Cake script runners, there's a new Cake.Frosting.Issues.Recipe package suitable for builds using Cake Frosting.</p> <p>See Using Cake.Frosting.Issues.Recipe for an example.</p>"},{"location":"blog/2021/08/04/cake-issues-recipe-v100-released-bringing-support-for-cake-frosting/#support-for-environments-not-compatible-with-cakegit-addin","title":"Support for environments not compatible with Cake.Git addin","text":"<p>In previous versions Cake.Issues recipes had used Cake.Git addin to determine state of the Git repository. While this works in most cases, there are some environments where Cake.Git addin currently does not work.</p> <p>Starting with this version it is now possible to define if Cake.Git addin or Git CLI should be used.</p> <p>See Git repository information configuration for details.</p>"},{"location":"blog/2021/08/04/cake-issues-recipe-v100-released-bringing-support-for-cake-frosting/#define-settings-for-issue-providers","title":"Define settings for issue providers","text":"<p>Previous versions of Cake.Issues recipes used default settings for reading issues from the passed log files. This made it impossible to parse log files which for example are created by tools running in containers, as they have a root path different to the repository root.</p> <p>This version introduced methods to pass log files to the recipe scripts, which additionally to the log file path accept a settings object.</p> <p>The new implementation also supports other use-cases like reading multiple files with the same issues provider, but different settings (e.g. run information).</p>"},{"location":"blog/2021/08/04/cake-issues-recipe-v100-released-bringing-support-for-cake-frosting/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues Recipes 1.0.0 is a breaking release, which means that it probably requires changes to your build script. This section documents the most common changes which might be required:</p> <ul> <li>Properties for passing input files to the recipe scripts have been replaced by methods.   As an example, in previous versions MsBuild XML log files could be passed by setting the   <code>IssuesParameters.InputFiles.MsBuildXmlFileLoggerLogFilePath</code> property:</li> </ul> <pre><code>IssuesParameters.InputFiles.MsBuildXmlFileLoggerLogFilePath = @\"c:\\build\\msbuild.log\";\n</code></pre> <p>With 1.0 the <code>IssuesParameters.InputFiles.AddMsBuildXmlFileLoggerLogFile()</code> method needs to be called instead:</p> <pre><code>IssuesParameters.InputFiles.AddMsBuildXmlFileLoggerLogFile(@\"c:\\build\\msbuild.log\");\n</code></pre> <p>For details see full release notes</p>"},{"location":"blog/2021/08/11/cake-issues-recipes-v110-released/","title":"Cake Issues Recipes v1.1.0 released","text":"<p>Version 1.1.0 of Cake Issues recipes have been released adding support to customize report generation.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>pascalberger</li> </ul>"},{"location":"blog/2021/08/11/cake-issues-recipes-v110-released/#report-customization","title":"Report customization","text":"<p>This version of Cake Issues recipes adds a new <code>FullIssuesReportSettings</code> configuration parameter which allows to customize the generated issue report. See Report creation parameters for details.</p> <p>The following example enables exporting of the report when using Cake.Issues.Recipe:</p> <pre><code>IssuesParameters.Reporting.FullIssuesReportSettings\n    .WithOption(HtmlDxDataGridOption.EnableExporting, true)\n</code></pre> <p>The following example enables exporting of the report when using Cake.Frosting.Issues.Recipe:</p> <pre><code>context.Parameters.Reporting.FullIssuesReportSettings\n    .WithOption(HtmlDxDataGridOption.EnableExporting, true)\n</code></pre>"},{"location":"blog/2021/08/11/cake-issues-recipes-v110-released/#updated-addins","title":"Updated addins","text":"<p><code>Cake.Git</code> has been updated to version 1.1.0 which comes with an updated version of LibGit2Sharp which adds support for Ubuntu 20.</p> <p>See Cake.Git 1.1.0 release notes for details.</p>"},{"location":"blog/2021/08/11/cake-issues-recipes-v110-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake Issues recipes 1.1.0 are compatible with version 1.x without any breaking changes. To update to the new version bump the version in your build.</p>"},{"location":"blog/2021/08/19/cake-issues-recipes-v120-released/","title":"Cake Issues Recipes v1.2.0 released","text":"<p>Version 1.2.0 of Cake Issues recipes have been released adding support to customize issue reporting to pull requests.</p> <p>This post shows the highlights included in this release. For details see full release notes. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>pascalberger</li> </ul>"},{"location":"blog/2021/08/19/cake-issues-recipes-v120-released/#customization-of-pull-request-integration","title":"Customization of pull request integration","text":"<p>This version of Cake Issues recipes adds several new configuration parameter which allows to customize how issues are reported to pull requests. See Pull request integration parameters for details.</p> <p>The following example limits the number of issues posted to pull requests to <code>20</code> when using Cake.Issues.Recipe:</p> <pre><code>IssuesParameters.PullRequestSystem.MaxIssuesToPost = 20;\n</code></pre> <p>The following example limits the number of issues posted to pull requests to <code>20</code> when using Cake.Frosting.Issues.Recipe:</p> <pre><code>context.Parameters.PullRequestSystem.MaxIssuesToPost = 20;\n</code></pre>"},{"location":"blog/2021/08/19/cake-issues-recipes-v120-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake Issues recipes 1.2.0 are compatible with version 1.x without any breaking changes. To update to the new version bump the version in your build.</p>"},{"location":"blog/2021/08/29/new-addin-for-printing-issues-to-console/","title":"New addin for printing issues to console","text":"<p>A new Cake.Issues.Reporting.Console addin has been released which allows to output issues to the console.</p> <p>Cake.Issues.Reporting.Console addin can be used to print issues to the console and is built on top of the excellent Errata library by Patrik Svensson.</p> <p>Its main focus is to annotate source code with issues:</p> <p></p> <p>It currently only supports issues containing line and column information. Output can be grouped by rule, like in the image above, or individual entries for every issue.</p> <p>Beside printing issues it can also show summary tables.</p> <p>There's one summary which shows the number of issues for everyprovider and run:</p> <p></p> <p>Another summary shows the number of issues by priority for every provider and run:</p> <p></p>"},{"location":"blog/2021/08/31/cake-issues-markdownlint-v110-released/","title":"Cake Issues Markdownlint v1.1.0 Released","text":"<p>Version 1.1.0 of Markdownlint support for Cake.Issues has been released. This is a minor release adding features and improvements.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>pascalberger</li> </ul>"},{"location":"blog/2021/08/31/cake-issues-markdownlint-v110-released/#support-for-markdownlint-cli-json-format","title":"Support for markdownlint-cli JSON format","text":"<p>Since version 0.28.0 markdownlint-cli supports a <code>--json</code> option to output result in JSON format. This version adds support for this format through the MarkdownlintCliJsonLogFileFormat alias.</p>"},{"location":"blog/2021/08/31/cake-issues-markdownlint-v110-released/#provide-column-information","title":"Provide column information","text":"<p>This release of Cake.Issues.Markdownlint enhances the MarkdownlintCliLogFileFormat to provide column information if reported by markdownlint.</p>"},{"location":"blog/2021/08/31/cake-issues-markdownlint-v110-released/#recipe-packages","title":"Recipe packages","text":"<p>Cake Issues recipes have been released in version 1.3.0 shipping with Cake.Issues.Markdownlint 1.1.0 and adding support for markdownlint-cli JSON files.</p>"},{"location":"blog/2021/08/31/cake-issues-markdownlint-v110-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues.Markdownlint 1.1.0 is compatible with version 1.0.0 without any breaking changes. To update to the new version bump the version of the addin.</p>"},{"location":"blog/2021/09/05/cake-issues-reporting-console-v030-released-adding-support-for-all-cake-runners/","title":"Cake Issues Reporting Console v0.3.0 released, adding support for all Cake runners","text":"<p>Version 0.3.0 of Cake.Issues.Reporting.Console has been released. This is a minor release adding features and improvements.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>pascalberger</li> <li>patriksvensson</li> </ul>"},{"location":"blog/2021/09/05/cake-issues-reporting-console-v030-released-adding-support-for-all-cake-runners/#support-for-all-cake-runners","title":"Support for all Cake runners","text":"<p>Starting with this release Cake.Issues.Reporting.Console will target .NET Standard 2.0 instead of .NET 5.0 and therefore will support all Cake runners.</p>"},{"location":"blog/2021/09/05/cake-issues-reporting-console-v030-released-adding-support-for-all-cake-runners/#improved-reporting","title":"Improved reporting","text":"<p>Provider report is now rendered in different colors for the individual bars, making it easier to read:</p> <p></p>"},{"location":"blog/2021/09/05/cake-issues-reporting-console-v030-released-adding-support-for-all-cake-runners/#errata-060","title":"Errata 0.6.0","text":"<p>Underlying Errata library has been updated to 0.6.0, containing additional bug fixes and rendering improvements.</p>"},{"location":"blog/2021/09/05/cake-issues-reporting-console-v030-released-adding-support-for-all-cake-runners/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues.Reporting.Console 0.3.0 is compatible with previous versions without any breaking changes. To update to the new version bump the version of the addin.</p>"},{"location":"blog/2022/12/10/cake-issues-v200-released/","title":"Cake Issues v2.0.0 Released","text":"<p>After several months with beta releases Cake Issues version 2.0.0 has been released. This is a major release, containing breaking changes beside bringing new features and bug fixes across all addins.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>eoehen</li> <li>KirillOsenkov</li> <li>pascalberger</li> <li>twenzel</li> <li>yansklyarenko</li> </ul>"},{"location":"blog/2022/12/10/cake-issues-v200-released/#support-for-cake-20","title":"Support for Cake 2.0","text":"<p>All addins have been updated to support Cake 2.x.</p> <p>Target framework have been updated to .NET Core 3.1, .NET 5 and .NET 6 to be in line with Cake. See Sunsetting of .NET Framework and .NET Core runners in Cake 2.0 for details.</p>"},{"location":"blog/2022/12/10/cake-issues-v200-released/#support-for-msbuild-binary-logs-version-9","title":"Support for MsBuild binary logs version 9","text":"<p>Support for binary logs in version 9 has been added to <code>Cake.Issues.MsBuild</code>.</p>"},{"location":"blog/2022/12/10/cake-issues-v200-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues 2.0.0 is a breaking release, which means that it probably requires changes to your build script. This section documents the most common changes which might be required:</p> <ul> <li>Cake.Issues</li> <li>Serialization format has been updated to version <code>5</code>.     Older version are still supported for deserialization.</li> <li><code>ProviderIssueIssueLimits</code> has been renamed to <code>ProviderIssueLimits</code></li> <li><code>IIssue.Rule</code> has been renamed to <code>IIssue.RuleId</code></li> <li><code>IIssue</code> was extended with an additional <code>RuleName</code> property.</li> <li>Cake.Issues.MsBuild</li> <li>MsBuild 15 or newer required for binary logs</li> </ul> <p>For details see release notes of the individual addins:</p> <ul> <li>Cake.Issues 2.0.0</li> <li>Cake.Issues.DocFx 2.0.0</li> <li>Cake.Issues.DupFinder 2.0.0</li> <li>Cake.Issues.EsLint 2.0.0</li> <li>Cake.Issues.GitRepository 2.0.0</li> <li>Cake.Issues.InspectCode 2.0.0</li> <li>Cake.Issues.Markdownlint 2.0.0</li> <li>Cake.Issues.MsBuild 2.0.0</li> <li>Cake.Issues.Terraform 2.0.0</li> <li>Cake.Issues.Reporting.Console 2.0.0</li> <li>Cake.Issues.Reporting.Generic 2.0.0</li> <li>Cake.Issues.Reporting.Sarif 2.0.0</li> <li>Cake.Issues.PullRequests.AppVeyor 2.0.0</li> <li>Cake.Issues.PullRequests.AzureDevOps 2.0.0</li> <li>Cake.Issues.PullRequests.GitHubActions 2.0.0</li> </ul>"},{"location":"blog/2023/07/22/cake-issues-v300-released/","title":"Cake Issues v3.0.0 Released","text":"<p>Cake Issues version 3.0.0 has been released. This is a major release, containing breaking changes beside bringing new features and bug fixes across all addins.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>DiDoHH</li> <li>eoehen</li> <li>pascalberger</li> </ul>"},{"location":"blog/2023/07/22/cake-issues-v300-released/#support-for-cake-30","title":"Support for Cake 3.0","text":"<p>All addins have been updated to support Cake 3.x.</p> <p>Target framework have been updated to .NET 6 and .NET 7 to be in line with Cake.</p>"},{"location":"blog/2023/07/22/cake-issues-v300-released/#support-for-msbuild-binary-logs-version-16","title":"Support for MsBuild binary logs version 16","text":"<p>Support for binary logs in version 16 has been added to <code>Cake.Issues.MsBuild</code>.</p>"},{"location":"blog/2023/07/22/cake-issues-v300-released/#out-of-the-box-support-for-more-rule-links","title":"Out of the box support for more rule links","text":"<p><code>Cake.Issues.MsBuild</code> now will automatically provide links for Roslynator and SonarLint rules. Links for <code>CA</code> rules have updated to link to <code>learn.microsoft.com</code>.</p>"},{"location":"blog/2023/07/22/cake-issues-v300-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues 3.0.0 is a breaking release, which means that it probably requires changes to your build script. This section documents the most common changes which might be required:</p> <ul> <li>Cake.Issues</li> <li><code>StringPathExtensions.IsValideRepositoryFilePath</code> has been renamed to <code>StringPathExtensions.IsValidRepositoryFilePath</code></li> <li><code>BaseRuleDescription.Rule</code> has been made immutable after initialization</li> <li>Cake.Issues.Recipe</li> <li>Since Dupfinder has been sunsetted end of 2021, out of the box support for it has been removed from Cake Issues Recipe     and <code>DupFinderLogFilePaths</code> is no longer available.     To keep using DupFinder you need to manually add <code>Cake.Issues.DupFinder</code> and add issues using the <code>AddIssues</code> method.</li> </ul> <p>For details see release notes of the individual addins:</p> <ul> <li>Cake.Issues.Recipe 3.0.0</li> <li>Cake.Issues 3.0.0</li> <li>Cake.Issues.DocFx 3.0.0</li> <li>Cake.Issues.DupFinder 3.0.0</li> <li>Cake.Issues.EsLint 3.0.0</li> <li>Cake.Issues.GitRepository 3.0.0</li> <li>Cake.Issues.InspectCode 3.0.0</li> <li>Cake.Issues.Markdownlint 3.0.0</li> <li>Cake.Issues.MsBuild 3.0.0</li> <li>Cake.Issues.Terraform 3.0.0</li> <li>Cake.Issues.Reporting.Console 3.0.0</li> <li>Cake.Issues.Reporting.Generic 3.0.0</li> <li>Cake.Issues.Reporting.Sarif 3.0.0</li> <li>Cake.Issues.PullRequests.AppVeyor 3.0.0</li> <li>Cake.Issues.PullRequests.AzureDevOps 3.0.0</li> <li>Cake.Issues.PullRequests.GitHubActions 3.0.0</li> </ul>"},{"location":"blog/2023/08/16/cake-issues-recipes-v310-released/","title":"Cake Issues Recipes v3.1.0 released","text":"<p>Version 3.1.0 of Cake Issues recipes have been released adding support for creating of reports in SARIF format.</p> <p>This post shows the highlights included in this release. For details see full release notes. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>pascalberger</li> </ul>"},{"location":"blog/2023/08/16/cake-issues-recipes-v310-released/#reports-in-sarif-format","title":"Reports in SARIF format","text":"<p>This version of Cake Issues recipes adds a new configuration parameter which allows to create reports in SARIF format allowing further processing in a lot of different tools also supporting the SARIF standard. See Report parameters for details.</p> <p>If running on Azure Pipelines the generated SARIF file is uploaded so that it will be shown in the SARIF SAST Scans Tab extension.</p>"},{"location":"blog/2023/08/16/cake-issues-recipes-v310-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake Issues recipes 3.1.0 are compatible with version 3.x without any breaking changes. To update to the new version bump the version in your build.</p>"},{"location":"blog/2023/12/23/cake-issues-v400-released/","title":"Cake Issues v4.0.0 Released","text":"<p>Cake Issues version 4.0.0 has been released. This is a major release, containing breaking changes beside bringing new features and bug fixes across all addins.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>pascalberger</li> </ul>"},{"location":"blog/2023/12/23/cake-issues-v400-released/#support-for-cake-40","title":"Support for Cake 4.0","text":"<p>All addins have been updated to support Cake 4.x.</p> <p>Target framework have been updated to .NET 6, .NET 7 and .NET 8 to be in line with Cake.</p>"},{"location":"blog/2023/12/23/cake-issues-v400-released/#switch-to-systemtextjson-for-serialization","title":"Switch to System.Text.Json for serialization","text":"<p>For serialization / deserialization of issues LitJson was used internally. With Cake.Issues 4.0 internal code has been changed to use System.Text.Json classes.</p> <p>The change should not have any impact for users.</p>"},{"location":"blog/2023/12/23/cake-issues-v400-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>While Cake.Issues 4.0.0 is a breaking release, there are no breaking changes beside the update to Cake 4.x and the changes to target framework version.</p> <p>For details see release notes</p>"},{"location":"blog/2024/01/14/alignment-of-addin-lifecycles/","title":"Alignment of addin lifecycles","text":"<p>Cake Issues has a modular architecture consisting of multiple addins. Historically every addin had its own independent release lifecycle. Starting with the next release work will begin to have all addins share the same release lifecycle.</p> <p>When Cake Issues started all three core addins (<code>Cake.Issues</code>, <code>Cake.Issues.Reporting</code> and <code>Cake.Issues.PullRequsts</code>) and every issue provider, report format and pull request system addin were released on their own schedule, allowing fast iterations of individual components. With the release of Cake Issues 1.0 the release lifecycle of the three core addins have been aligned, resulting in a simplified release process.</p> <p>Starting with the next release we'll begin to move also the remaining issue provider, report format and pull request system addins into the main Cake Issues repository and have them released together with the core addins.</p>"},{"location":"blog/2024/02/21/cake-issues-v410-released/","title":"Cake Issues v4.1.0 Released","text":"<p>Cake Issues version 4.1.0 has been released with improvements for Cake Frosting and support for latest MsBuild binary log format.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>christianbumann</li> <li>pascalberger</li> </ul>"},{"location":"blog/2024/02/21/cake-issues-v410-released/#improvement-for-cake-frosting","title":"Improvement for Cake Frosting","text":"<p>Cake.Frosting.Issues.Reporting and Cake.Frosting.Issues.PullRequests have been released as optimized version of the <code>Cake.Issues.Reporting</code> and <code>Cake.Issues.PullRequests</code> for Cake Frosting.</p> <p>These addins come with a dependency to the core <code>Cake.Issues</code> addin, allowing it to be consumed as transitive dependency.</p>"},{"location":"blog/2024/02/21/cake-issues-v410-released/#support-for-msbuild-binary-logs-version-18","title":"Support for MsBuild binary logs version 18","text":"<p>Support for binary logs in version 18 has been added to <code>Cake.Issues.MsBuild</code>.</p>"},{"location":"blog/2024/02/21/cake-issues-v410-released/#alignment-of-release-lifecycle","title":"Alignment of release lifecycle","text":"<p>As announced in Alignment of addin lifecycles work as started to move addins into the main Cake Issues repository.</p> <p>Starting with this release the following addins will be released together with the core addins:</p> <ul> <li>Cake.Issues.DocFx</li> <li>Cake.Issues.EsLint</li> <li>Cake.Issues.MsBuild</li> <li>Cake.Issues.InspectCode</li> <li>Cake.Issues.Markdownlint</li> </ul>"},{"location":"blog/2024/02/21/cake-issues-v410-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues 4.1.0 addins are compatible with any 4.x addins. To update to the new version bump the version of the specific addins.</p> <p>For details see release notes</p>"},{"location":"blog/2024/04/14/cake-issues-v420-released/","title":"Cake Issues v4.2.0 Released","text":"<p>Cake Issues version 4.2.0 has been released introducing a new issue provider for SARIF compatible files.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>eoehen</li> <li>pascalberger</li> </ul>"},{"location":"blog/2024/04/14/cake-issues-v420-released/#new-issue-provider-for-sarif-files","title":"New issue provider for SARIF files","text":"<p>A new Cake.Issues.Sarif addin has been released which adds support for reading issues in SARIF format.</p> <p>See New addin for reading SARIF files for details.</p>"},{"location":"blog/2024/04/14/cake-issues-v420-released/#improvement-for-cake-frosting","title":"Improvement for Cake Frosting","text":"<p>Optimized versions for Cake Frosting have been released for the following addins:</p> <ul> <li>Cake.Frosting.Issues.DocFx</li> <li>Cake.Frosting.Issues.EsLint</li> <li>Cake.Frosting.Issues.GitRepository</li> <li>Cake.Frosting.Issues.InspectCode</li> <li>Cake.Frosting.Issues.Markdownlint</li> <li>Cake.Frosting.Issues.Terraform</li> <li>Cake.Frosting.Issues.PullRequests.AppVeyor</li> <li>Cake.Frosting.Issues.PullRequests.AzureDevOps</li> <li>Cake.Frosting.Issues.PullRequests.GitHubActions</li> </ul> <p>These addins come with a dependency to the core addins, allowing the core addins to be consumed as transitive dependencies.</p>"},{"location":"blog/2024/04/14/cake-issues-v420-released/#alignment-of-release-lifecycle","title":"Alignment of release lifecycle","text":"<p>As announced in Alignment of addin lifecycles work as started to move addins into the main Cake Issues repository.</p> <p>Starting with this release the following addins will be released together with the core addins:</p> <ul> <li>Cake.Issues.GitRepository</li> <li>Cake.Issues.Terraform</li> <li>Cake.Issues.PullRequests.AppVeyor</li> <li>Cake.Issues.PullRequests.AzureDevOps</li> <li>Cake.Issues.PullRequsts.GitHubActions</li> <li>Cake.Issues.Reporting.Console</li> <li>Cake.Issues.Reporting.Generic</li> <li>Cake.Issues.Reporting.Sarif</li> </ul>"},{"location":"blog/2024/04/14/cake-issues-v420-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues 4.2.0 addins are compatible with any 4.x addins. To update to the new version bump the version of the specific addins.</p> <p>For details see release notes</p>"},{"location":"blog/2024/04/14/new-addin-for-reading-sarif-files/","title":"New addin for reading SARIF files","text":"<p>A new Cake.Issues.Sarif addin has been released which adds support for reading issues in SARIF format.</p> <p>SARIF is an industry standard format for the output of static analysis tools. With the introduction of SARIF support through the Cake.Issues.Sarif addin any tool which can output results in SARIF format can now be used together with Cake Issues.</p> <p>See Supported Tools for an updated list of supported tools.</p> <p>The addins is available in a version for Cake .NET Tool (Cake.Issues.Sarif) and Cake Frosting (Cake.Frosting.Issues.Sarif).</p>"},{"location":"blog/2024/04/16/cake-issues-v421-released/","title":"Cake Issues v4.2.1 Released","text":"<p>Cake Issues version 4.2.1 has been released with compatibility fixes.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>pascalberger</li> </ul>"},{"location":"blog/2024/04/16/cake-issues-v421-released/#compatibility-improvements","title":"Compatibility improvements","text":"<p>As a side-effect of moving all addins to the central Cake Issues repository, <code>AssemblyVersion</code> of every has been set to the release version.</p> <p>Addins are backwards compatible though to latest major version, which was no longer possible with this change.</p> <p>This release fixes this by setting the <code>AssemblyVersion</code> to the major version (currently <code>4.0.0</code>).</p>"},{"location":"blog/2024/04/16/cake-issues-v421-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues 4.2.1 addins are compatible with any 4.x addins. To update to the new version bump the version of the specific addins.</p> <p>For details see release notes</p>"},{"location":"blog/2024/04/20/cake-issues-v430-released/","title":"Cake Issues v4.3.0 Released","text":"<p>Cake Issues version 4.3.0 has been released with support for MsBuild binary log format version 20.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>pascalberger</li> </ul>"},{"location":"blog/2024/04/20/cake-issues-v430-released/#support-for-msbuild-binary-logs-version-20","title":"Support for MsBuild binary logs version 20","text":"<p>Support for binary logs in version 20 has been added to <code>Cake.Issues.MsBuild</code>.</p>"},{"location":"blog/2024/04/20/cake-issues-v430-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues 4.3.0 addins are compatible with any 4.x addins. To update to the new version bump the version of the specific addins.</p> <p>For details see release notes</p>"},{"location":"blog/2024/12/02/cake-issues-v500-released/","title":"Cake Issues v5.0.0 Released","text":"<p>Cake Issues version 5.0.0 has been released. This is a major release, containing breaking changes beside bringing new features and bug fixes across all addins.</p> <p>This post shows the highlights included in this release. For update instructions skip to Updating from previous versions.</p> <p>\u2764 Huge thanks to our community! This release would not have been possible without your support and contributions! \u2764</p> <p>People working on this release:</p> <ul> <li>eoehen</li> <li>pascalberger</li> </ul>"},{"location":"blog/2024/12/02/cake-issues-v500-released/#support-for-cake-50","title":"Support for Cake 5.0","text":"<p>All addins have been updated to support Cake 5.x.</p> <p>Target framework have been updated to .NET 8 and .NET 9 to be in line with Cake.</p>"},{"location":"blog/2024/12/02/cake-issues-v500-released/#improvements-for-cake-frosting","title":"Improvements for Cake Frosting","text":"<p><code>Cake.Frosting.Issues.PullRequests.AzureDevOps</code> now references <code>Cake.Frosting.AzureDevOps</code>, a version of <code>Cake.AzureDevOps</code>, optimized for Cake Frosting.</p> <p>Instead of shipping client assemblies to access Azure DevOps as part of <code>Cake.AzureDevOps</code>, <code>Cake.Frosting.AzureDevOps</code> references the corresponding NuGet packages, which for example allows to control version of the libraries used.</p>"},{"location":"blog/2024/12/02/cake-issues-v500-released/#security-improvements","title":"Security improvements","text":"<p>Transitive dependencies which contain known security vulnerabilities have been updated to newer versions where the vulnerabilities are fixed.</p>"},{"location":"blog/2024/12/02/cake-issues-v500-released/#updating-from-previous-versions","title":"Updating from previous versions","text":"<p>Cake.Issues 5.0.0 is a breaking release, which means that there is a small change that changes to your build script are required.</p> <p>For details see release notes</p>"},{"location":"blog/2024/12/21/new-website/","title":"New website","text":"<p>Today a new version of the Cake Issues website has been published.</p> <p>The Cake Issues website was introduced 2017 as a static website built using Wyam, like the Cake website. Using Wyam allowed to add full API documentation and other features like list of addins or overview of open issues across all addins.</p> <p>Wyam is no longer maintained, with Statiq as its successor. Unfortunately also the deployment pipeline for the Cake Issues website stopped working in 2023, resulting in the website no longer receiving updates.</p> <p>Since the introduction of the Cake Issues website seven years ago, the Cake website also has been improved, among other things, with a dedicated page for each addin listing the aliases the addin provides. These improvements made a full API documentation on Cake Issues website somehow redundant.</p> <p>With .NET API documentation no longer being a requirement there are much more tooling options available. The choice was made to use Material for MkDocs, which comes with a lot of features for writing technical documentation.</p> <p>One of the features of the new website is support for multiple versions using mike. <code>https://cakeissues.net/latest/</code> will always point to the documentation of the latest released version. <code>https://cakeissues.net/develop/</code> points to the documentation of the current development branch. Beside that there's now a version selector in the header to show documentation for any old version.</p>"},{"location":"documentation/features/","title":"Features","text":""},{"location":"documentation/features/#ready-to-use-distributions","title":"Ready To Use Distributions","text":"<ul> <li> <p> Cake Recipe Packages</p> <p>Cake Issues recipes provide build scripts, delivered as a NuGet package, which can be used inside your projects Cake build to add issue management.</p> <p>It handles all the parsing, integration with build and pull request systems for you, using the individual Cake Issues addins.</p> <p> Recipes</p> </li> </ul>"},{"location":"documentation/features/#reading-creating-issues","title":"Reading &amp; Creating Issues","text":"<ul> <li> <p> Read issues provided by tools</p> <p>The <code>ReadIssues</code> aliases can be used for reading issues reported by a linter to tool using an issue provider.</p> <p>There are overloads for reading using a single or multiple issue provider.</p> <p> Aliases</p> </li> <li> <p> Create issues in your build</p> <p>The <code>NewIssue</code> aliases can be used for creating issues in the build script.</p> <p> Aliases</p> </li> <li> <p> Support for file links</p> <p>Support for creating links to file &amp; location on source code hosting system (GitHub, Azure Repos, etc).</p> <p> Aliases</p> </li> <li> <p> Issue serialization</p> <p>Support for serializing and deserializing created issues and issues read from tools.</p> <p> Aliases</p> </li> <li> <p> Support for multiple message formats</p> <p>Support for reading issues in multiple formats (Plain text, Markdown, HTML) if supported by issue provider.</p> </li> <li> <p> Support for run information</p> <p>Support for passing additional run information to identify specific runs.</p> </li> </ul>"},{"location":"documentation/features/#breaking-builds","title":"Breaking builds","text":"<ul> <li> <p> Fail builds on reported issues</p> <p>The <code>BreakBuildOnIssues</code> aliases can be used for failing builds if specific issues were reported.</p> <p>There are overloads for failing if issues of certain minimum priority or issue providers are found, or by passing any custom function.</p> <p> Aliases</p> </li> </ul>"},{"location":"documentation/features/#reporting","title":"Reporting","text":"<ul> <li> <p> Create reports</p> <p>The <code>CreateIssueReport</code> aliases can be used for creating reports in a supported reporting format.</p> <p>There are overloads for reading issues from a single or multiple issue provider or for passing an existing list of issues.</p> <p> Aliases</p> </li> </ul>"},{"location":"documentation/features/#build-pull-request-system-integration","title":"Build &amp; Pull Request System Integration","text":"<ul> <li> <p> Add comments to pull requests</p> <p>The <code>ReportIssuesToPullRequest</code> aliases can be used for writing issues as comments to pull requests.</p> <p>There are overloads for reading issues from a single or multiple issue provider or for passing an existing list of issues.</p> <p> Aliases</p> </li> <li> <p> Report issues to build runs</p> <p>The <code>ReportIssuesToPullRequest</code> aliases can be used for reporting issues to build runs.</p> <p>There are overloads for reading issues from a single or multiple issue provider or for passing an existing list of issues.</p> <p> Aliases</p> </li> <li> <p> Issue filters</p> <p>Support for passing custom issue filter routines.</p> <p> Setting</p> </li> <li> <p> Limit reported issues</p> <p>Advanced support to limit number of maximum issues per run, across multiple runs or per issue provider through settings.</p> <p> Settings</p> </li> <li> <p> Automatic comment resolving</p> <p>If supported by the pull request system, comments for issues are automatic resolved if fixed in subsequent commits.</p> </li> </ul>"},{"location":"documentation/how-cake-issues-works/","title":"How Cake Issues Works","text":"<p>The Cake Issues addins are built in a modular architecture, allowing to easily enhance it for supporting additional analyzers, linters, report formats and pull request systems.</p> <p></p>"},{"location":"documentation/how-cake-issues-works/#cakeissues-addin","title":"Cake.Issues addin","text":"<p>The <code>Cake.Issues</code> addin provides aliases for creating issues or reading issues using one or more issue providers.</p> <p>Support for different code analyzers and linters is provided through issue provider addins which cover a wide range of linters and tools.</p> <p>The issues are read into IIssue objects which then can be passed to Cake.Issues.Reporting addin, Cake.Issues.PullRequests addin or further processed in the build script.</p> <p>The use of issue provider addins, which contain the parsing logic for individual tool output formats, and the use of IIssue as common data structure, allows to abstract the tooling output from other concerns like integration with build systems, pull request workflow or the creation of reports.</p>"},{"location":"documentation/how-cake-issues-works/#cakeissuesreporting-addin","title":"Cake.Issues.Reporting addin","text":"<p>The <code>Cake.Issues.Reporting</code> addin provides aliases for creating reports for issues which are read or have been created using the Cake.Issues addin.</p> <p>Support for different report formats is provided through report format addins.</p>"},{"location":"documentation/how-cake-issues-works/#cakeissuespullrequests-addin","title":"Cake.Issues.PullRequests addin","text":"<p>The <code>Cake.Issues.PullRequests</code> addin provides aliases for reporting issues which are read or have been created using the Cake.Issues addin as comments to pull requests or builds.</p> <p>Support for different pull request systems is provided through pull request system addins.</p>"},{"location":"documentation/overview/","title":"Introduction","text":"<p>The Cake.Issues addins for the Cake build automation system offer an extensive and flexible solution for reading linting issues.</p> <p>Cake.Issues redefines issue management within the Cake build system by offering a comprehensive, universal, and extensible solution. The unique capabilities of the addins empower development teams to enforce coding standards, generate insightful reports, seamlessly incorporate various linting tools, and streamlining the integration with pull requests. With its modular architecture and extensive set of aliases, Cake.Issues provides a future-proof infrastructure for issue management in Cake builds, fostering a more efficient and adaptable development process.</p>"},{"location":"documentation/overview/#unique-problem-solving","title":"Unique Problem Solving","text":"<p>Some examples how Cake.Issues can help development teams to improve code quality.</p>"},{"location":"documentation/overview/#break-build-on-linting-issues","title":"Break build on linting issues","text":"<p>Cake.Issues provides a seamless integration, allowing you to enforce coding standards by breaking builds when linting issues are detected.</p> <p> Breaking builds</p>"},{"location":"documentation/overview/#pull-requests-integration","title":"Pull Requests integration","text":"<p>Ensure linting issues are promptly addressed by having them reported as comments on pull requests. Cake.Issues bridges the gap between linting tools and version control systems, fostering efficient collaboration during code reviews.</p> <p> Integrate with pull request systems</p>"},{"location":"documentation/overview/#reports","title":"Reports","text":"<p>Craft detailed and visually appealing reports for linting issues directly within your Cake build. The addins facilitates easy identification and resolution of linting concerns, enhancing the overall code quality.</p> <p> Creating Reports</p>"},{"location":"documentation/overview/#universal-compatibility","title":"Universal Compatibility","text":""},{"location":"documentation/overview/#diverse-linting-tool-support","title":"Diverse Linting Tool Support","text":"<p>Regardless of the linting tools you use, Cake.Issues ensures that you're not left out. Cake.Issues supports a variety of analyzers and linters, allowing you to incorporate new tools effortlessly while maintaining integration with existing ones.</p> <p> Supported Tools</p>"},{"location":"documentation/overview/#build-system-agnosticism","title":"Build System Agnosticism","text":"<p>Embrace the freedom to choose the build system that best suit your needs. If your current build system lacks tasks for reporting issues in pull requests, Cake.Issues steps in to fill that void seamlessly. In the case of using multiple CI services, Cake.Issues guarantees a consistent feature set across all of them.</p> <p> Supported Build and pull request systems</p>"},{"location":"documentation/overview/#unprecedented-extensibility","title":"Unprecedented Extensibility","text":""},{"location":"documentation/overview/#modular-architecture","title":"Modular Architecture","text":"<p>The Cake.Issues addin breaks away from the norm by offering a modular architecture. Comprising over 15 distinct addins, it presents a cohesive solution through more than 75 aliases for Cake builds, providing unparalleled flexibility.</p> <p> Architecture</p>"},{"location":"documentation/overview/#extensible-infrastructure","title":"Extensible Infrastructure","text":"<p>Designed with extensibility in mind, Cake.Issues provides extension points for supporting additional analyzers, linters,report formats, and code review systems. This adaptability ensures that your build scripts can evolve with the ever-changing landscape of development tools.</p> <p> Documentation</p>"},{"location":"documentation/supported-tools/","title":"Supported Tools","text":"<p>This pages lists tools known to be working with Cake Issues (1)</p> <ol> <li>If you have used Cake Issues with other we would like to hear from you.     You can add it to this list by creating a pull request here.</li> </ol>"},{"location":"documentation/supported-tools/#net","title":".NET","text":"Tool Tool Version Format Issue Provider Supported Since dupFinder Cake.Issues.DupFinder 0.8.0 InspectCode xml Cake.Issues.InspectCode 0.1.0 InspectCode &gt;= 2024.1 SARIF Cake.Issues.Sarif 4.2.0 MsBuild Binary Log 7 Cake.Issues.MsBuild 0.6.1 MsBuild Binary Log 8 Cake.Issues.MsBuild 0.8.0 MsBuild Binary Log 9 Cake.Issues.MsBuild 2.0.0 MsBuild Binary Log 16 Cake.Issues.MsBuild 3.0.0 MsBuild Binary Log 17 Cake.Issues.MsBuild 4.0.0 MsBuild Binary Log 18 Cake.Issues.MsBuild 4.1.0 MsBuild Binary Log 20 Cake.Issues.MsBuild 4.3.0 MsBuild Binary Log 21 Cake.Issues.MsBuild 4.7.0 MsBuild Binary Log 22 Cake.Issues.MsBuild 4.10.0 MsBuild Binary Log 23 Cake.Issues.MsBuild 4.11.0 MsBuild Binary Log 24 Cake.Issues.MsBuild 4.12.0 MsBuild XmlFileLogger Cake.Issues.MsBuild 0.1.0"},{"location":"documentation/supported-tools/#ansible","title":"Ansible","text":"Tool Tool Version Format Issue Provider Supported Since Ansible-lint SARIF Cake.Issues.Sarif 4.2.0 checkov SARIF Cake.Issues.Sarif 4.2.0 kics sarif Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#amazon-cloud-formation-templates","title":"Amazon Cloud Formation Templates","text":"Tool Tool Version Format Issue Provider Supported Since cfn-lint SARIF Cake.Issues.Sarif 4.2.0 checkov SARIF Cake.Issues.Sarif 4.2.0 kics sarif Cake.Issues.Sarif 4.2.0 Trivy SARIF Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#azure-resource-manager-arm","title":"Azure Resource Manager (ARM)","text":"Tool Tool Version Format Issue Provider Supported Since checkov SARIF Cake.Issues.Sarif 4.2.0 kics sarif Cake.Issues.Sarif 4.2.0 Trivy SARIF Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#bicep","title":"Bicep","text":"Tool Tool Version Format Issue Provider Supported Since checkov SARIF Cake.Issues.Sarif 4.2.0 kics sarif Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#dockerfile","title":"Dockerfile","text":"Tool Tool Version Format Issue Provider Supported Since checkov SARIF Cake.Issues.Sarif 4.2.0 Hadolint sarif Cake.Issues.Sarif 4.2.0 kics sarif Cake.Issues.Sarif 4.2.0 Trivy SARIF Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#github-actions","title":"GitHub Actions","text":"Tool Tool Version Format Issue Provider Supported Since actionlint SARIF Cake.Issues.Sarif 4.2.0 checkov SARIF Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#go","title":"Go","text":"Tool Tool Version Format Issue Provider Supported Since golangci-lint sarif Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#groovy","title":"Groovy","text":"Tool Tool Version Format Issue Provider Supported Since npm-groovy-lint sarif Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#helm-charts","title":"Helm charts","text":"Tool Tool Version Format Issue Provider Supported Since checkov SARIF Cake.Issues.Sarif 4.2.0 kics sarif Cake.Issues.Sarif 4.2.0 Trivy SARIF Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#java","title":"Java","text":"Tool Tool Version Format Issue Provider Supported Since checkstyle sarif Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#javascript","title":"JavaScript","text":"Tool Tool Version Format Issue Provider Supported Since ESLint Current json Cake.Issues.EsLint 0.1.0"},{"location":"documentation/supported-tools/#json","title":"JSON","text":"Tool Tool Version Format Issue Provider Supported Since eslint-plugin-json Cake.Issues.EsLint 0.1.0 eslint-plugin-jsonc Cake.Issues.EsLint 0.1.0"},{"location":"documentation/supported-tools/#jsx-tsx","title":"JSX &amp; TSX","text":"Tool Tool Version Format Issue Provider Supported Since eslint-plugin-jsx-a11y Cake.Issues.EsLint 0.1.0 eslint-plugin-react Cake.Issues.EsLint 0.1.0"},{"location":"documentation/supported-tools/#kotlin","title":"Kotlin","text":"Tool Tool Version Format Issue Provider Supported Since detekt sarif Cake.Issues.Sarif 4.2.0 ktlint sarif Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#kubernetes","title":"Kubernetes","text":"Tool Tool Version Format Issue Provider Supported Since checkov SARIF Cake.Issues.Sarif 4.2.0 kics sarif Cake.Issues.Sarif 4.2.0 Trivy SARIF Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#markdown","title":"Markdown","text":"Tool Tool Version Format Issue Provider Supported Since DocFx Cake.Issues.DocFx 0.1.0 markdownlint resultVersion=1 Cake.Issues.Markdownlint 0.1.0 markdownlint-cli &lt; 0.9.0 Default Cake.Issues.Markdownlint 0.2.0 markdownlint-cli &gt;= 0.9.0 Default Cake.Issues.Markdownlint 0.3.0 markdownlint-cli &gt;= 0.19.0 Default Cake.Issues.Markdownlint 0.8.1 markdownlint-cli &gt;= 0.22.0 Default Cake.Issues.Markdownlint 0.8.2 markdownlint-cli json Cake.Issues.Markdownlint 1.1.0"},{"location":"documentation/supported-tools/#openapi","title":"OpenAPI","text":"Tool Tool Version Format Issue Provider Supported Since checkov SARIF Cake.Issues.Sarif 4.2.0 kics sarif Cake.Issues.Sarif 4.2.0 Spectral sarif Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#php","title":"PHP","text":"Tool Tool Version Format Issue Provider Supported Since Psalm results.sarif Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#protobuf","title":"Protobuf","text":"Tool Tool Version Format Issue Provider Supported Since protolint sarif Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#python","title":"Python","text":"Tool Tool Version Format Issue Provider Supported Since Bandit sarif Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#secrets","title":"Secrets","text":"Tool Tool Version Format Issue Provider Supported Since checkov SARIF Cake.Issues.Sarif 4.2.0 DevSkim sarif Cake.Issues.Sarif 4.2.0 gitleaks sarif Cake.Issues.Sarif 4.2.0 secretlint sarif Cake.Issues.Sarif 4.2.0 semgrep sarif Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#terraform","title":"Terraform","text":"Tool Tool Version Format Issue Provider Supported Since checkov SARIF Cake.Issues.Sarif 4.2.0 kics sarif Cake.Issues.Sarif 4.2.0 Terraform Validate Cake.Issues.Terraform 1.0.0 TFLint sarif Cake.Issues.Sarif 4.2.0 Trivy SARIF Cake.Issues.Sarif 4.2.0"},{"location":"documentation/supported-tools/#typescript","title":"TypeScript","text":"Tool Tool Version Format Issue Provider Supported Since ESLint Current json Cake.Issues.EsLint 0.1.0"},{"location":"documentation/contributing/how-to-build/","title":"How to build addins","text":"<p>To build this a package we are using Cake.</p> <p>On Windows PowerShell run:</p> <pre><code>./build\n</code></pre> <p>On OSX/Linux run:</p> <pre><code>./build.sh\n</code></pre>"},{"location":"documentation/contributing/how-to-contribute/","title":"How to contribute","text":"<p>The repositories are using GitFlow with default configuration. Development is happening on <code>develop</code> branch.</p> <p>To contribute:</p> <ul> <li>Fork this repository.</li> <li>Create a feature branch from <code>develop</code>.</li> <li>Implement your changes.</li> <li>Push your feature branch.</li> <li>Create a pull request.</li> </ul> <p>For getting started see issues marked with <code>Up-for-grabs</code> in the individual repositories.</p>"},{"location":"documentation/contributing/how-to-release/","title":"How to release addins","text":"<p>See Cake.Recipe documentation how to create a new release of this addin.</p>"},{"location":"documentation/extending/","title":"Extending","text":"<p>Cake Issues can easily be extended with additional Issue Provider, Report Formats and Pull Request System integrations.</p>"},{"location":"documentation/extending/testing/","title":"Testing","text":"<p>The Cake.Issues.Testing package provides different helper classes for writing test cases for issue provider, report format or pull request system addins.</p> <p>API Documentation on fuget.org</p>"},{"location":"documentation/extending/issue-provider/categories/","title":"Alias categories","text":"<p>Issue provider aliases should use the IssuesAliasConstants.MainCakeAliasCategory and IssuesAliasConstants.IssueProviderCakeAliasCategory constants for defining their category:</p> <pre><code>[CakeAliasCategory(IssuesAliasConstants.MainCakeAliasCategory)]\npublic static class MyIssueProviderAliases\n{\n    [CakeMethodAlias]\n    [CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\n    public static IIssueProvider MyIssueProvider(\n        this ICakeContext context)\n    {\n    }\n}\n</code></pre>"},{"location":"documentation/extending/issue-provider/helper/","title":"Helper","text":"<p>The following helpers are provider by <code>Cake.Issues</code> for simplifying implementation of issue providers:</p> Helper Description StringPathExtensions Extensions for string for handling paths. ByteArrayExtensions Extensions for converting between strings an byte arrays."},{"location":"documentation/extending/issue-provider/helper/#file-linking","title":"File linking","text":"<p>Cake.Issues provides infrastructure to get links to files on source code hosts like GitHub or Azure Repos. This infrastructure can be used inside issue providers to generate file links which can be used inside the issue messages:</p> <pre><code>protected override IEnumerable&lt;IIssue&gt; InternalReadIssues()\n{\n    var result = new List&lt;IIssue&gt;();\n\n    var filePath = \"foo.cs\";\n    var line = 10;\n\n    var fileLink = \n        this.Settings.FileLinkSettings.GetFileLink(\n            IssueBuilder\n                .NewIssue(\"Issue for creating file link\", this)\n                .InFile(filePath, line)\n                .Create()\n        );\n\n    var htmlMessage =\n        $\"This is an issues in the file &lt;a href=\\\"{fileLink}\\\"&gt;{filePath}&lt;/a&gt;\";\n\n    var issue =\n        IssueBuilder\n            .NewIssue(\"MyMessage\", this)\n            .WithMessageInHtmlFormat(htmlMessage)\n            .InFile(filePath, line)\n            .Create();\n\n    return result;\n}\n</code></pre>"},{"location":"documentation/extending/issue-provider/overview/","title":"Overview","text":"<p>Issue providers need to implement the IIssueProvider interface.</p>"},{"location":"documentation/extending/issue-provider/overview/#base-classes","title":"Base classes","text":"<p>For simplifying implementation there exists base classes from which concrete implementation can be inherited.</p> Base Class Use case Tutorial BaseIssueProvider Base class for a simple issue provider implementation. Simple provider BaseConfigurableIssueProvider Base class for a issue provider with issue provider specific settings. Provider settings BaseMultiFormatIssueProvider Base class for issue providers supporting multiple log formats. Multiple log file formats support"},{"location":"documentation/extending/issue-provider/tutorials/logfile-format/","title":"Multiple log file formats","text":"<p>A single issue provider might support reading issues from multiple different log file formats. For these cases the <code>Cake.Issue</code> addin provides the BaseMultiFormatIssueProvider, BaseMultiFormatIssueProviderSettings and BaseLogFileFormat classes for simplifying implementation in the issue provider addin.</p>"},{"location":"documentation/extending/issue-provider/tutorials/logfile-format/#implementing-issue-provider","title":"Implementing issue provider","text":"<p>A concrete class inheriting from BaseMultiFormatIssueProvider needs to be implemented defining the concrete types.</p> <pre><code>/// &lt;summary&gt;\n/// My issue provider.\n/// &lt;/summary&gt;\npublic class MyIssuesProvider : BaseMultiFormatIssueProvider&lt;MyIssuesSettings, MyIssuesProvider&gt;\n{\n    /// &lt;summary&gt;\n    /// Initializes a new instance of the &lt;see cref=\"MyIssuesProvider\"/&gt; class.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"log\"&gt;The Cake log context.&lt;/param&gt;\n    /// &lt;param name=\"settings\"&gt;Settings for reading the log file.&lt;/param&gt;\n    public MyIssuesProvider(ICakeLog log, MyIssuesSettings settings)\n        : base(log, settings)\n    {\n    }\n\n    /// &lt;inheritdoc /&gt;\n    public override string ProviderName =&gt; \"MyIssuesProvider\";\n}\n</code></pre> <p>Also a concrete class inheriting from BaseMultiFormatIssueProviderSettings needs to be implemented defining the concrete types. Based on the capabilities of the log file formats the appropriate constructors for reading from the file system or memory can be made public:</p> <pre><code>/// &lt;summary&gt;\n/// Settings for my issue provider.\n/// &lt;/summary&gt;\npublic class MyIssuesSettings : BaseMultiFormatIssueProviderSettings&lt;MyIssuesProvider, MyIssuesSettings&gt;\n{\n    /// &lt;summary&gt;\n    /// Initializes a new instance of the &lt;see cref=\"MyIssuesSettings\"/&gt; class\n    /// for reading a log file on disk.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"logFilePath\"&gt;Path to the log file.\n    /// The log file needs to be in the format as defined by the &lt;paramref name=\"format\"/&gt; parameter.&lt;/param&gt;\n    /// &lt;param name=\"format\"&gt;Format of the provided log file.&lt;/param&gt;\n    public MyIssuesSettings(FilePath logFilePath, MyLogFileFormat format)\n        : base(logFilePath, format)\n    {\n    }\n\n    /// &lt;summary&gt;\n    /// Initializes a new instance of the &lt;see cref=\"MyIssuesSettings\"/&gt; class\n    /// for a log file content in memory.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"logFileContent\"&gt;Content of the log file.\n    /// The log file needs to be in the format as defined by the &lt;paramref name=\"format\"/&gt; parameter.&lt;/param&gt;\n    /// &lt;param name=\"format\"&gt;Format of the provided log file.&lt;/param&gt;\n    public MyIssuesSettings(byte[] logFileContent, MyLogFileFormat format)\n        : base(logFileContent, format)\n    {\n    }\n}\n</code></pre>"},{"location":"documentation/extending/issue-provider/tutorials/logfile-format/#implementing-log-file-format-infrastructure","title":"Implementing log file format infrastructure","text":"<p>An abstract class inheriting from BaseLogFileFormat needs to be implemented defining the concrete types for the issue provider:</p> <pre><code>/// &lt;summary&gt;\n/// Base class for all log file formats supported by my issue provider.\n/// &lt;/summary&gt;\npublic abstract class MyLogFileFormat : BaseLogFileFormat&lt;MyIssuesProvider, MyIssuesSettings&gt;\n{\n    /// &lt;summary&gt;\n    /// Initializes a new instance of the &lt;see cref=\"MyLogFileFormat\"/&gt; class.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"log\"&gt;The Cake log instance.&lt;/param&gt;\n    protected MyLogFileFormat(ICakeLog log)\n        : base(log)\n    {\n    }\n}\n</code></pre>"},{"location":"documentation/extending/issue-provider/tutorials/logfile-format/#implementing-log-file-format","title":"Implementing log file format","text":"<p>The different log file formats of an issue provider need to be inherited from the abstract log file format class:</p> <pre><code>/// &lt;summary&gt;\n/// Concrete log format.\n/// &lt;/summary&gt;\ninternal class MyConcreteLogFileFormat : MyLogFileFormat\n{\n    /// &lt;summary&gt;\n    /// Initializes a new instance of the &lt;see cref=\"MyConcreteLogFileFormat\"/&gt; class.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"log\"&gt;The Cake log instance.&lt;/param&gt;\n    public MyConcreteLogFileFormat(ICakeLog log)\n        : base(log)\n    {\n    }\n\n    /// &lt;inheritdoc/&gt;\n    public override IEnumerable&lt;IIssue&gt; ReadIssues(\n        MyIssuesProvider issueProvider,\n        RepositorySettings repositorySettings,\n        MyIssuesSettings issueProviderSettings)\n    {\n        issueProvider.NotNull(nameof(issueProvider));\n        repositorySettings.NotNull(nameof(repositorySettings));\n        issueProviderSettings.NotNull(nameof(issueProviderSettings));\n\n        var result = new List&lt;IIssue&gt;();\n\n        // Implement log file format logic here.\n        result.Add(\n            IssueBuilder\n                .NewIssue(\"Some message\", issueProvider)\n                .WithPriority(IssuePriority.Warning)\n                .OfRule(\"My rule\")\n                .Create());\n\n        return result;\n    }\n}\n</code></pre>"},{"location":"documentation/extending/issue-provider/tutorials/logfile-format/#aliases","title":"Aliases","text":"<p>For each concrete log file format a Cake property alias should be provided:</p> <pre><code>/// &lt;summary&gt;\n/// Gets an instance of the concrete log format.\n/// &lt;/summary&gt;\n/// &lt;param name=\"context\"&gt;The context.&lt;/param&gt;\n/// &lt;returns&gt;Instance of the concrete log format.&lt;/returns&gt;\n[CakePropertyAlias]\n[CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\npublic static MyLogFileFormat MyConcreteLogFileFormat(\n    this ICakeContext context)\n{\n    context.NotNull(nameof(context));\n\n    return new MyConcreteLogFileFormat(context.Log);\n}\n</code></pre> <p>Additionally an alias for reading issues with a specific format should be provided:</p> <pre><code>/// &lt;summary&gt;\n/// Gets an instance of a provider for issues using specified settings\n/// &lt;/summary&gt;\n/// &lt;param name=\"context\"&gt;The context.&lt;/param&gt;\n/// &lt;param name=\"settings\"&gt;Settings for reading the log.&lt;/param&gt;\n/// &lt;returns&gt;Instance of a provider for issues.&lt;/returns&gt;\n/// &lt;example&gt;\n/// &lt;para&gt;Read issues using my concrete log file format:&lt;/para&gt;\n/// &lt;code&gt;\n/// &lt;![CDATA[\n///     var settings =\n///         new MyIssuesSettings(\n///             @\"c:\\build\\issues.xml\",\n///             MyConcreteLogFileFormat);\n///\n///     var issues =\n///         ReadIssues(\n///             MyIssues(settings),\n///             @\"c:\\repo\");\n/// ]]&gt;\n/// &lt;/code&gt;\n/// &lt;/example&gt;\n[CakeMethodAlias]\n[CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\npublic static IIssueProvider MyIssues(\n    this ICakeContext context,\n    MyIssuesSettings settings)\n{\n    context.NotNull(nameof(context));\n    settings.NotNull(nameof(settings));\n\n    return new MyIssuesProvider(context.Log, settings);\n}\n</code></pre> <p>For convenience of the user and based on the capabilities of the issue provider additional aliases for reading from the file system or from memory can be added:</p> <pre><code>/// &lt;summary&gt;\n/// Gets an instance of my issues provider for reading a log file from disk.\n/// &lt;/summary&gt;\n/// &lt;param name=\"context\"&gt;The context.&lt;/param&gt;\n/// &lt;param name=\"logFilePath\"&gt;Path to the log file.\n/// The log file needs to be in the format as defined by the &lt;paramref name=\"format\"/&gt; parameter.&lt;/param&gt;\n/// &lt;param name=\"format\"&gt;Format of the provided log file.&lt;/param&gt;\n/// &lt;returns&gt;Instance of my issues provider.&lt;/returns&gt;\n/// &lt;example&gt;\n/// &lt;para&gt;Read issues using my issues provider:&lt;/para&gt;\n/// &lt;code&gt;\n/// &lt;![CDATA[\n///     var issues =\n///         ReadIssues(\n///             MyIssuesFromFilePath(\n///                 @\"c:\\build\\issues.log\",\n///                 MyConcreteLogFileFormat));\n/// ]]&gt;\n/// &lt;/code&gt;\n/// &lt;/example&gt;\n[CakeMethodAlias]\n[CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\npublic static IIssueProvider MyIssuesFromFilePath(\n    this ICakeContext context,\n    FilePath logFilePath,\n    MyLogFileFormat format)\n{\n    context.NotNull(nameof(context));\n    logFilePath.NotNull(nameof(logFilePath));\n    format.NotNull(nameof(format));\n\n    return context.MyIssues(new MyIssuesSettings(logFilePath, format));\n}\n\n/// &lt;summary&gt;\n/// Gets an instance of my issues provider for reading a log file from memory.\n/// &lt;/summary&gt;\n/// &lt;param name=\"context\"&gt;The context.&lt;/param&gt;\n/// &lt;param name=\"logFileContent\"&gt;Content of the log file.\n/// The log content needs to be in the format as defined by the &lt;paramref name=\"format\"/&gt; parameter.&lt;/param&gt;\n/// &lt;param name=\"format\"&gt;Format of the provided log content.&lt;/param&gt;\n/// &lt;returns&gt;Instance of my issues provider.&lt;/returns&gt;\n/// &lt;example&gt;\n/// &lt;para&gt;Read issues using my issues provider:&lt;/para&gt;\n/// &lt;code&gt;\n/// &lt;![CDATA[\n///     var issues =\n///         ReadIssues(\n///             MyIssuesFromContent(\n///                 logFileContent,\n///                 MyConcreteLogFileFormat));\n/// ]]&gt;\n/// &lt;/code&gt;\n/// &lt;/example&gt;\n[CakeMethodAlias]\n[CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\npublic static IIssueProvider MyIssuesFromContent(\n    this ICakeContext context,\n    string logFileContent,\n    MyLogFileFormat format)\n{\n    context.NotNull(nameof(context));\n    logFileContent.NotNullOrWhiteSpace(nameof(logFileContent));\n    format.NotNull(nameof(format));\n\n    return context.MyIssues(new MyIssuesSettings(logFileContent.ToByteArray(), format));\n}\n</code></pre> <p>Finally an additional property alias for returning the provider type name should be defined:</p> <pre><code>/// &lt;summary&gt;\n/// Gets the name of my issue provider.\n/// This name can be used to identify issues based on the &lt;see cref=\"IIssue.ProviderType\"/&gt; property.\n/// &lt;/summary&gt;\n/// &lt;param name=\"context\"&gt;The context.&lt;/param&gt;\n/// &lt;returns&gt;Name of my issue provider.&lt;/returns&gt;\n[CakePropertyAlias]\n[CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\npublic static string MyIssuesProviderTypeName(\n    this ICakeContext context)\n{\n    context.NotNull(nameof(context));\n\n    return typeof(MyIssuesProvider).FullName;\n}\n</code></pre>"},{"location":"documentation/extending/issue-provider/tutorials/rule-url-resolving/","title":"Rule URL resolving","text":"<p>For cases where additional logic is required to determine the URL for a rule, the <code>Cake.Issue</code> addin provides the BaseRuleDescription and BaseRuleUrlResolver classes for simplifying implementation of providing URLs linking to site providing information about issues.</p>"},{"location":"documentation/extending/issue-provider/tutorials/rule-url-resolving/#implementing-ruleurlresolver","title":"Implementing RuleUrlResolver","text":"<p>In the issue provider a concrete class inheriting from BaseRuleDescription should be implemented containing all properties required to determine the URL to a rule. The following class adds two properties <code>Category</code> and <code>RuleId</code> to the description:</p> <pre><code>/// &lt;summary&gt;\n/// Class describing rules for my issue provider.\n/// &lt;/summary&gt;\npublic class MyRuleDescription : BaseRuleDescription\n{\n    /// &lt;summary&gt;\n    /// Gets or sets the category of the rule.\n    /// &lt;/summary&gt;\n    public string Category { get; set; }\n\n    /// &lt;summary&gt;\n    /// Gets or sets the identifier of the rule.\n    /// &lt;/summary&gt;\n    public int RuleId { get; set; }\n}\n</code></pre> <p>Also a class inheriting from BaseRuleUrlResolver needs to be implemented containing an implementation of TryGetRuleDescription for parsing rule urls to the concrete BaseRuleDescription class.</p> <pre><code>/// &lt;summary&gt;\n/// Class for retrieving an URL linking to a site describing a rule.\n/// &lt;/summary&gt;\ninternal class MyRuleUrlResolver : BaseUrlResolver&lt;MyRuleDescription&gt;\n{\n        /// &lt;inheritdoc/&gt;\n        protected override bool TryGetRuleDescription(string rule, MyRuleDescription ruleDescription)\n        {\n            ruleDescription.RuleId = rule.Substring(3, rule.Length - 3);\n            ruleDescription.Category = rule.Substring(0, 3);\n\n            return true;\n        }\n    }\n</code></pre> <p>To use the URL resolver the ResolveRuleUrl method needs to be called:</p> <pre><code>var resolver = new MyRuleUrlResolver();\nvar url = resolver.ResolveRuleUrl(rule)\n</code></pre> <p>Afterwards different resolvers can be registered which return the actual URL based on the rule description:</p> <pre><code>/// &lt;summary&gt;\n/// Class for retrieving an URL linking to a site describing a rule.\n/// &lt;/summary&gt;\ninternal class MyRuleUrlResolver : BaseUrlResolver&lt;MyRuleDescription&gt;\n{\n        /// &lt;summary&gt;\n        /// Initializes a new instance of the &lt;see cref=\"MyRuleUrlResolver\"/&gt; class.\n        /// &lt;/summary&gt;\n        private MyRuleUrlResolver()\n        {\n            // Add resolver for different issue categories.\n            this.AddUrlResolver(x =&gt;\n                x.Category.ToUpperInvariant() == \"FOO\" ?\n                    new Uri(\"https://www.google.com/search?q=%22\" + x.Rule) :\n                    null);\n            this.AddUrlResolver(x =&gt;\n                x.Category.ToUpperInvariant() == \"BAR\" ?\n                    new Uri(\"https://www.bing.com/search?q=%22\" + x.Rule) :\n                    null);\n        }\n    }\n</code></pre>"},{"location":"documentation/extending/issue-provider/tutorials/rule-url-resolving/#support-custom-url-resolvers","title":"Support custom URL resolvers","text":"<p>The AddUrlResolver method can also be called from an Cake alias to allow users of the addin to register custom resolvers. For this the URL resolver class needs to be implemented as a singleton:</p> <pre><code>/// &lt;summary&gt;\n/// Class for retrieving an URL linking to a site describing a rule.\n/// &lt;/summary&gt;\ninternal class MyRuleUrlResolver : BaseUrlResolver&lt;MyRuleDescription&gt;\n{\n    private static readonly Lazy&lt;MyRuleUrlResolver&gt; InstanceValue =\n        new Lazy&lt;MyRuleUrlResolver&gt;(() =&gt; new MyRuleUrlResolver());\n\n    /// &lt;summary&gt;\n    /// Gets the instance of the rule resolver.\n    /// &lt;/summary&gt;\n    public static MyRuleUrlResolver Instance =&gt; InstanceValue.Value;\n}\n\n[CakeAliasCategory(IssuesAliasConstants.MainCakeAliasCategory)]\npublic static class MyIssueProviderAliases\n{\n    /// &lt;summary&gt;\n    /// Registers a new URL resolver with default priority of 0.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"context\"&gt;The context.&lt;/param&gt;\n    /// &lt;param name=\"resolver\"&gt;Resolver which returns an &lt;see cref=\"Uri\"/&gt; linking to a site\n    /// containing help for a specific &lt;see cref=\"MyRuleDescription\"/&gt;.&lt;/param&gt;\n    [CakeMethodAlias]\n    [CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\n    public static void MyIssueProviderAddRuleUrlResolver(\n        this ICakeContext context,\n        Func&lt;MyRuleDescription, Uri&gt; resolver)\n    {\n        context.NotNull(nameof(context));\n        resolver.NotNull(nameof(resolver));\n\n        MyRuleUrlResolver.Instance.AddUrlResolver(resolver);\n    }\n</code></pre>"},{"location":"documentation/extending/issue-provider/tutorials/settings/","title":"Provider settings","text":"<p>Often issue providers require specific settings. For these cases the <code>Cake.Issue</code> addin provides the BaseConfigurableIssueProvider and IssueProviderSettings classes for simplifying implementation in the issue provider addin.</p>"},{"location":"documentation/extending/issue-provider/tutorials/settings/#implementing-issue-provider","title":"Implementing issue provider","text":"<p>A concrete class inheriting from BaseConfigurableIssueProvider needs to be implemented defining the concrete settings class to use:</p> <pre><code>/// &lt;summary&gt;\n/// My issue provider.\n/// &lt;/summary&gt;\npublic class MyIssuesProvider : BaseConfigurableIssueProvider&lt;MyIssuesSettings&gt;\n{\n    /// &lt;summary&gt;\n    /// Initializes a new instance of the &lt;see cref=\"MyIssuesProvider\"/&gt; class.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"log\"&gt;The Cake log context.&lt;/param&gt;\n    /// &lt;param name=\"settings\"&gt;Settings for reading the log file.&lt;/param&gt;\n    public MyIssuesProvider(ICakeLog log, MyIssuesSettings settings)\n        : base(log, settings)\n    {\n    }\n\n    /// &lt;inheritdoc /&gt;\n    public override string ProviderName =&gt; \"MyIssuesProvider\";\n\n    /// &lt;inheritdoc /&gt;\n    protected override IEnumerable&lt;IIssue&gt; InternalReadIssues()\n    {\n        var result = new List&lt;IIssue&gt;();\n\n        // Implement issue provider logic here.\n        result.Add(\n            IssueBuilder\n                .NewIssue(\"Some message\", issueProvider)\n                .WithPriority(IssuePriority.Warning)\n                .OfRule(\"My rule\")\n                .Create());\n\n        return result;\n    }\n}\n</code></pre> <p>Also a concrete class inheriting from IssueProviderSettings needs to be implemented. Based on the capabilities of the issue provider the appropriate constructors for reading from the file system or memory can be made public:</p> <pre><code>/// &lt;summary&gt;\n/// Settings for my issue provider.\n/// &lt;/summary&gt;\npublic class MyIssuesSettings : IssueProviderSettings\n{\n    /// &lt;summary&gt;\n    /// Initializes a new instance of the &lt;see cref=\"MyIssuesSettings\"/&gt; class\n    /// for reading a log file on disk.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"logFilePath\"&gt;Path to the log file.&lt;/param&gt;\n    public MyIssuesSettings(FilePath logFilePath)\n        : base(logFilePath)\n    {\n    }\n\n    /// &lt;summary&gt;\n    /// Initializes a new instance of the &lt;see cref=\"MyIssuesSettings\"/&gt; class\n    /// for a log file content in memory.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"logFileContent\"&gt;Content of the log file.&lt;/param&gt;\n    public MyIssuesSettings(byte[] logFileContent)\n        : base(logFileContent)\n    {\n    }\n\n    // Add additional settings for the issue provider here.\n}\n</code></pre>"},{"location":"documentation/extending/issue-provider/tutorials/settings/#aliases","title":"Aliases","text":"<p>An alias for reading issues with the provider should be provided:</p> <pre><code>/// &lt;summary&gt;\n/// Gets an instance of my issues provider using specified settings.\n/// &lt;/summary&gt;\n/// &lt;param name=\"context\"&gt;The context.&lt;/param&gt;\n/// &lt;param name=\"settings\"&gt;Settings for reading the log.&lt;/param&gt;\n/// &lt;returns&gt;Instance of my issues provider.&lt;/returns&gt;\n/// &lt;example&gt;\n/// &lt;para&gt;Read issues using my issues provider:&lt;/para&gt;\n/// &lt;code&gt;\n/// &lt;![CDATA[\n///     var settings =\n///         new MyIssuesSettings(@\"c:\\build\\issues.log\");\n///\n///     var issues =\n///         ReadIssues(\n///             MyIssues(settings));\n/// ]]&gt;\n/// &lt;/code&gt;\n/// &lt;/example&gt;\n[CakeMethodAlias]\n[CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\npublic static IIssueProvider MyIssues(\n    this ICakeContext context,\n    MyIssuesSettings settings)\n{\n    context.NotNull(nameof(context));\n    settings.NotNull(nameof(settings));\n\n    return new MyIssuesProvider(context.Log, settings);\n}\n</code></pre> <p>For convenience of the user and based on the capabilities of the issue provider additional aliases for reading from the file system or from memory can be added:</p> <pre><code>/// &lt;summary&gt;\n/// Gets an instance of my issues provider for reading a log file from disk.\n/// &lt;/summary&gt;\n/// &lt;param name=\"context\"&gt;The context.&lt;/param&gt;\n/// &lt;param name=\"logFilePath\"&gt;Path to the log file.&lt;/param&gt;\n/// &lt;returns&gt;Instance of my issues provider.&lt;/returns&gt;\n/// &lt;example&gt;\n/// &lt;para&gt;Read issues using my issues provider:&lt;/para&gt;\n/// &lt;code&gt;\n/// &lt;![CDATA[\n///     var issues =\n///         ReadIssues(\n///             MyIssuesFromFilePath(@\"c:\\build\\issues.log\"));\n/// ]]&gt;\n/// &lt;/code&gt;\n/// &lt;/example&gt;\n[CakeMethodAlias]\n[CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\npublic static IIssueProvider MyIssuesFromFilePath(\n    this ICakeContext context,\n    FilePath logFilePath)\n{\n    context.NotNull(nameof(context));\n    logFilePath.NotNull(nameof(logFilePath));\n\n    return context.MyIssues(new MyIssuesSettings(logFilePath));\n}\n\n/// &lt;summary&gt;\n/// Gets an instance of my issues provider for reading a log file from memory.\n/// &lt;/summary&gt;\n/// &lt;param name=\"context\"&gt;The context.&lt;/param&gt;\n/// &lt;param name=\"logFileContent\"&gt;Content of the log file.&lt;/param&gt;\n/// &lt;returns&gt;Instance of my issues provider.&lt;/returns&gt;\n/// &lt;example&gt;\n/// &lt;para&gt;Read issues using my issues provider:&lt;/para&gt;\n/// &lt;code&gt;\n/// &lt;![CDATA[\n///     var issues =\n///         ReadIssues(\n///             MyIssuesFromContent(logFileContent));\n/// ]]&gt;\n/// &lt;/code&gt;\n/// &lt;/example&gt;\n[CakeMethodAlias]\n[CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\npublic static IIssueProvider MyIssuesFromContent(\n    this ICakeContext context,\n    string logFileContent)\n{\n    context.NotNull(nameof(context));\n    logFileContent.NotNullOrWhiteSpace(nameof(logFileContent));\n\n    return context.MyIssues(new MyIssuesSettings(logFileContent.ToByteArray()));\n}\n</code></pre> <p>Finally an additional property alias for returning the provider type name should be defined:</p> <pre><code>/// &lt;summary&gt;\n/// Gets the name of my issue provider.\n/// This name can be used to identify issues based on the &lt;see cref=\"IIssue.ProviderType\"/&gt; property.\n/// &lt;/summary&gt;\n/// &lt;param name=\"context\"&gt;The context.&lt;/param&gt;\n/// &lt;returns&gt;Name of my issue provider.&lt;/returns&gt;\n[CakePropertyAlias]\n[CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\npublic static string MyIssuesProviderTypeName(\n    this ICakeContext context)\n{\n    context.NotNull(nameof(context));\n\n    return typeof(MyIssuesProvider).FullName;\n}\n</code></pre>"},{"location":"documentation/extending/issue-provider/tutorials/simple/","title":"Simple issue provider","text":"<p>This tutorial explains how to implement a simple issue provider using the BaseIssueProvider class from the <code>Cake.Issue</code> addin.</p>"},{"location":"documentation/extending/issue-provider/tutorials/simple/#implementing-issue-provider","title":"Implementing issue provider","text":"<p>A concrete class inheriting from BaseIssueProvider needs to be implemented:</p> <pre><code>/// &lt;summary&gt;\n/// My issue provider.\n/// &lt;/summary&gt;\npublic class MyIssuesProvider : BaseIssueProvider\n{\n    /// &lt;summary&gt;\n    /// Initializes a new instance of the &lt;see cref=\"MyIssuesProvider\"/&gt; class.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"log\"&gt;The Cake log context.&lt;/param&gt;\n    public MyIssuesProvider(ICakeLog log)\n        : base(log, settings)\n    {\n    }\n\n    /// &lt;inheritdoc /&gt;\n    public override string ProviderName =&gt; \"MyIssuesProvider\";\n\n    /// &lt;inheritdoc /&gt;\n    protected override IEnumerable&lt;IIssue&gt; InternalReadIssues()\n    {\n        var result = new List&lt;IIssue&gt;();\n\n        // Implement issue provider logic here.\n        result.Add(\n            IssueBuilder\n                .NewIssue(\"Some message\", issueProvider)\n                .WithPriority(IssuePriority.Warning)\n                .OfRule(\"My rule\")\n                .Create());\n\n        return result;\n    }\n}\n</code></pre>"},{"location":"documentation/extending/issue-provider/tutorials/simple/#aliases","title":"Aliases","text":"<p>An alias for reading issues with the provider should be provided:</p> <pre><code>/// &lt;summary&gt;\n/// Gets an instance of my issues provider using specified settings.\n/// &lt;/summary&gt;\n/// &lt;param name=\"context\"&gt;The context.&lt;/param&gt;\n/// &lt;returns&gt;Instance of my issues provider.&lt;/returns&gt;\n/// &lt;example&gt;\n/// &lt;para&gt;Read issues using my issues provider:&lt;/para&gt;\n/// &lt;code&gt;\n/// &lt;![CDATA[\n///     var issues =\n///         ReadIssues(\n///             MyIssues());\n/// ]]&gt;\n/// &lt;/code&gt;\n/// &lt;/example&gt;\n[CakeMethodAlias]\n[CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\npublic static IIssueProvider MyIssues(\n    this ICakeContext context)\n{\n    context.NotNull(nameof(context));\n\n    return new MyIssuesProvider(context.Log);\n}\n</code></pre> <p>Additionally a property alias for returning the provider type name should be defined:</p> <pre><code>/// &lt;summary&gt;\n/// Gets the name of my issue provider.\n/// This name can be used to identify issues based on the &lt;see cref=\"IIssue.ProviderType\"/&gt; property.\n/// &lt;/summary&gt;\n/// &lt;param name=\"context\"&gt;The context.&lt;/param&gt;\n/// &lt;returns&gt;Name of my issue provider.&lt;/returns&gt;\n[CakePropertyAlias]\n[CakeAliasCategory(IssuesAliasConstants.IssueProviderCakeAliasCategory)]\npublic static string MyIssuesProviderTypeName(\n    this ICakeContext context)\n{\n    context.NotNull(nameof(context));\n\n    return typeof(MyIssuesProvider).FullName;\n}\n</code></pre>"},{"location":"documentation/extending/pull-request-system/categories/","title":"Alias categories","text":"<p>Pull request system aliases should use the IssuesAliasConstants.MainCakeAliasCategory and PullRequestsAliasConstants.PullRequestSystemCakeAliasCategory constants for defining their category:</p> <pre><code>[CakeAliasCategory(IssuesAliasConstants.MainCakeAliasCategory)]\npublic static class MyPullRequestSystemAliases\n{\n    [CakeMethodAlias]\n    [CakeAliasCategory(PullRequestsAliasConstants.PullRequestSystemCakeAliasCategory)]\n    public static IPullRequestSystem MyPullRequestSystem(\n        this ICakeContext context)\n    {\n    }\n}\n</code></pre>"},{"location":"documentation/extending/pull-request-system/overview/","title":"Overview","text":"<p>Pull Request Systems need to implement the IPullRequestSystem interface.</p>"},{"location":"documentation/extending/pull-request-system/overview/#baseclasses","title":"BaseClasses","text":"<p>For simplifying implementation there exists base classes from which concrete implementation can be inherited. BasePullRequestSystem is the main base class with the required functionality for a pull request system implementation. Additionally there exists several classes which can be implemented to support additional optional capabilities in a pull request system implementation.</p> Base Class Use case Tutorial BasePullRequestSystem Base class for all pull request system implementations. BaseCheckingCommitIdCapability Base class for capability to post issues only if pull request is for a specific commit. BaseDiscussionThreadsCapability Base class for capability to read, resolve and reopen discussion threads. BaseFilteringByModifiedFilesCapability Base class for capability to filter issues to only those affecting files modified in the pull request."},{"location":"documentation/extending/report-format/categories/","title":"Alias categories","text":"<p>Report format aliases should use the IssuesAliasConstants.MainCakeAliasCategory and ReportingAliasConstants.ReportingFormatCakeAliasCategory constants for defining their category:</p> <pre><code>[CakeAliasCategory(IssuesAliasConstants.MainCakeAliasCategory)]\npublic static class MyReportFormatAliases\n{\n    [CakeMethodAlias]\n    [CakeAliasCategory(ReportingAliasConstants.ReportingFormatCakeAliasCategory)]\n    public static IIssueReportFormat MyReportFormat(\n        this ICakeContext context)\n    {\n    }\n}\n</code></pre>"},{"location":"documentation/extending/report-format/overview/","title":"Overview","text":"<p>Report formats need to implement the IIssueReportFormat interface. For simplifying implementation there exists an abstract IssueReportFormat base class from which concrete implementation can be inherited.</p>"},{"location":"documentation/issue-providers/","title":"Issue Providers","text":"<p>Issue provider addins are responsible for providing the output of an analyzer or linter to the Cake Issues addin.</p> <ul> <li> DocFx \u2013 Issue provider for reading DocFx warnings</li> <li> ESLint \u2013 Issue provider for reading ESLint issues</li> <li> Git Repository \u2013 Issue provider for analyzing Git repositories</li> <li> Inspect Code \u2013 Issue provider for reading JetBrains Inspect Code  / ReSharper issues</li> <li> Markdownlint \u2013 Issue provider for reading issues from markdownlint</li> <li> MsBuild \u2013 Issue provider for reading MsBuild errors and warnings</li> <li> Sarif \u2013 Issue provider for reading SARIF reports</li> <li> Terraform \u2013 Issue provider for reading Terraform validation output</li> </ul> <p>Tip</p> <p>See How to implement issue providers for instruction on how to implement support for additional issue providers.</p>"},{"location":"documentation/issue-providers/docfx/","title":"DocFx","text":"<p>Support for reading warnings reported by DocFx is implemented in the Cake.Issues.DocFx addin.</p> <ul> <li> Features</li> <li> Examples</li> <li> API</li> </ul>"},{"location":"documentation/issue-providers/docfx/examples/","title":"Examples","text":"<p>The following example will call DocFx to generate the documentation and outputs the number of warnings.</p> <p>To call DocFx from a Cake script you can use the Cake.DocFx addin.</p> <pre><code>#addin \"Cake.DocFx\" // (1)!\n</code></pre> <ol> <li> <p>In production code this dependency should be pinned to a specific version to make sure builds are deterministic and     won't break due to updates.</p> <p>See Reproducible Builds for details.</p> </li> </ol> <p>To read issues from DocFx log files you need to import the core addin and the DocFx support:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.DocFx&amp;version=5.0.1\n</code></pre> <p>We need some global variables:</p> <pre><code>var logPath = @\"c:\\build\\docfx.log\";\nvar repoRootPath = @\"c:\\repo\";\nvar docRootPath = @\"docs\";\n</code></pre> <p>The following task will build the DocFx project and write a log file:</p> <pre><code>Task(\"Build-Documentation\").Does(() =&gt;\n{\n    // Run DocFx.\n    DocFxBuild(new DocFxBuildSettings()\n    {\n        LogPath = logPath\n    });\n});\n</code></pre> <p>Finally you can define a task where you call the core addin with the desired issue provider.</p> <pre><code>Task(\"Read-Issues\")\n    .IsDependentOn(\"Build-Documentation\")\n    .Does(() =&gt;\n    {\n        // Read Issues.\n        var issues =\n            ReadIssues(\n                DocFxIssuesFromFilePath(logPath, docRootPath),\n                repoRootPath);\n\n        Information(\"{0} issues are found.\", issues.Count());\n    });\n</code></pre>"},{"location":"documentation/issue-providers/docfx/features/","title":"Features","text":"<p>The Cake.Issues.DocFx addin provides the following features.</p> Tip: Running DocFx <p>DocFx can be run with Cake.DocFx addin.</p>"},{"location":"documentation/issue-providers/docfx/features/#basic-features","title":"Basic features","text":"<ul> <li> Reads warnings from DocFx log files.</li> </ul>"},{"location":"documentation/issue-providers/docfx/features/#supported-iissue-properties","title":"Supported IIssue properties","text":"<ul> <li> <code>IIssue.ProviderType</code></li> <li> <code>IIssue.ProviderName</code></li> <li> <code>IIssue.Run</code> (1)</li> <li> <code>IIssue.Identifier</code> (2)</li> <li> <code>IIssue.ProjectName</code></li> <li> <code>IIssue.ProjectFileRelativePath</code></li> <li> <code>IIssue.AffectedFileRelativePath</code></li> <li> <code>IIssue.Line</code></li> <li> <code>IIssue.EndLine</code></li> <li> <code>IIssue.Column</code></li> <li> <code>IIssue.EndColumn</code></li> <li> <code>IIssue.FileLink</code> (3)</li> <li> <code>IIssue.MessageText</code></li> <li> <code>IIssue.MessageHtml</code></li> <li> <code>IIssue.MessageMarkdown</code></li> <li> <code>IIssue.Priority</code></li> <li> <code>IIssue.PriorityName</code></li> <li> <code>IIssue.Rule</code></li> <li> <code>IIssue.RuleUrl</code></li> </ul> <ol> <li>Can be set while reading issues</li> <li>Set to <code>IIssue.MessageText</code></li> <li>Can be set while reading issues</li> </ol>"},{"location":"documentation/issue-providers/eslint/","title":"ESLint","text":"<p>Support for reading issues reported by ESLint is implemented in the Cake.Issues.EsLint addin.</p> <ul> <li> Features</li> <li> API</li> </ul>"},{"location":"documentation/issue-providers/eslint/features/","title":"Features","text":"<p>The Cake.Issues.EsLint addin provides the following features.</p> Tip: Running ESLint <p>ESLint can be run with Cake.ESLint addin.</p>"},{"location":"documentation/issue-providers/eslint/features/#basic-features","title":"Basic features","text":"<ul> <li> Reads issues reported by ESLint.</li> <li> Provides URLs for all issues.</li> <li> Support for custom URL resolving using the EsLintAddRuleUrlResolver   alias.</li> </ul>"},{"location":"documentation/issue-providers/eslint/features/#supported-log-file-formats","title":"Supported log file formats","text":"<ul> <li> EsLintJsonFormat     alias for reading issues from log files created by     ESLint json formatter.</li> </ul>"},{"location":"documentation/issue-providers/eslint/features/#supported-iissue-properties","title":"Supported IIssue properties","text":"<ul> <li> <code>IIssue.ProviderType</code></li> <li> <code>IIssue.ProviderName</code></li> <li> <code>IIssue.Run</code> (1)</li> <li> <code>IIssue.Identifier</code> (2)</li> <li> <code>IIssue.ProjectName</code></li> <li> <code>IIssue.ProjectFileRelativePath</code></li> <li> <code>IIssue.AffectedFileRelativePath</code></li> <li> <code>IIssue.Line</code></li> <li> <code>IIssue.EndLine</code></li> <li> <code>IIssue.Column</code></li> <li> <code>IIssue.EndColumn</code></li> <li> <code>IIssue.FileLink</code> (3)</li> <li> <code>IIssue.MessageText</code></li> <li> <code>IIssue.MessageHtml</code></li> <li> <code>IIssue.MessageMarkdown</code></li> <li> <code>IIssue.Priority</code></li> <li> <code>IIssue.PriorityName</code></li> <li> <code>IIssue.Rule</code></li> <li> <code>IIssue.RuleUrl</code> (4)</li> </ul> <ol> <li>Can be set while reading issues</li> <li>Set to <code>IIssue.MessageText</code></li> <li>Can be set while reading issues</li> <li>Support for custom rules can be added through a custom EsLintAddRuleUrlResolver</li> </ol>"},{"location":"documentation/issue-providers/gitrepository/","title":"Git Repository","text":"<p>Support for analyzing Git repositories is implemented in the Cake.Issues.GitRepository addin.</p> <ul> <li> Features</li> <li> Examples</li> <li> Rules</li> <li> API</li> </ul>"},{"location":"documentation/issue-providers/gitrepository/examples/","title":"Examples","text":"<p>The following example prints the number of binary files which are not tracked by Git Large File Storage in a repository.</p> <p>Warning</p> <p>Checking binary files requires Git and Git Large File Storage available on the local machine.</p> <p>To analyze Git repositories you need to import the core addin and the Git repository support:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.GitRepository&amp;version=5.0.1\n</code></pre> <p>We need some global variables:</p> <pre><code>var repoRootPath = @\"c:\\repo\";\n</code></pre> <p>The following task will analyze the repository:</p> <pre><code>Task(\"Analyze-Repo\")\n.Does(() =&gt;\n{\n    // Read Issues.\n    var settings =\n        new GitRepositoryIssuesSettings\n        {\n            CheckBinaryFilesTrackedByLfs = true\n        };\n\n    var issues =\n        ReadIssues(\n            GitRepositoryIssues(settings),\n            repoRootPath);\n\n    Information(\"{0} issues are found.\", issues.Count());\n});\n</code></pre>"},{"location":"documentation/issue-providers/gitrepository/features/","title":"Features","text":"<p>The Cake.Issues.GitRepository addin provides the following features.</p>"},{"location":"documentation/issue-providers/gitrepository/features/#basic-features","title":"Basic features","text":"<ul> <li> Checks path length of files. See FilePathTooLong for details.</li> <li> Checks if binary files are tracked by Git LFS. See BinaryFileNotTrackedByLfs for details.</li> </ul>"},{"location":"documentation/issue-providers/gitrepository/features/#supported-iissue-properties","title":"Supported IIssue properties","text":"<ul> <li> <code>IIssue.ProviderType</code></li> <li> <code>IIssue.ProviderName</code></li> <li> <code>IIssue.Run</code> (1)</li> <li> <code>IIssue.Identifier</code> (2)</li> <li> <code>IIssue.ProjectName</code></li> <li> <code>IIssue.ProjectFileRelativePath</code></li> <li> <code>IIssue.AffectedFileRelativePath</code></li> <li> <code>IIssue.Line</code></li> <li> <code>IIssue.EndLine</code></li> <li> <code>IIssue.Column</code></li> <li> <code>IIssue.EndColumn</code></li> <li> <code>IIssue.FileLink</code> (3)</li> <li> <code>IIssue.MessageText</code></li> <li> <code>IIssue.MessageHtml</code></li> <li> <code>IIssue.MessageMarkdown</code></li> <li> <code>IIssue.Priority</code></li> <li> <code>IIssue.PriorityName</code></li> <li> <code>IIssue.Rule</code></li> <li> <code>IIssue.RuleUrl</code></li> </ul> <ol> <li>Can be set while reading issues</li> <li>Set to <code>IIssue.MessageText</code></li> <li>Can be set while reading issues</li> </ol>"},{"location":"documentation/issue-providers/gitrepository/rules/","title":"Rules","text":"<ul> <li> BinaryFileNotTrackedByLfs</li> <li> FilePathTooLong</li> </ul>"},{"location":"documentation/issue-providers/gitrepository/rules/BinaryFileNotTrackedByLfs/","title":"BinaryFileNotTrackedByLfs","text":"Metadata Rule Id BinaryFileNotTrackedByLfs Priority Warning Available in 0.7.0 or higher"},{"location":"documentation/issue-providers/gitrepository/rules/BinaryFileNotTrackedByLfs/#cause","title":"Cause","text":"<p>A binary file in the repository is not tracked by Git Large File Storage.</p>"},{"location":"documentation/issue-providers/gitrepository/rules/BinaryFileNotTrackedByLfs/#rule-description","title":"Rule description","text":"<p>By its nature Git repositories cannot handle binary files well and will keep a full copy of that file in the repository every time a change to that file is committed. Considering that you always clone the full history of a repository, and not only the latest version, using binary files in a repository considerably slow downs the operation. Git Large File Storage replaces large files with small text pointers inside the Git repository, while storing the file contents on a remote server.</p> <p>Info</p> <p>The rule assumes that all files, which are not text files are binary files. This also includes for example empty files.</p>"},{"location":"documentation/issue-providers/gitrepository/rules/BinaryFileNotTrackedByLfs/#how-to-fix-violations","title":"How to fix violations","text":"<p>Track the file with Git Large File Storage.</p>"},{"location":"documentation/issue-providers/gitrepository/rules/FilePathTooLong/","title":"FilePathTooLong","text":"Metadata Rule Id FilePathTooLong Priority Warning Available in 0.7.3 or higher"},{"location":"documentation/issue-providers/gitrepository/rules/FilePathTooLong/#cause","title":"Cause","text":"<p>The path of a file in the repository is too long.</p>"},{"location":"documentation/issue-providers/gitrepository/rules/FilePathTooLong/#rule-description","title":"Rule description","text":"<p>Some operating systems and applications have a limitation of maximum path length which they can handle. To guarantee proper building this length should not be exceeded.</p>"},{"location":"documentation/issue-providers/gitrepository/rules/FilePathTooLong/#how-to-fix-violations","title":"How to fix violations","text":"<p>Rename the name of the file or shorten the path name.</p>"},{"location":"documentation/issue-providers/inspectcode/","title":"InspectCode","text":"<p>Support for reading issues reported by JetBrains Inspect Code is implemented in the Cake.Issues.InspectCode addin.</p> <ul> <li> Features</li> <li> Examples</li> <li> API</li> </ul>"},{"location":"documentation/issue-providers/inspectcode/examples/","title":"Examples","text":"<p>The following example will call JetBrains InspectCode and output the number of warnings.</p> <p>To call JetBrains InspectCode from a Cake script you need to add the <code>JetBrains.ReSharper.CommandLineTools</code>:</p> <pre><code>#tool \"nuget:?package=JetBrains.ReSharper.CommandLineTools\" // (1)!\n</code></pre> <ol> <li> <p>In production code this dependency should be pinned to a specific version to make sure builds are deterministic and     won't break due to updates.</p> <p>See Reproducible Builds for details.</p> </li> </ol> <p>To read issues from InspectCode log files you need to import the core addin and the InspectCode support:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.InspectCode&amp;version=5.0.1\n</code></pre> <p>We need some global variables:</p> <pre><code>var logPath = @\"c:\\build\\inspectcode.xml\";\nvar repoRootPath = @\"c:\\repo\";\n</code></pre> <p>The following task will run JetBrains InspectCode and write a log file:</p> <pre><code>Task(\"Analyze-Project\").Does(() =&gt;\n{\n    // Run InspectCode.\n    var settings = new InspectCodeSettings() {\n        OutputFile = logPath\n    };\n\n    InspectCode(repoRootPath.CombineWithFilePath(\"MySolution.sln\"), settings);\n});\n</code></pre> <p>Finally you can define a task where you call the core addin with the desired issue provider.</p> <pre><code>Task(\"Read-Issues\")\n    .IsDependentOn(\"Analyze-Project\")\n    .Does(() =&gt;\n    {\n        // Read Issues.\n        var issues =\n            ReadIssues(\n                InspectCodeIssuesFromFilePath(logPath),\n                repoRootPath);\n\n        Information(\"{0} issues are found.\", issues.Count());\n    });\n</code></pre>"},{"location":"documentation/issue-providers/inspectcode/features/","title":"Features","text":"<p>The Cake.Issues.InspectCode addin provides the following features.</p> Tip: Running InspectCode <p>JetBrains InsepectCode can be run using the InspectCode alias.</p>"},{"location":"documentation/issue-providers/inspectcode/features/#basic-features","title":"Basic features","text":"<ul> <li> Reads warnings from JetBrains InsepectCode log files.</li> <li> Provides URLs for issues containing a Wiki URL.</li> </ul>"},{"location":"documentation/issue-providers/inspectcode/features/#supported-iissue-properties","title":"Supported IIssue properties","text":"<ul> <li> <code>IIssue.ProviderType</code></li> <li> <code>IIssue.ProviderName</code></li> <li> <code>IIssue.Run</code> (1)</li> <li> <code>IIssue.Identifier</code> (2)</li> <li> <code>IIssue.ProjectName</code></li> <li> <code>IIssue.ProjectFileRelativePath</code></li> <li> <code>IIssue.AffectedFileRelativePath</code></li> <li> <code>IIssue.Line</code></li> <li> <code>IIssue.EndLine</code></li> <li> <code>IIssue.Column</code></li> <li> <code>IIssue.EndColumn</code></li> <li> <code>IIssue.FileLink</code> (3)</li> <li> <code>IIssue.MessageText</code></li> <li> <code>IIssue.MessageHtml</code></li> <li> <code>IIssue.MessageMarkdown</code></li> <li> <code>IIssue.Priority</code></li> <li> <code>IIssue.PriorityName</code></li> <li> <code>IIssue.Rule</code></li> <li> <code>IIssue.RuleUrl</code></li> </ul> <ol> <li>Can be set while reading issues</li> <li>Set to <code>IIssue.MessageText</code></li> <li>Can be set while reading issues</li> </ol>"},{"location":"documentation/issue-providers/markdownlint/","title":"markdownlint","text":"<p>Support for reading issues reported by markdownlint is implemented in the Cake.Issues.Markdownlint addin.</p> <ul> <li> Features</li> <li> Examples</li> <li> API</li> </ul>"},{"location":"documentation/issue-providers/markdownlint/examples/","title":"Examples","text":"<p>The following example will call markdownlint-cli to lint some markdown files and outputs the number of warnings.</p> <p>To call markdownlint-cli from a Cake script you can use the Cake.Markdownlint addin.</p> <pre><code>#addin \"Cake.Markdownlint\" // (1)!\n</code></pre> <ol> <li> <p>In production code this dependency should be pinned to a specific version to make sure builds are deterministic and     won't break due to updates.</p> <p>See Reproducible Builds for details.</p> </li> </ol> <p>To read issues from markdownlint-cli log files you need to import the core addin and the markdownlint support:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.Markdownlint&amp;version=5.0.1\n</code></pre> <p>We need some global variables:</p> <pre><code>var logPath = @\"c:\\build\\markdownlint.log\";\nvar repoRootFolder = MakeAbsolute(Directory(\"./\"));\n</code></pre> <p>The following task will run markdownlint-cli and write a log file:</p> <pre><code>Task(\"Lint-Documentation\").Does(() =&gt;\n{\n    // Run markdownlint-cli.\n    var settings =\n        MarkdownlintNodeJsRunnerSettings.ForDirectory(repoRootPath.Combine(\"docs\"));\n    settings.OutputFile = logPath;\n    settings.ThrowOnIssue = false;\n    RunMarkdownlintNodeJs(settings);\n});\n</code></pre> <p>Finally you can define a task where you call the core addin with the desired issue provider.</p> <pre><code>Task(\"Read-Issues\")\n    .IsDependentOn(\"Lint-Documentation\")\n    .Does(() =&gt;\n    {\n        // Read Issues.\n        var issues =\n            ReadIssues(\n                MarkdownlintIssuesFromFilePath(\n                    logPath,\n                    MarkdownlintCliLogFileFormat),\n                repoRootPath);\n\n        Information(\"{0} issues are found.\", issues.Count());\n    });\n</code></pre>"},{"location":"documentation/issue-providers/markdownlint/features/","title":"Features","text":"<p>The Cake.Issues.Markdownlint addin provides the following features.</p> Tip: Running markdownlint <p>markdownlint-cli can be run with the Cake.Markdownlint addin.</p>"},{"location":"documentation/issue-providers/markdownlint/features/#basic-features","title":"Basic features","text":"<ul> <li> Reads warnings from Markdownlint logfiles.</li> <li> Provides URLs for all issues.</li> <li> Support for custom URL resolving using the MarkdownlintAddRuleUrlResolver   alias (except for MarkdownlintCliJsonLogFileFormat).</li> </ul>"},{"location":"documentation/issue-providers/markdownlint/features/#supported-log-file-formats","title":"Supported log file formats","text":"<ul> <li> MarkdownlintV1LogFileFormat   alias for reading issues from Markdownlint   output generated with <code>options.resultVersion</code> set to 1.</li> <li> MarkdownlintCliLogFileFormat   alias for reading issues from markdownlint-cli log files.</li> <li> MarkdownlintCliJsonLogFileFormat   alias for reading issues from markdownlint-cli   log files created with the <code>--json</code> parameter.</li> </ul>"},{"location":"documentation/issue-providers/markdownlint/features/#supported-iissue-properties","title":"Supported IIssue properties","text":"<ul> <li> <code>IIssue.ProviderType</code></li> <li> <code>IIssue.ProviderName</code></li> <li> <code>IIssue.Run</code> (1)</li> <li> <code>IIssue.Identifier</code> (2)</li> <li> <code>IIssue.ProjectName</code></li> <li> <code>IIssue.ProjectFileRelativePath</code></li> <li> <code>IIssue.AffectedFileRelativePath</code></li> <li> <code>IIssue.Line</code></li> <li> <code>IIssue.EndLine</code></li> <li> <code>IIssue.Column</code> (3)</li> <li> <code>IIssue.EndColumn</code></li> <li> <code>IIssue.FileLink</code> (4)</li> <li> <code>IIssue.MessageText</code></li> <li> <code>IIssue.MessageHtml</code></li> <li> <code>IIssue.MessageMarkdown</code></li> <li> <code>IIssue.Priority</code> (5)</li> <li> <code>IIssue.PriorityName</code> (6)</li> <li> <code>IIssue.Rule</code></li> <li> <code>IIssue.RuleUrl</code> (7)</li> </ul> <ol> <li>Can be set while reading issues</li> <li>Set to <code>IIssue.MessageText</code></li> <li>Only for MarkdownlintCliLogFileFormat</li> <li>Can be set while reading issues</li> <li>Always IssuePriority.Warning</li> <li>Always <code>Warning</code></li> <li>Support for custom rules can be added through a custom MarkdownlintAddRuleUrlResolver except for MarkdownlintCliJsonLogFileFormat</li> </ol>"},{"location":"documentation/issue-providers/msbuild/","title":"MsBuild","text":"<p>Support for reading warnings reported by MsBuild is implemented in the Cake.Issues.MsBuild.</p> <ul> <li> Features</li> <li> Examples</li> <li> API</li> </ul>"},{"location":"documentation/issue-providers/msbuild/examples/","title":"Examples","text":"<p>The following example will call MsBuild to build the solution and outputs the number of warnings.</p> <p>To read issues from MsBuild log files you need to import the core addin and the MsBuild support:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.MsBuild&amp;version=5.0.1\n</code></pre> <p>We need some global variables:</p> <pre><code>var logPath = @\"c:\\build\\msbuild.log\";\nvar repoRootPath = @\"c:\\repo\";\n</code></pre> <p>The following task will build the solution and write a binary log file:</p> <pre><code>Task(\"Build-Solution\").Does(() =&gt;\n{\n    var msBuildSettings =\n        new MSBuildSettings().WithLogger(\n            \"BinaryLogger,\" + Context.Tools.Resolve(\"Cake.Issues.MsBuild*/**/StructuredLogger.dll\"),\n            \"\",\n            logPath)\n    DotNetBuild(\n        repoRootPath.CombineWithFilePath(\"MySolution.sln\"),\n        new DotNetBuildSettings{MSBuildSettings = msBuildSettings});\n});\n</code></pre> <p>Tip</p> <p>When using <code>MSBuildSettings.BinaryLogger</code> property to write a binary log, the version of the binary log format written depends on the version of the .NET SDK.</p> <p>To avoid the risk of breaking builds when the .NET SDK is updated and introduces a new binary log format, which is not supported in the used version of Cake.Issues.MsBuild, the binary logger instance shipped as part of Cake.Issues.MsBuild is used in the above example.</p> <p>Finally you can define a task where you call the core addin with the desired issue provider. The following example reads warnings and errors reported as MsBuild in a binary log:</p> <pre><code>Task(\"Read-Issues\")\n    .IsDependentOn(\"Build-Solution\")\n    .Does(() =&gt;\n    {\n        // Read Issues.\n        var issues =\n            ReadIssues(\n                MsBuildIssuesFromFilePath(\n                    logPath,\n                    MsBuildBinaryLogFileFormat),\n                repoRootFolder);\n\n        Information(\"{0} issues are found.\", issues.Count());\n    });\n</code></pre>"},{"location":"documentation/issue-providers/msbuild/features/","title":"Features","text":"<p>The Cake.Issues.MsBuild addin provides the following features.</p> Tip: Running MSBuild <p>MSBuild can be run using the DotNet aliases or MsBuild aliases.</p>"},{"location":"documentation/issue-providers/msbuild/features/#basic-features","title":"Basic features","text":"<ul> <li> Reads errors and warnings from MSBuild log files.</li> <li> Provides URLs for all code analysis (<code>CA*</code>) and StyleCop (<code>SA*</code>) warnings.</li> <li> Support for custom URL resolving using the MsBuildAddRuleUrlResolver alias.</li> </ul>"},{"location":"documentation/issue-providers/msbuild/features/#supported-log-file-formats","title":"Supported log file formats","text":"<ul> <li> MsBuildBinaryLogFileFormat alias for reading issues from binary log files.</li> <li> MsBuildXmlFileLoggerFormat alias for reading issues from log files created by MSBuild Extension Pack XmlFileLogger.</li> </ul>"},{"location":"documentation/issue-providers/msbuild/features/#supported-iissue-properties","title":"Supported IIssue properties","text":"<ul> <li> <code>IIssue.ProviderType</code></li> <li> <code>IIssue.ProviderName</code></li> <li> <code>IIssue.Run</code> (1)</li> <li> <code>IIssue.Identifier</code> (2)</li> <li> <code>IIssue.ProjectName</code></li> <li> <code>IIssue.ProjectFileRelativePath</code></li> <li> <code>IIssue.AffectedFileRelativePath</code></li> <li> <code>IIssue.Line</code></li> <li> <code>IIssue.EndLine</code></li> <li> <code>IIssue.Column</code> (3)</li> <li> <code>IIssue.EndColumn</code></li> <li> <code>IIssue.FileLink</code> (4)</li> <li> <code>IIssue.MessageText</code></li> <li> <code>IIssue.MessageHtml</code></li> <li> <code>IIssue.MessageMarkdown</code></li> <li> <code>IIssue.Priority</code></li> <li> <code>IIssue.PriorityName</code></li> <li> <code>IIssue.Rule</code></li> <li> <code>IIssue.RuleUrl</code> (5)</li> </ul> <ol> <li>Can be set while reading issues</li> <li>Set to <code>IIssue.MessageText</code></li> <li>Only for MsBuildXmlFileLoggerFormat</li> <li>Can be set while reading issues</li> <li>For code analysis (<code>CA*</code>) and StyleCop (<code>SA*</code>) warnings. Support for additional rules can be added through a custom MsBuildAddRuleUrlResolver</li> </ol>"},{"location":"documentation/issue-providers/sarif/","title":"Sarif","text":"<p>Support for reading issues in SARIF format is implemented in the Cake.Issues.Sarif addin.</p> <ul> <li> Features</li> <li> API</li> </ul>"},{"location":"documentation/issue-providers/sarif/features/","title":"Features","text":"<p>The Cake.Issues.Sarif addin provides the following features.</p>"},{"location":"documentation/issue-providers/sarif/features/#basic-features","title":"Basic features","text":"<ul> <li> Reads issues from files in SARIF format.</li> </ul>"},{"location":"documentation/issue-providers/sarif/features/#supported-iissue-properties","title":"Supported IIssue properties","text":"<ul> <li> <code>IIssue.ProviderType</code></li> <li> <code>IIssue.ProviderName</code></li> <li> <code>IIssue.Run</code> (1)</li> <li> <code>IIssue.Identifier</code> (2)</li> <li> <code>IIssue.ProjectName</code></li> <li> <code>IIssue.ProjectFileRelativePath</code></li> <li> <code>IIssue.AffectedFileRelativePath</code></li> <li> <code>IIssue.Line</code></li> <li> <code>IIssue.EndLine</code></li> <li> <code>IIssue.Column</code></li> <li> <code>IIssue.EndColumn</code></li> <li> <code>IIssue.FileLink</code> (3)</li> <li> <code>IIssue.MessageText</code></li> <li> <code>IIssue.MessageHtml</code></li> <li> <code>IIssue.MessageMarkdown</code></li> <li> <code>IIssue.Priority</code></li> <li> <code>IIssue.PriorityName</code></li> <li> <code>IIssue.Rule</code></li> <li> <code>IIssue.RuleUrl</code></li> </ul> <ol> <li>Can be set while reading issues</li> <li>Set to <code>IIssue.MessageText</code></li> <li>Can be set while reading issues</li> </ol>"},{"location":"documentation/issue-providers/terraform/","title":"Terraform","text":"<p>Support for reading issues reported by Terraform validate command is implemented in the Cake.Issues.Terraform addin.</p> <ul> <li> Features</li> <li> API</li> </ul>"},{"location":"documentation/issue-providers/terraform/features/","title":"Features","text":"<p>The Cake.Issues.Terraform addin provides the following features.</p> Tip: Running Terraform <p>Terraform can be run with Cake.Terraform addin.</p>"},{"location":"documentation/issue-providers/terraform/features/#basic-features","title":"Basic features","text":"<ul> <li> Reads warnings from Terraform validate command.</li> </ul>"},{"location":"documentation/issue-providers/terraform/features/#supported-iissue-properties","title":"Supported IIssue properties","text":"<ul> <li> <code>IIssue.ProviderType</code></li> <li> <code>IIssue.ProviderName</code></li> <li> <code>IIssue.Run</code> (1)</li> <li> <code>IIssue.Identifier</code> (2)</li> <li> <code>IIssue.ProjectName</code></li> <li> <code>IIssue.ProjectFileRelativePath</code></li> <li> <code>IIssue.AffectedFileRelativePath</code></li> <li> <code>IIssue.Line</code></li> <li> <code>IIssue.EndLine</code></li> <li> <code>IIssue.Column</code></li> <li> <code>IIssue.EndColumn</code></li> <li> <code>IIssue.FileLink</code> (3)</li> <li> <code>IIssue.MessageText</code></li> <li> <code>IIssue.MessageHtml</code></li> <li> <code>IIssue.MessageMarkdown</code></li> <li> <code>IIssue.Priority</code></li> <li> <code>IIssue.PriorityName</code></li> <li> <code>IIssue.Rule</code></li> <li> <code>IIssue.RuleUrl</code></li> </ul> <ol> <li>Can be set while reading issues</li> <li>Set to <code>IIssue.MessageText</code></li> <li>Can be set while reading issues</li> </ol>"},{"location":"documentation/pull-request-systems/","title":"Pull Request Systems","text":"<p>Pull request addins implement specific Pull Request Systems and allow the Cake Issues addin to write found issues as comments to pull requests.</p> <ul> <li> AppVeyor \u2013 Integration with AppVeyor builds</li> <li> Azure DevOps \u2013 Integration with Azure DevOps pull requests</li> <li> GitHub Actions \u2013 Integration with GitHub Actions</li> </ul> <p>Tip</p> <p>See How to implement pull request systems for instruction on how to implement support for additional pull request systems.</p>"},{"location":"documentation/pull-request-systems/appveyor/","title":"AppVeyor","text":"<p>Support for AppVeyor is implemented in the Cake.Issues.PullRequests.AppVeyor addin.</p> <ul> <li> Features</li> <li> Examples</li> <li> API</li> </ul>"},{"location":"documentation/pull-request-systems/appveyor/features/","title":"Features","text":"<p>The Cake.Issues.PullRequests.AppVeyor addin reports issues as messages to AppVeyor builds.</p> <p></p> <p>Info</p> <p>There's a demo repository available which you can fork and to which you can create pull requests to test the integration functionality.</p>"},{"location":"documentation/pull-request-systems/appveyor/features/#basic-features","title":"Basic features","text":"<ul> <li> Reports issues as messages to AppVeyor builds.</li> <li> Messages can be written as comment to GitHub pull requests.       See GitHub pull request integration for an example.</li> </ul>"},{"location":"documentation/pull-request-systems/appveyor/features/#supported-capabilities","title":"Supported capabilities","text":"<p>The Cake.Issues.PullRequests.AppVeyor addin doesn't support any additional capabilities.</p> <ul> <li> Checking commit ID</li> <li> Discussion threads</li> <li> Filtering by modified files</li> </ul>"},{"location":"documentation/pull-request-systems/appveyor/examples/","title":"Examples","text":"<ul> <li>Writting Messages To AppVeyor</li> <li>GitHub PullRequest Integration</li> </ul> <p>Info</p> <p>There's a demo repository available which you can fork and to which you can create pull requests to test the integration functionality.</p>"},{"location":"documentation/pull-request-systems/appveyor/examples/github-pullrequest-integration/","title":"GitHub pull request integration","text":"<p>This example shows how to write AppVeyor messages created by Cake.Issues to GitHub pull requests.</p> <p>Issues reported as messages to AppVeyor builds can be written to a GitHub pull request using GitHub Pull Request Notification in your <code>appveyor.yml</code> file.</p> <p>The following example will write a comment to the GitHub pull request containing all issues which were posted as message to the AppVeyor build:</p> <pre><code>notifications:\n- provider: GitHubPullRequest\n  template: \"{{#passed}}:white_check_mark:{{/passed}}{{#failed}}:x:{{/failed}} [Build {{&amp;projectName}} {{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}} by @{{&amp;commitAuthorUsername}})&lt;p&gt;Build messages:&lt;/p&gt;&lt;ul&gt;{{#jobs}}{{#messages}}&lt;li&gt;{{message}}&lt;br/&gt;{{details}}&lt;/li&gt;{{/messages}}{{/jobs}}&lt;/ul&gt;\"\n</code></pre> <p>The output will look similar to this:</p> <p></p>"},{"location":"documentation/pull-request-systems/appveyor/examples/write-messages/","title":"Writing message to AppVeyor","text":"<p>This example shows how to report issues as messages to an AppVeyor build.</p> <p>To report issues as messages to an AppVeyor build you need to import the core addin, the core pull request addin, the AppVeyor support and one or more issue providers, in this example for JetBrains InspectCode:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.InspectCode&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests.AppVeyor&amp;version=5.0.1\n</code></pre> <p>In the following task we'll first determine the remote repository URL and source branch of the pull request and with this information call the AppVeyorBuilds alias:</p> <pre><code>Task(\"ReportIssuesToAppVeyor\").Does(() =&gt;\n{\n    var repoRootFolder = MakeAbsolute(Directory(\"./\"));\n\n    ReportIssuesToPullRequest(\n        InspectCodeIssuesFromFilePath(\n            @\"C:\\build\\inspectcode.log\"),\n        AppVeyorBuilds(),\n        repoRootFolder);\n});\n</code></pre> <p>The output will look similar to this:</p> <p></p>"},{"location":"documentation/pull-request-systems/azure-devops/","title":"Azure DevOps","text":"<p>Support for Azure DevOps is implemented in the Cake.Issues.PullRequests.AzureDevOps addin.</p> <ul> <li> Features</li> <li> Setup</li> <li> Examples</li> <li> API</li> </ul>"},{"location":"documentation/pull-request-systems/azure-devops/features/","title":"Features","text":"<p>The Cake.Issues.PullRequests.AzureDevOps addin provides the following features.</p> <p>Info</p> <p>There's a demo repository available which you can fork and to which you can create pull requests to test the integration functionality.</p>"},{"location":"documentation/pull-request-systems/azure-devops/features/#basic-features","title":"Basic features","text":"<ul> <li> Writes issues as comments to Azure DevOps pull requests.</li> <li> Identification of pull requests through source branch or pull request ID.</li> <li> Comments written by the addin will be rendered with a specific icon corresponding to the state of the issue.</li> <li> Adds rule number and, if provided by the issue provider, link to the rule description to the comment.</li> <li> Support for issues messages formatted in Markdown format.</li> </ul>"},{"location":"documentation/pull-request-systems/azure-devops/features/#supported-capabilities","title":"Supported capabilities","text":"<p>The Cake.Issues.PullRequests.AzureDevOps addin supports the following capabilities.</p> <ul> <li> Checking commit ID</li> <li> Discussion threads</li> <li> Filtering by modified files</li> </ul>"},{"location":"documentation/pull-request-systems/azure-devops/features/#supported-authentication-methods","title":"Supported authentication methods","text":"Azure DevOps Server Azure DevOps Service Authentication method NTLM Basic authentication Personal access token OAuth Azure Active Directory <p>For detailed instructions how to connect using the different methods see Setup instructions.</p> <p></p>"},{"location":"documentation/pull-request-systems/azure-devops/setup/","title":"Setup","text":"<p>This page describes the different ways how the Cake.Issues.PullRequests.AzureDevOps addin can be setup.</p>"},{"location":"documentation/pull-request-systems/azure-devops/setup/#ntlm-authentication","title":"NTLM authentication","text":"<p>Info</p> <p>NTLM authentication is only available for on-premise Azure DevOps Server.</p> <p>To authenticate with NTLM you can use the AzureDevOpsAuthenticationNtlm alias from the Cake.AzureDevOps addin.</p> <p>The user needs to have <code>Contribute to pull requests</code> permission for the specific repository to allow Cake.Issues.PullRequests.AzureDevOps addin to post issues as comments to pull requests.</p>"},{"location":"documentation/pull-request-systems/azure-devops/setup/#basic-authentication","title":"Basic authentication","text":"<p>Info</p> <p>Basic authentication is only available for on-premise Azure DevOps Server.</p> <p>To authenticate with basic authentication you can use the AzureDevOpsAuthenticationBasic alias from the Cake.AzureDevOps addin and need to Configure Azure DevOps Server to use Basic Authentication.</p> <p>The user needs to have <code>Contribute to pull requests</code> permission for the specific repository to allow Cake.Issues.PullRequests.AzureDevOps addin to post issues as comments to pull requests.</p>"},{"location":"documentation/pull-request-systems/azure-devops/setup/#personal-access-token","title":"Personal access token","text":"<p>To authenticate with an personal access token you can use the AzureDevOpsAuthenticationPersonalAccessToken alias from the Cake.AzureDevOps addin.</p> <p>If you want to use the Cake.Issues.PullRequests.AzureDevOps addin with an personal access token see Authenticate access with personal access tokens for Azure DevOps for instructions how to create a personal access token.</p> <p>The access token needs to have the scope <code>Code (read and write)</code> set and the user needs to have <code>Contribute to pull requests</code> permission for the specific repository to allow Cake.Issues.PullRequests.AzureDevOps addin to post issues as comments to pull requests.</p>"},{"location":"documentation/pull-request-systems/azure-devops/setup/#oauth-authentication-from-azure-pipelines","title":"OAuth authentication from Azure Pipelines","text":"<p>Info</p> <p>OAuth authentication is only available for Azure DevOps Service.</p> <p>If you want to use the Cake.Issues.PullRequests.AzureDevOps addin from an Azure Pipelines you can authenticate using the OAuth token provided to the build. For this you need to enable the Allow scripts to access the OAuth token option on the build definition.</p> <p>To authenticate you can use the AzureDevOpsAuthenticationOAuth alias from the Cake.AzureDevOps addin.</p> <p>The user under which the build runs, named <code>&lt;projectName&gt; Build Service (&lt;organizationName&gt;)</code> (e.g. <code>Cake.Issues-Demo Build Service (cake-contrib)</code>), needs to have <code>Contribute to pull requests</code> permission for the specific repository to allow Cake.Issues.PullRequests.AzureDevOps addin to post issues as comments to pull requests.</p>"},{"location":"documentation/pull-request-systems/azure-devops/setup/#azure-active-directory","title":"Azure Active Directory","text":"<p>Info</p> <p>OAuth authentication is only available for Azure DevOps Service.</p> <p>To authenticate with Azure Active Directory you can use the AzureDevOpsAuthenticationAzureActiveDirectory alias from the Cake.AzureDevOps addin.</p> <p>The user needs to have <code>Contribute to pull requests</code> permission for the specific repository to allow Cake.Issues.PullRequests.AzureDevOps addin to post issues as comments to pull requests.</p>"},{"location":"documentation/pull-request-systems/azure-devops/examples/","title":"Examples","text":"<ul> <li>Using With Pull Request ID</li> <li>Using With Repository Remote URL And Source Branch Name</li> <li>Using With Azure Pipelines</li> </ul> <p>Info</p> <p>There's a demo repository available which you can fork and to which you can create pull requests to test the integration functionality.</p>"},{"location":"documentation/pull-request-systems/azure-devops/examples/azure-pipelines/","title":"Using with Azure Pipelines","text":"<p>This example shows how to write issues as comments to an Azure DevOps pull request from an Azure Pipelines build.</p> <p>To write issues as comments to Azure DevOps pull requests you need to import the core addin, the core pull request addin, the Azure DevOps support including the Cake.AzureDevOps addin, and one or more issue providers, in this example for JetBrains InspectCode:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.InspectCode&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests.AzureDevOps&amp;version=5.0.1\n#addin \"Cake.AzureDevOps\" // (1)!\n</code></pre> <ol> <li> <p>In production code this dependency should be pinned to a specific version to make sure builds are deterministic and     won't break due to updates.</p> <p>See Reproducible Builds for details.</p> </li> </ol> <p>The following task will call the AzureDevOpsPullRequests alias to connect to the pull request using the environment variables provided by Azure Pipelines.</p> <pre><code>Task(\"ReportIssuesToPullRequest\").Does(() =&gt;\n{\n    ReportIssuesToPullRequest(\n        InspectCodeIssuesFromFilePath(\n            @\"C:\\build\\inspectcode.log\"),\n        AzureDevOpsPullRequests(),\n        repoRootFolder);\n});\n</code></pre> <p>Info</p> <p>Please note that you'll need to setup your Azure Pipelines build to Allow scripts to access the OAuth token and need to setup proper permissions.</p> <p>See OAuth authentication from Azure Pipelines for details.</p>"},{"location":"documentation/pull-request-systems/azure-devops/examples/pullrequest-id/","title":"Using with pull request id","text":"<p>This example shows how to write issues as comments to an Azure DevOps pull request while using pull request id.</p> <p>To determine the remote repository URL you need the Cake.Git addin:</p> <pre><code>#addin \"Cake.Git\" // (1)!\n</code></pre> <ol> <li> <p>In production code this dependency should be pinned to a specific version to make sure builds are deterministic and     won't break due to updates.</p> <p>See Reproducible Builds for details.</p> </li> </ol> <p>To write issues as comments to Azure DevOps pull requests you need to import the core addin, the core pull request addin, the Azure DevOps support including the Cake.AzureDevOps addin, and one or more issue providers, in this example for JetBrains InspectCode:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.InspectCode&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests.AzureDevOps&amp;version=5.0.1\n#addin \"Cake.AzureDevOps\" // (1)!\n</code></pre> <ol> <li> <p>In production code this dependency should be pinned to a specific version to make sure builds are deterministic and     won't break due to updates.</p> <p>See Reproducible Builds for details.</p> </li> </ol> <p>In the following task we'll first determine the remote repository URL and with this information call the AzureDevOpsPullRequests alias, which will authenticate through NTLM to an on-premise Azure DevOps Server instance:</p> <pre><code>Task(\"ReportIssuesToPullRequest\").Does(() =&gt;\n{\n    var repoRootFolder = MakeAbsolute(Directory(\"./\"));\n    var repoRemoteUrl = new Uri(currentBranch.Remotes.Single(x =&gt; x.Name == \"origin\").Url);\n    var pullRequestId = 123;\n\n    ReportIssuesToPullRequest(\n        InspectCodeIssuesFromFilePath(\n            @\"C:\\build\\inspectcode.log\"),\n        AzureDevOpsPullRequests(\n            repoRemoteUrl,\n            pullRequestId,\n            AzureDevOpsAuthenticationNtlm()),\n        repoRootFolder);\n});\n</code></pre>"},{"location":"documentation/pull-request-systems/azure-devops/examples/repository-information/","title":"Using with repository remote url and source branch name","text":"<p>This example shows how to write issues as comments to an Azure DevOps pull request while using repository information.</p> <p>To determine the remote repository URL and source branch of the pull request you need the Cake.Git addin:</p> <pre><code>#addin \"Cake.Git\" // (1)!\n</code></pre> <ol> <li> <p>In production code this dependency should be pinned to a specific version to make sure builds are deterministic and     won't break due to updates.</p> <p>See Reproducible Builds for details.</p> </li> </ol> <p>To write issues as comments to Azure DevOps pull requests you need to import the core addin, the core pull request addin, the Azure DevOps support including the Cake.AzureDevOps addin, and one or more issue providers, in this example for JetBrains InspectCode:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.InspectCode&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests.AzureDevOps&amp;version=5.0.1\n#addin \"Cake.AzureDevOps\" // (1)!\n</code></pre> <ol> <li> <p>In production code this dependency should be pinned to a specific version to make sure builds are deterministic and     won't break due to updates.</p> <p>See Reproducible Builds for details.</p> </li> </ol> <p>In the following task we'll first determine the remote repository URL and source branch of the pull request and with this information call the AzureDevOpsPullRequests alias, which will authenticate through NTLM to an on-premise Azure DevOps Server instance:</p> <pre><code>Task(\"ReportIssuesToPullRequest\").Does(() =&gt;\n{\n    var repoRootFolder = MakeAbsolute(Directory(\"./\"));\n    var currentBranch = GitBranchCurrent(repoRootFolder);\n    var repoRemoteUrl = new Uri(currentBranch.Remotes.Single(x =&gt; x.Name == \"origin\").Url);\n    var sourceBranchName = currentBranch.CanonicalName;\n\n    ReportIssuesToPullRequest(\n        InspectCodeIssuesFromFilePath(\n            @\"C:\\build\\inspectcode.log\"),\n        AzureDevOpsPullRequests(\n            repoRemoteUrl,\n            sourceBranchName,\n            AzureDevOpsAuthenticationNtlm()),\n        repoRootFolder);\n});\n</code></pre>"},{"location":"documentation/pull-request-systems/github-actions/","title":"GitHub Actions","text":"<p>Support for GitHub Actions is implemented in the Cake.Issues.PullRequests.GitHubActions addin.</p> <ul> <li> Features</li> <li> Examples</li> <li> API</li> </ul>"},{"location":"documentation/pull-request-systems/github-actions/features/","title":"Features","text":"<p>The Cake.Issues.PullRequests.GitHubActions addin creates annotations from issues when running on GitHub actions.</p> <p></p>"},{"location":"documentation/pull-request-systems/github-actions/features/#basic-features","title":"Basic features","text":"<ul> <li> Reports issues as annotations to GitHub Actions builds.</li> <li> Group issues in log output by provider and run information.</li> </ul>"},{"location":"documentation/pull-request-systems/github-actions/features/#supported-capabilities","title":"Supported capabilities","text":"<p>The Cake.Issues.PullRequests.GitHubActions addin doesn't support any additional capabilities.</p> <ul> <li> Checking commit ID</li> <li> Discussion threads</li> <li> Filtering by modified files</li> </ul>"},{"location":"documentation/pull-request-systems/github-actions/examples/","title":"Examples","text":"<ul> <li>Create Annotations In GitHub Actions</li> </ul>"},{"location":"documentation/pull-request-systems/github-actions/examples/write-annotations/","title":"Create annotations in GitHub Actions","text":"<p>This example shows how to report issues as annotations to a GitHub Actions build.</p> <p>To report issues as annotations to a GitHub Actions build you need to import the core addin, the core pull request addin, the GitHub Actions support and one or more issue providers, in this example for JetBrains InspectCode:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.InspectCode&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests.GitHubActions&amp;version=5.0.1\n</code></pre> <p>In the following task we'll first determine the remote repository URL and source branch of the pull request and with this information call the GitHubActionsBuilds alias:</p> <pre><code>Task(\"ReportIssuesToGitHubActions\").Does(() =&gt;\n{\n    var repoRootFolder = MakeAbsolute(Directory(\"./\"));\n\n    ReportIssuesToPullRequest(\n        InspectCodeIssuesFromFilePath(\n            @\"C:\\build\\inspectcode.log\"),\n        GitHubActionsBuilds(),\n        repoRootFolder);\n});\n</code></pre> <p>The output will show up in the build log grouped by issue provider / run:</p> <p></p> <p>Additionally the issues show up as annotations:</p> <p></p> <p>Having issues available as annotations also means that they will be shown in pull requests on the related file / position:</p> <p></p>"},{"location":"documentation/recipe/","title":"Overview","text":"<p>Cake.Issues recipes provide build scripts, delivered as a NuGet package, which can be used inside your projects Cake build to add issue management.</p> <p>Integration of code analyzing and linting tools into a build pipeline often looks the similar, and differentiates mainly on the used linters, build and pull request systems. Cake.Issues recipes contain code to do all the parsing, integration with build and pull request systems for you, using the individual Cake.Issues addins. They support different linters based on the linting log files you pass it and integrate automatically with different build and pull request systems.</p> <p>There are two flavors available:</p> <ul> <li> <p> Cake.Issues.Recipe</p> <p>For Cake .NET Tool</p> </li> <li> <p> Cake.Frosting.Issues.Recipe</p> <p>For Cake Frosting</p> </li> </ul>"},{"location":"documentation/recipe/#supported-tools","title":"Supported tools","text":"<p>See supported tools for a list of supported linters, build servers and pull request systems.</p>"},{"location":"documentation/recipe/#bundled-addins","title":"Bundled addins","text":"<p>Cake.Issues recipes will add the following addins to your build:</p> Cake.Issues.RecipeCake.Frosting.Issues.Recipe Addin Version Remarks Cake.Git 5.0.1 Only used if <code>RepositoryInfoProvider</code> type is set to <code>RepositoryInfoProviderType.CakeGit</code>. See Git repository information configuration for details. Cake.Issues 5.0.1 Cake.Issues.MsBuild 5.0.1 Cake.Issues.InspectCode 5.0.1 Cake.Issues.Markdownlint 5.0.1 Cake.Issues.EsLint 5.0.1 Cake.Issues.Sarif 5.0.1 Cake.Issues.Reporting 5.0.1 Cake.Issues.Reporting.Generic 5.0.1 Cake.Issues.Reporting.Sarif 5.0.1 Cake.Issues.PullRequests 5.0.1 Cake.Issues.PullRequests.AppVeyor 5.0.1 Cake.Issues.PullRequests.AzureDevOps 5.0.1 Cake.Issues.PullRequests.GitHubActions 5.0.1 Cake.AzureDevOps 5.0.0 Addin Version Remarks Cake.Frosting.Git 5.0.1 Only used if <code>RepositoryInfoProvider</code> type is set to <code>RepositoryInfoProviderType.CakeGit</code>. See Git repository information configuration for details. Cake.Issues 5.0.1 Cake.Frosting.Issues.MsBuild 5.0.1 Cake.Frosting.Issues.InspectCode 5.0.1 Cake.Frosting.Issues.Markdownlint 5.0.1 Cake.Frosting.Issues.EsLint 5.0.1 Cake.Frosting.Issues.Sarif 5.0.1 Cake.Frosting.Issues.Reporting 5.0.1 Cake.Frosting.Issues.Reporting.Generic 5.0.1 Cake.Frosting.Issues.Reporting.Sarif 5.0.1 Cake.Frosting.Issues.PullRequests 5.0.1 Cake.Frosting.Issues.PullRequests.AppVeyor 5.0.1 Cake.Frosting.Issues.PullRequests.AzureDevOps 5.0.1 Cake.Frosting.Issues.PullRequests.GitHubActions 5.0.1 Cake.AzureDevOps 5.0.0"},{"location":"documentation/recipe/configuration/","title":"Configuration","text":"<p>This page lists configuration properties which can be used to define the functionality and behavior of Cake.Issues recipes.</p>"},{"location":"documentation/recipe/configuration/#git-repository-information","title":"Git repository information","text":"<p>Cake.Issues recipes require some information about current Git repository.</p> <p>To define the Git provider in <code>Cake.Issues.Recipe</code> set the global variable <code>RepositoryInfoProvider</code>. To define the Git provider in <code>Cake.Frosting.Issues.Recipe</code> pass the value to the constructor of <code>IssueContext</code>.</p> <p>The following providers are supported:</p> Provider Description <code>RepositoryInfoProviderType.CakeGit</code> Read repository information using Cake.Git addin. Requires system to be compatible with Cake.Git addin. <code>RepositoryInfoProviderType.Cli</code> Read repository information using Git CLI. Requires Git CLI to be available in path. <p>By default Cake.Git addin will be used.</p>"},{"location":"documentation/recipe/configuration/#general","title":"General","text":"Cake.Issues.RecipeCake.Frosting.Issues.Recipe IssuesParameters Property Default Value Description <code>OutputDirectory</code> <code>BuildArtifacts</code> Path to the output directory. A relative path will be relative to the current working directory. <code>BuildIdentifier</code> <code>string.Empty</code> Identifier for the build run. If set this identifier will be used to identify to artifacts provided by the build if building on multiple configurations. IssuesContext.Parameters Property Default Value Description <code>OutputDirectory</code> <code>BuildArtifacts</code> Path to the output directory. A relative path will be relative to the current working directory. <code>BuildIdentifier</code> <code>string.Empty</code> Identifier for the build run. If set this identifier will be used to identify to artifacts provided by the build if building on multiple configurations."},{"location":"documentation/recipe/configuration/#input-files","title":"Input files","text":"Cake.Issues.RecipeCake.Frosting.Issues.Recipe IssuesParameters.InputFiles Methods Description <code>AddMsBuildXmlFileLoggerLogFilePath()</code> Adds a path to a MSBuild log file created by XmlFileLogger. <code>AddMsBuildXmlFileLoggerLogFileContent()</code> Adds content of a MSBuild log file created by XmlFileLogger. <code>AddMsBuildBinaryLogFilePath()</code> Adds a path to a MSBuild binary log file. <code>AddMsBuildBinaryLogFileContent()</code> Adds content of a MSBuild binary log file. <code>AddInspectCodeLogFilePath()</code> Adds a path to a JetBrains InspectCode log file. <code>AddInspectCodeLogFileContent()</code> Adds content of a JetBrains InspectCode log file. <code>AddMarkdownlintCliLogFilePath()</code> Adds a path to a markdownlint-cli log file. <code>AddMarkdownlintCliLogFileContent()</code> Adds content of a markdownlint-cli log file. <code>AddMarkdownlintCliJsonLogFilePath()</code> Adds a path to a markdownlint-cli log file writting with <code>--json</code>. <code>AddMarkdownlintCliJsonLogFileContent()</code> Adds content of a markdownlint-cli log file writting with <code>--json</code>. <code>AddMarkdownlintV1LogFilePath()</code> Adds a path to a markdownlint log file in version 1. <code>AddMarkdownlintV1LogFileContent()</code> Adds content of a markdownlint log file in version 1. <code>AddEsLintJsonLogFilePath()</code> Adds a path to a ESLint log file generated by the ESLint json formatter. <code>AddEsLintJsonLogFileContent()</code> Adds content of a ESLint log file generated by the ESLint json formatter. <code>AddSarifLogFilePath()</code> Adds a path to a SARIF log file. <code>AddSarifLogFileContent()</code> Adds content of a SARIF log file. IssuesContext.Parameters.InputFiles Methods Description <code>AddMsBuildXmlFileLoggerLogFilePath()</code> Adds a path to a MSBuild log file created by XmlFileLogger. <code>AddMsBuildXmlFileLoggerLogFileContent()</code> Adds content of a MSBuild log file created by XmlFileLogger. <code>AddMsBuildBinaryLogFilePath()</code> Adds a path to a MSBuild binary log file. <code>AddMsBuildBinaryLogFileContent()</code> Adds content of a MSBuild binary log file. <code>AddInspectCodeLogFilePath()</code> Adds a path to a JetBrains InspectCode log file. <code>AddInspectCodeLogFileContent()</code> Adds content of a JetBrains InspectCode log file. <code>AddMarkdownlintCliLogFilePath()</code> Adds a path to a markdownlint-cli log file. <code>AddMarkdownlintCliLogFileContent()</code> Adds content of a markdownlint-cli log file. <code>AddMarkdownlintCliJsonLogFilePath()</code> Adds a path to a markdownlint-cli log file writting with <code>--json</code>. <code>AddMarkdownlintCliJsonLogFileContent()</code> Adds content of a markdownlint-cli log file writting with <code>--json</code>. <code>AddMarkdownlintV1LogFilePath()</code> Adds a path to a markdownlint log file in version 1. <code>AddMarkdownlintV1LogFileContent()</code> Adds content of a markdownlint log file in version 1. <code>AddEsLintJsonLogFilePath()</code> Adds a path to a ESLint log file generated by the ESLint json formatter. <code>AddEsLintJsonLogFileContent()</code> Adds content of a ESLint log file generated by the ESLint json formatter. <code>AddSarifLogFilePath()</code> Adds a path to a SARIF log file. <code>AddSarifLogFileContent()</code> Adds content of a SARIF log file."},{"location":"documentation/recipe/configuration/#report-creation","title":"Report creation","text":"Cake.Issues.RecipeCake.Frosting.Issues.Recipe IssuesParameters.Reporting Property Default Value Description <code>ShouldCreateFullIssuesReport</code> <code>true</code> Indicates whether full issues report should be created. <code>FullIssuesReportSettings</code> <code>GenericIssueReportTemplate.HtmlDxDataGrid</code> template with <code>DevExtremeTheme.MaterialBlueLight</code> theme. Settings for creating the full issues report. See Template Gallery for possible options. <code>ShouldCreateSarifReport</code> <code>true</code> Indicates whether a report in SARIF format should be created. <code>ShouldReportIssuesToConsole</code> <code>false</code> Indicates whether issues should be reported to the console. <code>ReportToConsoleSettings</code> Settings for reporting issues to the console. IssuesContext.Parameters.Reporting Property Default Value Description <code>ShouldCreateFullIssuesReport</code> <code>true</code> Indicates whether full issues report should be created. <code>FullIssuesReportSettings</code> <code>GenericIssueReportTemplate.HtmlDxDataGrid</code> template with <code>DevExtremeTheme.MaterialBlueLight</code> theme. Settings for creating the full issues report. See Template Gallery for possible options. <code>ShouldCreateSarifReport</code> <code>true</code> Indicates whether a report in SARIF format should be created. <code>ShouldReportIssuesToConsole</code> <code>false</code> Indicates whether issues should be reported to the console. <code>ReportToConsoleSettings</code> Settings for reporting issues to the console."},{"location":"documentation/recipe/configuration/#build-server-integration","title":"Build server integration","text":"Cake.Issues.RecipeCake.Frosting.Issues.Recipe IssuesParameters.BuildServer Property Default Value Description <code>ShouldReportIssuesToBuildServer</code> <code>true</code> Indicates whether issues should be reported to the build server. <code>ShouldPublishFullIssuesReport</code> <code>true</code> Indicates whether full issues report should be published as artifact to the build system. <code>ShouldPublishSarifReport</code> <code>true</code> Indicates whether report int SARIF format shoudl be published as artifact to the build system. <code>ShouldCreateSummaryIssuesReport</code> <code>true</code> Indicates whether summary issues report should be created. IssuesContext.Parameters.BuildServer Property Default Value Description <code>ShouldReportIssuesToBuildServer</code> <code>true</code> Indicates whether issues should be reported to the build server. <code>ShouldPublishFullIssuesReport</code> <code>true</code> Indicates whether full issues report should be published as artifact to the build system. <code>ShouldPublishSarifReport</code> <code>true</code> Indicates whether report int SARIF format shoudl be published as artifact to the build system. <code>ShouldCreateSummaryIssuesReport</code> <code>true</code> Indicates whether summary issues report should be created."},{"location":"documentation/recipe/configuration/#pull-request-integration","title":"Pull request integration","text":"Cake.Issues.RecipeCake.Frosting.Issues.Recipe IssuesParameters.PullRequestSystem Property Default Value Description <code>ShouldReportIssuesToPullRequest</code> <code>true</code> Indicates whether issues should be reported to the pull request system. <code>MaxIssuesToPost</code> <code>null</code> Global number of issues which should be posted at maximum over all issue provider. Issues are filtered by priority and issues with a file path are prioritized. <code>null</code> won't set a global limit. <code>MaxIssuesToPostAcrossRuns</code> <code>null</code> Global number of issues which should be posted at maximum over all issue providers and across multiple runs. Issues are filtered by priority and issues with a file path are prioritized. <code>null</code> won't set a limit across multiple runs. <code>MaxIssuesToPostForEachIssueProvider</code> <code>100</code> Number of issues which should be posted at maximum for each issue provider. Issues are filtered by priority and issues with a file path are prioritized. <code>null</code> won't limit issues per issue provider. <code>ProviderIssueLimits</code> Empty Issue limits for individual issue provider. The key must be the <code>IIssue.ProviderType</code> of a specific provider to which the limits should be applied to. <code>IssueFilters</code> Empty List of filter functions which should be applied before posting issues to pull requests. <code>ShouldSetPullRequestStatus</code> <code>true</code> Indicates whether a status on the pull request should be set if there are any issues found. <code>ShouldSetSeparatePullRequestStatusForEachIssueProviderAndRun</code> <code>true</code> Indicates whether a separate status should be set for issues of every issue provider and run. IssuesContext.Parameters.PullRequestSystem Property Default Value Description <code>ShouldReportIssuesToPullRequest</code> <code>true</code> Indicates whether issues should be reported to the pull request system. <code>MaxIssuesToPost</code> <code>null</code> Global number of issues which should be posted at maximum over all issue provider. Issues are filtered by priority and issues with a file path are prioritized. <code>null</code> won't set a global limit. <code>MaxIssuesToPostAcrossRuns</code> <code>null</code> Global number of issues which should be posted at maximum over all issue providers and across multiple runs. Issues are filtered by priority and issues with a file path are prioritized. <code>null</code> won't set a limit across multiple runs. <code>MaxIssuesToPostForEachIssueProvider</code> <code>100</code> Number of issues which should be posted at maximum for each issue provider. Issues are filtered by priority and issues with a file path are prioritized. <code>null</code> won't limit issues per issue provider. <code>ProviderIssueLimits</code> Empty Issue limits for individual issue provider. The key must be the <code>IIssue.ProviderType</code> of a specific provider to which the limits should be applied to. <code>IssueFilters</code> Empty List of filter functions which should be applied before posting issues to pull requests. <code>ShouldSetPullRequestStatus</code> <code>true</code> Indicates whether a status on the pull request should be set if there are any issues found. <code>ShouldSetSeparatePullRequestStatusForEachIssueProviderAndRun</code> <code>true</code> Indicates whether a separate status should be set for issues of every issue provider and run."},{"location":"documentation/recipe/demos/","title":"Demos","text":"<p>There are demo setups available for different combinations of build servers and repositories which you can fork and to which you can create pull requests to test the recipe functionality.</p> Recipe Build Server Repository Cake.Issues.Recipe Azure Pipelines Azure Repos"},{"location":"documentation/recipe/supported-tools/","title":"Supported tools","text":"<p>Cake.Issues recipes support reading issues from different tools and integrates with different build and pull request systems.</p>"},{"location":"documentation/recipe/supported-tools/#tools","title":"Tools","text":"<p>Cake.Issues recipes support reading issues from output of the following tools:</p> Cake.Issues.RecipeCake.Frosting.Issues.Recipe Tool Format IssuesParameters.InputFiles Method MsBuild MSBuild Extension Pack XmlFileLogger <code>AddMsBuildXmlFileLoggerLogFile*()</code> MsBuild Binary Log File <code>AddMsBuildBinaryLogFile*()</code> JetBrains InspectCode (ReSharper) xml <code>AddInspectCodeLogFile*()</code> markdownlint markdownlint-cli default format <code>AddMarkdownlintCliLogFile*()</code> markdownlint markdownlint-cli with <code>--json</code> <code>AddMarkdownlintCliJsonLogFile*()</code> markdownlint markdownlint version 1 <code>AddMarkdownlintV1LogFile*()</code> ESLint json formatter <code>AddEsLintJsonLogFile*()</code> Any SARIF compatible tool SARIF <code>AddSarifLogFile*()</code> Tool Format IssuesContext.Parameters.InputFiles Method MsBuild MSBuild Extension Pack XmlFileLogger <code>AddMsBuildXmlFileLoggerLogFile*()</code> MsBuild Binary Log File <code>AddMsBuildBinaryLogFile*()</code> JetBrains InspectCode (ReSharper) xml <code>AddInspectCodeLogFile*()</code> markdownlint markdownlint-cli default format <code>AddMarkdownlintCliLogFile*()</code> markdownlint markdownlint-cli with <code>--json</code> <code>AddMarkdownlintCliJsonLogFile*()</code> markdownlint markdownlint version 1 <code>AddMarkdownlintV1LogFile*()</code> ESLint json formatter <code>AddEsLintJsonLogFile*()</code> Any SARIF compatible tool SARIF <code>AddSarifLogFile*()</code> <p>Tip</p> <p>See Supported tools for a list of tools supporting the SARIF format.</p>"},{"location":"documentation/recipe/supported-tools/#build-systems","title":"Build systems","text":"<p>Cake.Issues recipes integrates with the following build systems:</p> AppVeyorAzure PipelinesGitHub Actions <ul> <li> Write issues to build server</li> <li> Issues summary</li> <li> Full issues report</li> </ul> <ul> <li> Write issues to build server (1)</li> <li> Issues summary</li> <li> Full issues report</li> </ul> <ol> <li>Only first 10</li> </ol> <ul> <li> Write issues to build server</li> <li> Issues summary</li> <li> Full issues report</li> </ul>"},{"location":"documentation/recipe/supported-tools/#pull-request-systems","title":"Pull request systems","text":"<p>Cake.Issues recipes integrates with the following pull request systems:</p> Azure ReposGitHub <ul> <li> Write issues to pull requests</li> <li> Set pull request status</li> </ul> <ul> <li> Write issues to pull requests (1)</li> <li> Set pull request status</li> </ul> <ol> <li>When build from GitHub Actions</li> </ol>"},{"location":"documentation/recipe/tasks/","title":"Tasks","text":"<p>Cake.Issues recipes provide the following tasks to your build script:</p> Cake.Issues.RecipeCake.Frosting.Issues.Recipe Task Description IssuesBuildTasks property <code>Issues</code> Main tasks for issue management integration. <code>IssuesTask</code> <code>Read-Issues</code> Reads issues from the provided log files. <code>ReadIssuesTask</code> <code>Create-FullIssuesReport</code> Creates issue report. <code>CreateFullIssuesReportTask</code> <code>Publish-IssuesArtifacts</code> Publish artifacts to build server. <code>PublishIssuesArtifactsTask</code> <code>Report-IssuesToBuildServer</code> Report issues to build server. <code>ReportIssuesToBuildServerTask</code> <code>Create-SummaryIssuesReport</code> Creates a summary issue report. <code>CreateSummaryIssuesReportTask</code> <code>Report-IssuesToPullRequest</code> Report issues to pull request. <code>ReportIssuesToPullRequestTask</code> <code>Set-PullRequestIssuesState</code> Set pull request status. <code>SetPullRequestIssuesStateTask</code> <code>Report-IssuesToConsole</code> Report issues to console. <code>ReportIssuesToConsoleTask</code> Task Description Task type <code>Issues</code> Main tasks for issue management integration. <code>Cake.Frosting.Issues.Recipe.</code> <code>IssuesTask</code> <code>Read-Issues</code> Reads issues from the provided log files. <code>Cake.Frosting.Issues.Recipe.</code> <code>ReadIssuesTask</code> <code>Create-FullIssuesReport</code> Creates issue report. <code>Cake.Frosting.Issues.Recipe.</code> <code>CreateFullIssuesReportTask</code> <code>Publish-IssuesArtifacts</code> Publish artifacts to build server. <code>Cake.Frosting.Issues.Recipe.</code> <code>PublishIssuesArtifactsTask</code> <code>Report-IssuesToBuildServer</code> Report issues to build server. <code>Cake.Frosting.Issues.Recipe.</code> <code>ReportIssuesToBuildServerTask</code> <code>Create-SummaryIssuesReport</code> Creates a summary issue report. <code>Cake.Frosting.Issues.Recipe.</code> <code>CreateSummaryIssuesReportTask</code> <code>Report-IssuesToPullRequest</code> Report issues to pull request. <code>Cake.Frosting.Issues.Recipe.</code> <code>ReportIssuesToPullRequestTask</code> <code>Set-PullRequestIssuesState</code> Set pull request status. <code>Cake.Frosting.Issues.Recipe.</code> <code>SetPullRequestIssuesStateTask</code> <code>Report-IssuesToConsole</code> Report issues to console. <code>Cake.Frosting.Issues.Recipe.</code> <code>ReportIssuesToConsoleTask</code>"},{"location":"documentation/report-formats/","title":"Report Formats","text":"<p>Report format addins implement specific report formats and allow the Cake Issues addin to create reports in the specific format.</p> <ul> <li> Console \u2013 Support for reporting issues to the console</li> <li> Generic \u2013 Support for creating reports in any text based format (HTML, Markdown, ...)</li> <li> Sarif \u2013 Support for creating reports in SARIF format</li> </ul> <p>Tip</p> <p>See How to implement report format for instruction on how to implement support for additional report formats.</p>"},{"location":"documentation/report-formats/console/","title":"Console","text":"<p>Support for printing issues to the console is implemented in the a Cake.Issues.Reporting.Console addin.</p> <ul> <li> Features</li> <li> Examples</li> <li> API</li> </ul>"},{"location":"documentation/report-formats/console/examples/","title":"Examples","text":"<p>The following example will print issues logged as warnings by MsBuild to the console.</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.MsBuild&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.Reporting&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.Reporting.Console&amp;version=5.0.1\n\nTask(\"Create-IssueReport\").Does(() =&gt;\n{\n    var repoRootFolder = new DirectoryPath(@\"c:\\repo\");\n\n    // Build MySolution.sln solution in the repository root folder and write a binary log.\n    FilePath msBuildLogFile = @\"c:\\build\\msbuild.log\";\n    var msBuildSettings =\n        new MSBuildSettings().WithLogger(\n            \"BinaryLogger,\" + Context.Tools.Resolve(\"Cake.Issues.MsBuild*/**/StructuredLogger.dll\"),\n            \"\",\n            msBuildLogFile)\n    DotNetBuild(\n        repoRootPath.CombineWithFilePath(\"MySolution.sln\"),\n        new DotNetBuildSettings{MSBuildSettings = msBuildSettings});\n\n    // Write issues to console.\n    CreateIssueReport(\n        new List&lt;IIssueProvider&gt;\n        {\n            MsBuildIssuesFromFilePath(\n                msBuildLogFile,\n                MsBuildBinaryLogFileFormat)\n        },\n        ConsoleIssueReportFormat(\n            new ConsoleIssueReportFormatSettings\n            {\n                GroupByRule = true,\n                ShowProviderSummary = true,\n                ShowPrioritySummary = true\n            }),\n        repoRootFolder,\n        string.Empty);\n});\n</code></pre>"},{"location":"documentation/report-formats/console/features/","title":"Features","text":"<p>The Cake.Issues.Reporting.Console addin provides the following features:</p> <ul> <li> Prints issues containing line and column information.</li> <li> Group issues by rule</li> </ul> <p>Reports:</p> <ul> <li> Number of issues by provider</li> <li> Number of issues by priority for every provider and run</li> </ul>"},{"location":"documentation/report-formats/generic/","title":"Generic","text":"<p>Support for creating reports in any text based format like HTML or Markdown is implemented in the Cake.Issues.Reporting.Generic addin.</p> <ul> <li> Features</li> <li> Examples</li> <li> Template Gallery</li> <li> API</li> </ul>"},{"location":"documentation/report-formats/generic/features/","title":"Features","text":"<p>The Cake.Issues.Reporting.Generic addin provides the following features:</p> <ul> <li> Creates reports in any text based format like HTML or Markdown.</li> <li> Provides out of the box templates</li> <li> Possibility to use custom templates using Razor</li> </ul> <p>Info</p> <p>See Template Gallery for a list of available out of the box and 3rd party templates.</p>"},{"location":"documentation/report-formats/generic/examples/","title":"Examples","text":"<ul> <li>Embedded Default Template</li> <li>Custom Template</li> </ul>"},{"location":"documentation/report-formats/generic/examples/custom-template/","title":"Custom template","text":"<p>Info</p> <p>If you create a universally usable custom template we're happy to package it with the addin. To have it included in the addin please create a pull request with your contribution.</p> <p>The following example will create a HTML report for issues logged as warnings by MsBuild using a custom template.</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.MsBuild&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.Reporting&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.Reporting.Generic&amp;version=5.0.1\n\nTask(\"Create-IssueReport\").Does(() =&gt;\n{\n    var repoRootFolder = new DirectoryPath(@\"c:\\repo\");\n\n    // Build MySolution.sln solution in the repository root folder and write a binary log.\n    FilePath msBuildLogFile = @\"c:\\build\\msbuild.log\";\n    var msBuildSettings =\n        new MSBuildSettings().WithLogger(\n            \"BinaryLogger,\" + Context.Tools.Resolve(\"Cake.Issues.MsBuild*/**/StructuredLogger.dll\"),\n            \"\",\n            msBuildLogFile)\n    DotNetBuild(\n        repoRootPath.CombineWithFilePath(\"MySolution.sln\"),\n        new DotNetBuildSettings{MSBuildSettings = msBuildSettings});\n\n    // Create HTML report using Diagnostic template.\n    CreateIssueReport(\n        new List&lt;IIssueProvider&gt;\n        {\n            MsBuildIssuesFromFilePath(\n                msBuildLogFile,\n                MsBuildBinaryLogFileFormat)\n        },\n        GenericIssueReportFormatFromFilePath(@\"c:\\ReportTemplate.cshtml\"),\n        repoRootFolder,\n        @\"c:\\report.html\");\n});\n</code></pre> <p><code>ReportTemplate</code> looks like this:</p> <pre><code>@model IEnumerable&lt;Cake.Issues.IIssue&gt;\n\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th scope=\"col\"&gt;AffectedFileRelativePath&lt;/th&gt;\n                &lt;th scope=\"col\"&gt;Line&lt;/th&gt;\n                &lt;th scope=\"col\"&gt;Message&lt;/th&gt;\n                &lt;th scope=\"col\"&gt;Priority&lt;/th&gt;\n                &lt;th scope=\"col\"&gt;Rule&lt;/th&gt;\n                &lt;th scope=\"col\"&gt;RuleUrl&lt;/th&gt;\n                &lt;th scope=\"col\"&gt;ProviderType&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            @foreach (var issue in Model)\n            {\n                &lt;tr&gt;\n                    &lt;td&gt;@issue.AffectedFileRelativePath&lt;/td&gt;\n                    &lt;td&gt;@issue.Line&lt;/td&gt;\n                    &lt;td&gt;@issue.MessageText&lt;/td&gt;\n                    &lt;td&gt;@issue.Priority&lt;/td&gt;\n                    &lt;td&gt;@issue.RuleId&lt;/td&gt;\n                    &lt;td&gt;@issue.RuleUrl&lt;/td&gt;\n                    &lt;td&gt;@issue.ProviderType&lt;/td&gt;\n                &lt;/tr&gt;\n            }\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The template retrieves an <code>IEnumerable&lt;Cake.Issues.IIssue&gt;</code> as model.</p> <p>Info</p> <p>In custom templates functionality from the following assemblies are available:</p> <ul> <li>System.dll</li> <li>System.Core.dll</li> <li>netstandard.dll</li> <li>Cake.Core.dll</li> <li>Cake.Issues.dll</li> <li>Cake.Issues.Reporting.Generic.dll</li> </ul>"},{"location":"documentation/report-formats/generic/examples/default-template/","title":"Embedded default template","text":"<p>The following example will create a HTML report for issues logged as warnings by MsBuild.</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.MsBuild&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.Reporting&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.Reporting.Generic&amp;version=5.0.1\n\nTask(\"Create-IssueReport\").Does(() =&gt;\n{\n    var repoRootFolder = new DirectoryPath(@\"c:\\repo\");\n\n    // Build MySolution.sln solution in the repository root folder and write a binary log.\n    FilePath msBuildLogFile = @\"c:\\build\\msbuild.log\";\n    var msBuildSettings =\n        new MSBuildSettings().WithLogger(\n            \"BinaryLogger,\" + Context.Tools.Resolve(\"Cake.Issues.MsBuild*/**/StructuredLogger.dll\"),\n            \"\",\n            msBuildLogFile)\n    DotNetBuild(\n        repoRootPath.CombineWithFilePath(\"MySolution.sln\"),\n        new DotNetBuildSettings{MSBuildSettings = msBuildSettings});\n\n    // Create HTML report using Diagnostic template.\n    CreateIssueReport(\n        new List&lt;IIssueProvider&gt;\n        {\n            MsBuildIssuesFromFilePath(\n                msBuildLogFile,\n                MsBuildBinaryLogFileFormat)\n        },\n        GenericIssueReportFormatFromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDiagnostic),\n        repoRootFolder,\n        @\"c:\\report.html\");\n});\n</code></pre>"},{"location":"documentation/report-formats/generic/templates/","title":"Template Gallery","text":"<ul> <li>HTML DevExtreme Data Grid</li> <li>HTML Data Table</li> <li>HTML Diagnostic</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldatatable/","title":"HTML Data Table","text":"<p>Template for a HTML report containing a rich data table view with sorting and search functionality powered by Simple-DataTables.</p> <p></p>"},{"location":"documentation/report-formats/generic/templates/htmldatatable/#features","title":"Features","text":"<ul> <li> Separate table for issues of each issue provider.</li> <li> Table with <code>Severity</code>, <code>Project</code>, <code>Path</code>, <code>File</code>, <code>Location</code>, <code>Rule</code>, <code>Message</code>.</li> <li> Each column sortable by user.</li> <li> Paged table with possibility for user to change number of entries per page.</li> <li> Client-side full text search.</li> <li> No internet access required for displaying.</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldatatable/#requirements","title":"Requirements","text":"<ul> <li>Cake.Issues.Reporting.Generic 0.2.1 or higher</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldatatable/#usage","title":"Usage","text":"<p>To create a report using the HTML Data Table template you can use the GenericIssueReportTemplate.HtmlDataTable enum value:</p> <pre><code>CreateIssueReport(\n    issues,\n    GenericIssueReportFormatFromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDataTable),\n    @\"c:\\repo\",\n    @\"c:\\report.html\");\n</code></pre>"},{"location":"documentation/report-formats/generic/templates/htmldatatable/#options","title":"Options","text":"<p>This template doesn't support any options.</p>"},{"location":"documentation/report-formats/generic/templates/htmldatatable/#demos","title":"Demos","text":"<ul> <li>Default</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldatatable/#source-code","title":"Source Code","text":"<p>Info</p> <p>You can use the source code as a template for your custom template.</p> <p>Source code is available on GitHub.</p>"},{"location":"documentation/report-formats/generic/templates/htmldiagnostic/","title":"HTML Diagnostic","text":"<p>Template for a HTML report containing a list of all issues with all properties.</p> <p></p>"},{"location":"documentation/report-formats/generic/templates/htmldiagnostic/#features","title":"Features","text":"<ul> <li> Unstyled table listing all properties of IIssue</li> <li> No internet access required for displaying.</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldiagnostic/#requirements","title":"Requirements","text":"<ul> <li>No additional requirements.</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldiagnostic/#usage","title":"Usage","text":"<p>To create a report using the HTML diagnostic template you can use the GenericIssueReportTemplate.HtmlDiagnostic enum value:</p> <pre><code>CreateIssueReport(\n    issues,\n    GenericIssueReportFormatFromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDiagnostic),\n    @\"c:\\repo\",\n    @\"c:\\report.html\");\n</code></pre>"},{"location":"documentation/report-formats/generic/templates/htmldiagnostic/#options","title":"Options","text":"<p>This template doesn't support any options.</p>"},{"location":"documentation/report-formats/generic/templates/htmldiagnostic/#demos","title":"Demos","text":"<ul> <li>Default</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldiagnostic/#source-code","title":"Source Code","text":"<p>Info</p> <p>You can use the source code as a template for your custom template.</p> <p>Source code is available on GitHub.</p>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/","title":"HTML DevExtreme Data Grid","text":"<p>Template for a HTML report containing a rich data grid with sorting, filtering, grouping and search capabilities powered by DevExtreme.</p> <p></p>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/#features","title":"Features","text":"<ul> <li> Table with <code>Provider</code>, <code>Severity</code>, <code>Project</code>, <code>Path</code>, <code>File</code>, <code>Location</code>, <code>Rule</code>, <code>Message</code> by default.</li> <li> Support for grouping by multiple columns by user.</li> <li> Total number of issues by each group level.</li> <li> Each column sortable by user.</li> <li> Data can be filtered by any column by user.</li> <li> Paged view.</li> <li> Client-side full text search.</li> <li> Client-side export to Microsoft Excel or PDF.</li> <li> Fully customizable through options.</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/#requirements","title":"Requirements","text":"<ul> <li>Cake.Issues.Reporting.Generic 0.3.1 or higher</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/#usage","title":"Usage","text":"<p>To create a report using the HTML DevExtreme Data Grid template you can use the GenericIssueReportTemplate.HtmlDxDataGrid enum value:</p> <pre><code>CreateIssueReport(\n    issues,\n    GenericIssueReportFormatFromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDxDataGrid),\n    @\"c:\\repo\",\n    @\"c:\\report.html\");\n</code></pre>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/#options","title":"Options","text":"<p>See HtmlDxDataGridOption for a list of possible options.</p>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/#demos","title":"Demos","text":"<p>The following demo shows the template with its default options:</p> <ul> <li>Default   (Source Code)</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/#themes","title":"Themes","text":"<p>The template supports the teams defined in the DevExtremeTheme enumeration which can be set using the HtmlDxDataGridOption.Theme:</p> <pre><code>CreateIssueReport(\n    issues,\n    GenericIssueReportFormatFromEmbeddedTemplate(\n        GenericIssueReportTemplate.HtmlDxDataGrid,\n        settings =&gt; settings.WithOption(HtmlDxDataGridOption.Theme, DevExtremeTheme.MaterialBlueLight)),\n    @\"c:\\repo\",\n    @\"c:\\report.html\");\n</code></pre> <ul> <li>Light Theme   (Source Code)</li> <li>Dark Theme   (Source Code)</li> <li>Contrast Theme   (Source Code)</li> <li>Carmine Theme   (Source Code)</li> <li>Dark Moon Theme   (Source Code)</li> <li>Soft Blue Theme   (Source Code)</li> <li>Dark Violet Theme   (Source Code)</li> <li>Green Mist Theme   (Source Code)</li> <li>Light Compact Theme   (Source Code)</li> <li>Dark Compact Theme   (Source Code)</li> <li>Contrast Compact Theme   (Source Code)</li> <li>Material Blue Light Theme   (Source Code)</li> <li>Material Lime Light Theme   (Source Code)</li> <li>Material Orange Light Theme   (Source Code)</li> <li>Material Purple Light Theme   (Source Code)</li> <li>Material Teal Light Theme   (Source Code)</li> <li>Material Blue Dark Theme   (Source Code)</li> <li>Material Lime Dark Theme   (Source Code)</li> <li>Material Orange Dark Theme   (Source Code)</li> <li>Material Purple Dark Theme   (Source Code)</li> <li>Material Teal Dark Theme   (Source Code)</li> <li>Material Blue Light Compact Theme   (Source Code)</li> <li>Material Lime Light Compact Theme   (Source Code)</li> <li>Material Orange Light Compact Theme   (Source Code)</li> <li>Material Purple Light Compact Theme   (Source Code)</li> <li>Material Teal Light Compact Theme   (Source Code)</li> <li>Material Blue Dark Compact Theme   (Source Code)</li> <li>Material Lime Dark Compact Theme   (Source Code)</li> <li>Material Orange Dark Compact Theme   (Source Code)</li> <li>Material Purple Dark Compact Theme   (Source Code)</li> <li>Material Teal Dark Compact Theme   (Source Code)</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/#column-visibility","title":"Column visibility","text":"<p>Visible columns can be defined using the <code>ColumnNameVisible</code> option:</p> <pre><code>CreateIssueReport(\n    issues,\n    GenericIssueReportFormatFromEmbeddedTemplate(\n        GenericIssueReportTemplate.HtmlDxDataGrid,\n        settings =&gt; settings.WithOption(HtmlDxDataGridOption.LineVisible, false)),\n    @\"c:\\repo\",\n    @\"c:\\report.html\");\n</code></pre> <p>Additional columns can be added using the HtmlDxDataGridOption.AdditionalColumns option.</p> <ul> <li>Show and hide columns   (Source Code)</li> <li>Add additional columns   (Source Code)</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/#sorting","title":"Sorting","text":"<p>Sorted columns can be defined using the HtmlDxDataGridOption.SortedColumns and the <code>ColumnNameSortOder</code> options:</p> <pre><code>CreateIssueReport(\n    issues,\n    GenericIssueReportFormatFromEmbeddedTemplate(\n        GenericIssueReportTemplate.HtmlDxDataGrid,\n        settings =&gt; settings\n            .WithOption(HtmlDxDataGridOption.SortedColumns, new List&lt;ReportColumn&gt; { ReportColumn.RuleId })\n            .WithOption(HtmlDxDataGridOption.RuleIdSortOder, ColumnSortOderDescending )),\n    @\"c:\\repo\",\n    @\"c:\\report.html\");\n</code></pre> <ul> <li>Change sorting   (Source Code)</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/#grouping","title":"Grouping","text":"<p>Grouping can be defined using the HtmlDxDataGridOption.GroupedColumns option:</p> <pre><code>CreateIssueReport(\n    issues,\n    GenericIssueReportFormatFromEmbeddedTemplate(\n        GenericIssueReportTemplate.HtmlDxDataGrid,\n        settings =&gt; settings.WithOption(HtmlDxDataGridOption.GroupedColumns, new List&lt;ReportColumn&gt; { ReportColumn.RuleId })),\n    @\"c:\\repo\",\n    @\"c:\\report.html\");\n</code></pre> <ul> <li>Change grouping   (Source Code)</li> <li>Disable grouping   (Source Code)</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/#exporting","title":"Exporting","text":"<p>Exporting can be enabled using the HtmlDxDataGridOption.EnableExporting option:</p> <pre><code>CreateIssueReport(\n    issues,\n    GenericIssueReportFormatFromEmbeddedTemplate(\n        GenericIssueReportTemplate.HtmlDxDataGrid,\n        settings =&gt; settings.WithOption(HtmlDxDataGridOption.EnableExporting, true)),\n    @\"c:\\repo\",\n    @\"c:\\report.html\");\n</code></pre> <ul> <li>Enable exporting   (Source Code)</li> <li>Microsoft Excel export (*.xlsx)   (Source Code)</li> <li>PDF export (*.pdf)   (Source Code)</li> <li>Custom export file name   (Source Code)</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/#other-features","title":"Other features","text":"<ul> <li>Change title   (Source Code)</li> <li>Disable header   (Source Code)</li> <li>Disable filtering   (Source Code)</li> <li>Disable searching   (Source Code)</li> <li>Custom script location and version   (Source Code)</li> </ul>"},{"location":"documentation/report-formats/generic/templates/htmldxdatagrid/#source-code","title":"Source Code","text":"<p>Info</p> <p>You can use the source code as a template for your custom template.</p> <p>Source code is available on GitHub.</p>"},{"location":"documentation/report-formats/sarif/","title":"Sarif","text":"<p>Support for creating SARIF compatible reports is implemented in the Cake.Issues.Reporting.Sarif addin.</p> <ul> <li> Features</li> <li> Examples</li> <li> API</li> </ul>"},{"location":"documentation/report-formats/sarif/examples/","title":"Examples","text":"<p>The following example will create a SARIF report for issues logged as warnings by MsBuild.</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.MsBuild&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.Reporting&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.Reporting.Sarif&amp;version=5.0.1\n\nTask(\"Create-IssueReport\").Does(() =&gt;\n{\n    var repoRootFolder = new DirectoryPath(@\"c:\\repo\");\n\n    // Build MySolution.sln solution in the repository root folder and write a binary log.\n    FilePath msBuildLogFile = @\"c:\\build\\msbuild.log\";\n    var msBuildSettings =\n        new MSBuildSettings().WithLogger(\n            \"BinaryLogger,\" + Context.Tools.Resolve(\"Cake.Issues.MsBuild*/**/StructuredLogger.dll\"),\n            \"\",\n            msBuildLogFile)\n    DotNetBuild(\n        repoRootPath.CombineWithFilePath(\"MySolution.sln\"),\n        new DotNetBuildSettings{MSBuildSettings = msBuildSettings});\n\n    // Create SARIF report.\n    CreateIssueReport(\n        new List&lt;IIssueProvider&gt;\n        {\n            MsBuildIssuesFromFilePath(\n                msBuildLogFile,\n                MsBuildBinaryLogFileFormat)\n        },\n        SarifIssueReportFormat(),\n        repoRootFolder,\n        @\"c:\\report.sarif\");\n});\n</code></pre>"},{"location":"documentation/report-formats/sarif/features/","title":"Features","text":"<p>The Cake.Issues.Reporting.Sarif addin provides the following features:</p> <ul> <li> Creates SARIF compatible files.</li> </ul> <p>Supports the following properties in the SARIF report:</p> <ul> <li> RuleId</li> <li> Message</li> <li> Kind</li> <li> Level</li> <li> Location</li> <li> RuleUrl</li> </ul>"},{"location":"documentation/resources/blog-posts/","title":"Blog posts","text":"<p>Info</p> <p>If you have written about Cake Issues we would like to hear from you. You can add it by creating a pull request here.</p>"},{"location":"documentation/resources/blog-posts/#2018","title":"2018","text":"<ul> <li>Cake.Issues - A suite of addins for issue handling in Cake - Pascal Berger</li> </ul>"},{"location":"documentation/resources/blog-posts/#2017","title":"2017","text":"<ul> <li>Finding typos with ReSharper Command Line Tools, ReSpeller and Cake - Tom Podolak</li> <li>Cake build issue reporting with PRCA - Tomasz Cielecki</li> </ul>"},{"location":"documentation/resources/presentations/","title":"Presentations","text":"<p>Info</p> <p>If you have done a presentation about Cake Issues we would like to hear from you. You can add it by creating a pull request here.</p>"},{"location":"documentation/resources/presentations/#2019","title":"2019","text":"<ul> <li>Continuous Code Inspection using Cake - .NET User Group Basel: Video Slides - Pascal Berger</li> </ul>"},{"location":"documentation/resources/presentations/#2018","title":"2018","text":"<ul> <li>Ensuring quality in your DevOps pipelines using Cake - Azure DevOps Saturday Gothenburg - Pascal Berger</li> </ul>"},{"location":"documentation/usage/","title":"Usage","text":""},{"location":"documentation/usage/#ready-to-use-distributions","title":"Ready To Use Distributions","text":"<p>The easiest way to use Cake Issues is by using one of the Recipe packages, which provide build scripts, delivered as a NuGet package, which can be used inside your projects Cake build to add issue management.</p>"},{"location":"documentation/usage/#consuming-of-individual-addins","title":"Consuming Of Individual Addins","text":"<p>The addins can be added individually to any Cake build and allow advanced customizations:</p> <ul> <li>Creating Issues</li> <li>Reading Issues</li> <li>Creating Reports</li> <li>Reporting Issues To Pull Request And Build Systems</li> <li>Breaking Builds</li> </ul>"},{"location":"documentation/usage/breaking-builds/breaking-builds/","title":"Breaking builds","text":"<p>The <code>Cake.Issues</code> addin can be used to break builds if specific issues were reported.</p> <p>To break builds you need to import the following core addin:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n</code></pre> <p>The following task will fail the build if any issues were added to the <code>issues</code> global variable:</p> <pre><code>// Global issues list into which issues need to be added.\nIEnumerable&lt;IIssue&gt; issues = null;\n\nTask(\"BreakBuildOnIssues\")\n    .Description(\"Breaks build if any issues in the code are found.\")\n    .Does(() =&gt;\n{\n    BreakBuildOnIssues(issues);\n});\n</code></pre>"},{"location":"documentation/usage/creating-issues/creating-issues/","title":"Creating issues","text":"<p>The <code>Cake.Issues</code> addin can be used to create issues directly in the build script. This issues can for example be used to create reports.</p> <p>To create issues you need to import the following core addin:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n</code></pre> <p>In the following task a new warning for the myfile.txt file on line 42 is created:</p> <pre><code>Task(\"Create-Issue\").Does(() =&gt;\n{\n    var issue =\n        NewIssue(\n            \"Something went wrong\",\n            \"MyCakeScript\",\n            \"My Cake Script\")\n            .WithMessageInHtmlFormat(\"Something went &lt;b&gt;wrong&lt;/b&gt;\")\n            .WithMessageInMarkdownFormat(\"Something went **wrong**\")\n            .InFile(\"myfile.txt\", 42)\n            .WithPriority(IssuePriority.Warning)\n            .Create();\n\n    Information(\"Issue created with message: {0}\", issues.MessageText);\n});\n</code></pre>"},{"location":"documentation/usage/creating-reports/","title":"Creating Reports","text":"<ul> <li> Create Reports</li> </ul> <p>Tip</p> <p>For more report format specific examples see Report Format Examples.</p>"},{"location":"documentation/usage/creating-reports/creating-reports/","title":"Creating reports","text":"<p>To create report for issues you need to import the following core addins:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.Reporting&amp;version=5.0.1\n</code></pre> <p>Also you need to import at least one issue provider and report format. In the following example the issue provider for reading warnings from MsBuild log files and generic report format is imported:</p> <pre><code>#addin nuget:?package=Cake.Issues.MsBuild&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.Reporting.Generic&amp;version=5.0.1\n</code></pre> <p>Finally you can define a task where you call the reporting addin with the desired issue provider and report format:</p> <pre><code>Task(\"Create-Report\").Does(() =&gt;\n{\n    var repoRootFolder = new DirectoryPath(@\"C:\\repo\");\n    CreateIssueReport(\n        MsBuildIssuesFromFilePath(\n            @\"C:\\build\\msbuild.log\",\n            MsBuildBinaryLogFileFormat),\n        GenericIssueReportFormatFromEmbeddedTemplate(GenericIssueReportTemplate.HtmlDiagnostic),\n        repoRootFolder,\n        @\"c:\\report.html\");\n});\n</code></pre>"},{"location":"documentation/usage/reading-issues/","title":"Reading Issues","text":"<ul> <li> Read Issues</li> <li> Pass Additional Run Information</li> <li> Configure File Links</li> </ul> <p>Tip</p> <p>For more issue provider specific examples see Issue Provider Examples.</p>"},{"location":"documentation/usage/reading-issues/file-linking/","title":"File linking","text":"<p>File link settings can be defined while reading issues and are passed through the <code>IIssue.FileLink</code> property to reporting formats, pull request systems and build server implementations:</p> <pre><code>var settings =\n    new ReadIssuesSettings(@\"c:\\repo\")\n    {\n        FileLinkSettings =\n            IssueFileLinkSettingsForGitHubCommit(\n                \"https://github.com/cake-contrib/Cake.Issues\",\n                \"76a7cacef7ad4295a6766646d45c9b56\")\n    };\n\n    var issues =\n        ReadIssues(\n            InspectCodeIssuesFromFilePath(\n                @\"C:\\build\\inspectcode.log\"),\n            settings));\n</code></pre> <p>Cake.Issues comes with out-of-the-box support for linking to files hosted on GitHub and Azure Repos, either for a specific branch or commit. Additionally there are aliases which can be used to define any custom pattern.</p>"},{"location":"documentation/usage/reading-issues/reading-issues/","title":"Reading issues","text":"<p>The <code>Cake.Issues</code> addin can be used to aggregate issues from different sources. This can for example be useful to break builds based on the reported issues.</p> <p>To read issues you need to import the following core addin:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n</code></pre> <p>Also you need to import at least one issue provider. In the following example the issue providers for reading warnings from MsBuild log files and from JetBrains InspectCode are imported:</p> <pre><code>#addin nuget:?package=Cake.Issues.MsBuild&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.InspectCode&amp;version=5.0.1\n</code></pre> <p>Finally you can define a task where you call the core addin with the desired issue providers. The following example reads warnings and errors reported by MsBuild from a binary log and issues reported by JetBrains InspectCode:</p> <pre><code>Task(\"Read-Issues\").Does(() =&gt;\n{\n    var repoRootFolder = new DirectoryPath(@\"C:\\repo\");\n    var issues = ReadIssues(\n        new List&lt;IIssueProvider&gt;\n        {\n            MsBuildIssuesFromFilePath(\n                @\"C:\\build\\msbuild.log\",\n                MsBuildBinaryLogFileFormat),\n            InspectCodeIssuesFromFilePath(\n                @\"C:\\build\\inspectcode.log\")\n        },\n        repoRootFolder);\n\n    Information(\"{0} issues are found.\", issues.Count());\n});\n</code></pre>"},{"location":"documentation/usage/reading-issues/run-information/","title":"Additional run information","text":"<p>If a build script needs to parse multiple log files from the same tool, e.g. because multiple MsBuild solutions were built, this can be done by calling the issue provider multiple times. If the results are read into the same list and shown on the same report, individual issues could not be assigned to any of the calls, since issue provider type and name are identical.</p> <p>Starting with Cake.Issues 0.9.0 it is possible to pass additional run information while reading issues, which then will be stored with each issues in the <code>IIssue.Run</code> property:</p> <pre><code>var issues = new List&lt;IIssue&gt;();\n\n// Parse issues from build of solution 1\nissues.AddRange(\n    ReadIssues(\n        MsBuildIssuesFromFilePath(\n            @\"C:\\build\\solution1-msbuild.log\",\n            MsBuildBinaryLogFileFormat),\n        new ReadIssuesSettings(@\"c:\\repo\")\n        {\n            Run = \"Solution 1\"\n        }\n    )\n);\n\n// Parse issues from build of solution 2\nissues.AddRange(\n    ReadIssues(\n        MsBuildIssuesFromFilePath(\n            @\"C:\\build\\solution2-msbuild.log\",\n            MsBuildBinaryLogFileFormat),\n        new ReadIssuesSettings(@\"c:\\repo\")\n        {\n            Run = \"Solution 2\"\n        }\n    )\n);\n</code></pre>"},{"location":"documentation/usage/recipe/","title":"Recipe usage","text":"<p>Cake.Issues recipes provide build scripts, delivered as a NuGet package, which can be used inside your projects Cake build to add issue management.</p> <p>Integration of code analyzing and linting tools into a build pipeline often looks the similar, and differentiates mainly on the used linters, build and pull request systems. Cake.Issues recipes contain code to do all the parsing, integration with build and pull request systems for you, using the individual Cake.Issues addins. They support different linters based on the linting log files you pass it and integrate automatically with different build and pull request systems.</p> <p>There are two flavors available:</p> <ul> <li> <p> Cake.Issues.Recipe</p> <p>For Cake .NET Tool</p> </li> <li> <p> Cake.Frosting.Issues.Recipe</p> <p>For Cake Frosting</p> </li> </ul>"},{"location":"documentation/usage/recipe/using-cake-frosting-issues-recipe/","title":"Using Cake.Frosting.Issues.Recipe","text":"<p>The Cake.Frosting.Issues.Recipe package can be used to easily add issue management functionality to your Cake Frosting build.</p> <p>Info</p> <p>See Setting Up A New Frosting Project for instructions how to create a new Cake Frosting project.</p>"},{"location":"documentation/usage/recipe/using-cake-frosting-issues-recipe/#add-cakefrostingissuesrecipe-to-your-cake-frosting-build","title":"Add Cake.Frosting.Issues.Recipe to your Cake Frosting build","text":"<p>To use Cake.Frosting.Issues.Recipe in your Cake Frosting build you need to first add the NuGet package in your <code>.csproj</code> file:</p> <pre><code>&lt;PackageReference Include=\"Cake.Frosting.Issues.Recipe\" Version=\"5.0.1\" /&gt;\n</code></pre>"},{"location":"documentation/usage/recipe/using-cake-frosting-issues-recipe/#register-cakeissues-tasks","title":"Register Cake.Issues tasks","text":"<p>To make Cake Issues tasks available to your Cake Frosting build you need to register them.</p> <p>Add the following line to the bootstrapping code in the <code>Main</code> method of your Cake Frosting project:</p> <pre><code>AddAssembly(Assembly.GetAssembly(typeof(IssuesTask)))\n</code></pre> <p>The following bootstrapping code registers the Cake Issues tasks and also installs JetBrains InspectCode:</p> <pre><code>using System;\nusing System.Reflection;\nusing Cake.Frosting;\nusing Cake.Frosting.Issues.Recipe;\n\npublic static class Program\n{\n    public static int Main(string[] args)\n    {\n        return new CakeHost()\n            .UseContext&lt;BuildContext&gt;()\n            .InstallTool(\n                new Uri(\n                    \"nuget:?package=JetBrains.ReSharper.CommandLineTools\")) // (1)\n            .AddAssembly(Assembly.GetAssembly(typeof(IssuesTask)))\n            .Run(args);\n    }\n}\n</code></pre> <ol> <li> <p>In production code this dependency should be pinned to a specific version to make sure builds are deterministic and     won't break due to updates.</p> <p>See Reproducible Builds for details.</p> </li> </ol>"},{"location":"documentation/usage/recipe/using-cake-frosting-issues-recipe/#create-build-context","title":"Create build context","text":"<p>Cake.Frosting.Issues.Recipe provides a build context from which you need to inherit your custom build context. The build context contains configuration parameters, but also the state of the current running build, like for example all collected issues.</p> <p>The following example creates a build context and defines that Cake Issues should use Cake.Git addin to determine state of the Git repository:</p> <pre><code>public class BuildContext : IssuesContext\n{\n    public BuildContext(ICakeContext context)\n        : base(context, RepositoryInfoProviderType.CakeGit)\n    {\n    }\n}\n</code></pre>"},{"location":"documentation/usage/recipe/using-cake-frosting-issues-recipe/#passing-issues-to-cakefrostingissuesrecipe","title":"Passing issues to Cake.Frosting.Issues.Recipe","text":"<p>To make issues available to Cake.Frosting.Issues.Recipe you need pass the log files through the corresponding methods. The tasks need to also be a dependency of <code>ReadIssuesTask</code> provided by Cake.Frosting.Issues.Recipe.</p> <p>In the following example a new task is introduced which runs JetBrains InspectCode and passes the log file to Cake.Frosting.Issues.Recipe:</p> <pre><code>[TaskName(\"Run-InspectCode\")]\n[IsDependeeOf(typeof(ReadIssuesTask))]\npublic class RunInspectCodeTask : FrostingTask&lt;BuildContext&gt;\n{\n    public override void Run(BuildContext context)\n    {\n        var inspectCodeLogFilePath = context.Parameters.OutputDirectory..CombineWithFilePath(\"inspectCode.log\");\n\n        // Run JetBrains InspectCode\n        context.InspectCode(\n            context.State.RepositoryRootDirectory.Combine(\"src\").CombineWithFilePath(\"ClassLibrary1.sln\"),\n            new InspectCodeSettings() {\n                OutputFile = context.InspectCodeLogFilePath\n            });\n\n        // Pass path to InspectCode log file to Cake.Frosting.Issues.Recipe\n        context.Parameters.InputFiles.AddInspectCodeLogFilePath(context.InspectCodeLogFilePath);\n    }\n}\n</code></pre> <p>See configuration for a full list of available configuration parameters.</p>"},{"location":"documentation/usage/recipe/using-cake-frosting-issues-recipe/#calling-issues-tasks","title":"Calling issues tasks","text":"<p>Cake.Frosting.Issues.Recipe will add a bunch of tasks to your build script.</p> <p>To add the issues functionality into your existing build pipeline you need to add <code>ReadIssuesTask</code> to your pipeline.</p> <p>In the following example the <code>Default</code> task makes sure the main <code>IssuesTask</code> is executed:</p> <pre><code>[TaskName(\"Default\")]\n[IsDependentOn(typeof(IssuesTask))]\npublic class DefaultTask : FrostingTask\n{\n}\n</code></pre>"},{"location":"documentation/usage/recipe/using-cake-issues-recipe/","title":"Using Cake.Issues.Recipe","text":"<p>The Cake.Issues.Recipe package can be used to easily add issue management functionality to your build script.</p>"},{"location":"documentation/usage/recipe/using-cake-issues-recipe/#add-cakeissuesrecipe-to-your-build-script","title":"Add Cake.Issues.Recipe to your build script","text":"<p>To use Cake.Issues.Recipe in your build script you need to first load the NuGet package:</p> <pre><code>#load nuget:package=Cake.Issues.Recipe&amp;version=5.0.1\n</code></pre>"},{"location":"documentation/usage/recipe/using-cake-issues-recipe/#configuring-cakeissuesrecipe","title":"Configuring Cake.Issues.Recipe","text":"<p>To make issues available to Cake.Issues.Recipe you need to set the corresponding configuration parameters.</p> <p>In the following example a new task is introduced which depends on existing tasks which build a MsBuild solution and run JetBrains InspectCode. It will pass the MsBuild and InspectCode logfile to Cake.Issues.Recipe:</p> <pre><code>// Run issues task by default.\nTask(\"Configure-CakeIssuesRecipe\")\n    .IsDependentOn(\"Build\")\n    .IsDependentOn(\"Run-InspectCode\")\n    .Does(() =&gt;\n{\n    IssuesParameters.InputFiles.AddMsBuildBinaryLogFilePath(msBuildLogFilePath);\n    IssuesParameters.InputFiles.AddInspectCodeLogFilePath(inspectCodeLogFilePath);\n}\n</code></pre> <p>See configuration for a full list of available configuration parameters.</p>"},{"location":"documentation/usage/recipe/using-cake-issues-recipe/#calling-issues-tasks","title":"Calling issues tasks","text":"<p>Cake.Issues.Recipe will add a bunch of tasks to your build script.</p> <p>To add the issues functionality into your existing build pipeline you can make the <code>Read-Issues</code> task dependent on the task which configures Cake.Issues.Recipe:</p> <pre><code>// Make sure build and linters run before issues task.\nIssuesBuildTasks.ReadIssuesTask\n    .IsDependentOn(\"Configure-CakeIssuesRecipe\");\n</code></pre> <p>At some point you need to call the tasks provided by Cake.Isses.Recipe. In the following example the <code>Default</code> task calls the main <code>Issues</code> task:</p> <pre><code>// Run issues task by default.\nTask(\"Default\")\n    .IsDependentOn(\"Issues\");\n</code></pre>"},{"location":"documentation/usage/reporting-issues-to-pull-requests/","title":"Reporting Issues To Pull Requests","text":"<ul> <li> Report Issues To Pull Requests</li> <li> Apply Custom Issue Filter</li> </ul> <p>Tip</p> <p>For more pull request system specific examples see Pull Request System Examples</p>"},{"location":"documentation/usage/reporting-issues-to-pull-requests/custom-issue-filter/","title":"Custom issue filter","text":"<p>You can define custom filters which are applied to issues before they are posted as comments to pull requests.</p> Tip: Filter to issues introduced with pull request <p>You can use a custom filter to only have issues introduced with the current code posted to the pull request.</p> <p>For this you need to store your log files as artifacts on your build system, then you can define a custom filter which retrieves the logs from the previous build, parses them using the appropriate issue provider and filters out any issues which were already existing in the previous build.</p> <p>The following example will filter out all issues from the rule <code>CA1000</code> from being posted to the pull request.</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.MsBuild&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests.AzureDevOps&amp;version=5.0.1\n\nTask(\"ReportIssuesToPullRequest\").Does(() =&gt;\n{\n    var repoRootFolder = new DirectoryPath(@\"C:\\repo\");\n\n    var settings = new ReportIssuesToPullRequestSettings(repoRootFolder);\n\n    // Add custom filter.\n    settings.IssueFilters.Add(x =&gt; x.Where(issue =&gt; issue.Rule != \"CA1000\"));\n\n    ReportIssuesToPullRequest(\n        new List&lt;IIssueProvider&gt;\n        {\n            MsBuildIssuesFromFilePath(\n                @\"C:\\build\\msbuild.log\",\n                MsBuildBinaryLogFileFormat)\n        },\n        AzureDevOpsPullRequests(),\n        settings));\n});\n</code></pre>"},{"location":"documentation/usage/reporting-issues-to-pull-requests/report-issues-to-pull-requests/","title":"Report issues to pull requests","text":"<p>To use report issues to pull requests you need to import the following core addins:</p> <pre><code>#addin nuget:?package=Cake.Issues&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests&amp;version=5.0.1\n</code></pre> <p>Also you need to import at least one issue provider and pull request system. In the following example the issue provider for reading warnings from MsBuild log files and support for Azure DevOps pull requests is imported:</p> <pre><code>#addin nuget:?package=Cake.Issues.MsBuild&amp;version=5.0.1\n#addin nuget:?package=Cake.Issues.PullRequests.AzureDevOps&amp;version=5.0.1\n</code></pre> <p>Finally you can define a task where you call the core addin with the desired issue provider and pull request system:</p> <pre><code>Task(\"ReportIssuesToPullRequest\").Does(() =&gt;\n{\n    var repoRootFolder = new DirectoryPath(@\"C:\\repo\");\n    ReportIssuesToPullRequest(\n        MsBuildIssuesFromFilePath(\n            @\"C:\\build\\msbuild.log\",\n            MsBuildBinaryLogFileFormat),\n        AzureDevOpsPullRequests(),\n        repoRootFolder);\n});\n</code></pre>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/archive/2021/","title":"2021","text":""},{"location":"blog/archive/2020/","title":"2020","text":""},{"location":"blog/category/announcements/","title":"Announcements","text":""},{"location":"blog/category/release-notes/","title":"Release Notes","text":""},{"location":"blog/category/new-addin/","title":"New Addin","text":""},{"location":"blog/page/2/","title":"News","text":""},{"location":"blog/page/3/","title":"News","text":""},{"location":"blog/category/release-notes/page/2/","title":"Release Notes","text":""},{"location":"blog/category/release-notes/page/3/","title":"Release Notes","text":""}]}