<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Issues.GitRepository</name>
    </assembly>
    <members>
        <member name="T:Cake.Issues.GitRepository.BaseGitRepositoryIssuesRuleDescription">
            <summary>
            Base class for descriptions of rules checked by <see cref="T:Cake.Issues.GitRepository.GitRepositoryIssuesProvider"/>.
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.BaseGitRepositoryIssuesRuleDescription.RuleId">
            <summary>
            Gets the ID of the rule.
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.BaseGitRepositoryIssuesRuleDescription.RuleName">
            <summary>
            Gets the name of the rule.
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.BaseGitRepositoryIssuesRuleDescription.Priority">
            <summary>
            Gets the priority of the rule.
            </summary>
        </member>
        <member name="T:Cake.Issues.GitRepository.BinaryFileNotTrackedByLfsRuleDescription">
            <summary>
            Description of the rule which checks if a binary file in the repository is tracked by Git Large File System.
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.BinaryFileNotTrackedByLfsRuleDescription.RuleId">
            <inheritdoc />
        </member>
        <member name="P:Cake.Issues.GitRepository.BinaryFileNotTrackedByLfsRuleDescription.RuleName">
            <inheritdoc />
        </member>
        <member name="P:Cake.Issues.GitRepository.BinaryFileNotTrackedByLfsRuleDescription.Priority">
            <inheritdoc />
        </member>
        <member name="T:Cake.Issues.GitRepository.FilePathTooLongRuleDescription">
            <summary>
            Description of the rule which checks if the path of a file in the repository is too long.
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.FilePathTooLongRuleDescription.RuleId">
            <inheritdoc />
        </member>
        <member name="P:Cake.Issues.GitRepository.FilePathTooLongRuleDescription.RuleName">
            <inheritdoc />
        </member>
        <member name="P:Cake.Issues.GitRepository.FilePathTooLongRuleDescription.Priority">
            <inheritdoc />
        </member>
        <member name="T:Cake.Issues.GitRepository.FilePatternMatcher">
            <summary>
            Utility class for matching file paths against glob-style patterns.
            </summary>
        </member>
        <member name="M:Cake.Issues.GitRepository.FilePatternMatcher.IsMatch(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks if a file path matches any of the specified patterns.
            </summary>
            <param name="filePath">The file path to check.</param>
            <param name="patterns">The list of patterns to match against.</param>
            <returns>True if the file path matches any pattern; otherwise, false.</returns>
        </member>
        <member name="M:Cake.Issues.GitRepository.FilePatternMatcher.IsMatch(System.String,System.String)">
            <summary>
            Checks if a file path matches a specific pattern.
            </summary>
            <param name="filePath">The file path to check.</param>
            <param name="pattern">The pattern to match against.</param>
            <returns>True if the file path matches the pattern; otherwise, false.</returns>
        </member>
        <member name="M:Cake.Issues.GitRepository.FilePatternMatcher.ConvertGlobToRegex(System.String)">
            <summary>
            Converts a glob pattern to a regular expression pattern.
            </summary>
            <param name="globPattern">The glob pattern to convert.</param>
            <returns>A regular expression pattern.</returns>
        </member>
        <member name="T:Cake.Issues.GitRepository.GitRepositoryIssuesAliases">
            <summary>
            Contains functionality related to analyze Git repositories.
            </summary>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRepositoryIssuesAliases.GitRepositoryIssuesProviderTypeName(Cake.Core.ICakeContext)">
            <summary>
            Gets the name of the Git repository issue provider.
            This name can be used to identify issues based on the <see cref="P:Cake.Issues.IIssue.ProviderType"/> property.
            </summary>
            <param name="context">The context.</param>
            <returns>Name of the Git repository issue provider.</returns>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRepositoryIssuesAliases.GitRepositoryIssues(Cake.Core.ICakeContext,Cake.Issues.GitRepository.GitRepositoryIssuesSettings)">
             <summary>
             Gets an instance of a provider for analyzing a Git repository and reporting issues using specified settings.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">Settings for analyzing the Git repository.</param>
             <returns>Instance of a provider for analyzing a Git repository and reporting issues.</returns>
             <example>
             <para>Check for binary files not tracked by Git LFS:</para>
             <code>
             <![CDATA[
                 var settings =
                     new GitRepositoryIssuesSettings
                     {
                         CheckBinaryFilesTrackedWithLfs = true
                     };
            
                 var issues =
                     ReadIssues(
                         GitRepositoryIssues(settings),
                         @"c:\repo");
             ]]>
             </code>
             </example>
        </member>
        <member name="T:Cake.Issues.GitRepository.GitRepositoryIssuesProvider">
            <summary>
            Provider for issues in Git repositories.
            </summary>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.#ctor(Cake.Core.Diagnostics.ICakeLog,Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator,Cake.Issues.GitRepository.GitRepositoryIssuesSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Issues.GitRepository.GitRepositoryIssuesProvider"/> class.
            </summary>
            <param name="log">The Cake log context.</param>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The Cake environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="toolLocator">The tool locator.</param>
            <param name="issueProviderSettings">Settings for the issue provider.</param>
        </member>
        <member name="T:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.CheckType">
            <summary>
            Enum representing the different types of checks performed by the provider.
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.ProviderTypeName">
            <summary>
            Gets the name of the Git repository issue provider.
            This name can be used to identify issues based on the <see cref="P:Cake.Issues.IIssue.ProviderType"/> property.
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.IssueProviderSettings">
            <summary>
            Gets the settings for the issue provider.
            </summary>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.InternalReadIssues">
            <inheritdoc />
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.CheckForBinaryFilesNotTrackedByLfs(System.String)">
            <summary>
            Checks for binary files which are not tracked by LFS.
            </summary>
            <param name="issueProviderVersion">Version of the issue provider.</param>
            <returns>List of issues for binary files which are not tracked by LFS.</returns>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.CheckForFilesPathLength(System.String)">
            <summary>
            Checks for files path length.
            </summary>
            <param name="issueProviderVersion">Version of the issue provider.</param>
            <returns>List of issues for repository files with paths exceeding the allowed maximum.</returns>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.GetAllFilesFromRepository">
            <summary>
            Returns a list of the files in the repository.
            </summary>
            <returns>List of files in the repository.</returns>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.GetTextFilesFromRepository">
            <summary>
            Returns a list of text files in the repository.
            </summary>
            <returns>List of text files in the repository.</returns>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.GetLfsTrackedFilesFromRepository">
            <summary>
            Returns a list of files tracked by Git LFS.
            </summary>
            <returns>List of files tracked by Git LFS.</returns>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.DetermineBinaryFiles(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines binary files.
            </summary>
            <param name="allFiles">List of all files in the repository.</param>
            <param name="textFiles">List of text files in the repository.</param>
            <returns>List of binary files in the repository.</returns>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.DetermineBinaryFilesNotTrackedWithLfs(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines binary files which are not tracked with LFS.
            </summary>
            <param name="binaryFiles">List of binary files in the repository.</param>
            <param name="lfsTrackedFiles">List of files tracked with LFS in the repository.</param>
            <returns>List of binary files in the repository which are not tracked with LFS.</returns>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRepositoryIssuesProvider.IsFileExcluded(System.String,Cake.Issues.GitRepository.GitRepositoryIssuesProvider.CheckType)">
            <summary>
            Determines if a file should be excluded from the specified check type.
            </summary>
            <param name="filePath">The file path to check.</param>
            <param name="checkType">The type of check being performed.</param>
            <returns>True if the file should be excluded; otherwise, false.</returns>
        </member>
        <member name="T:Cake.Issues.GitRepository.GitRepositoryIssuesSettings">
            <summary>
            Settings for <see cref="T:Cake.Issues.GitRepository.GitRepositoryIssuesAliases"/>.
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.GitRepositoryIssuesSettings.CheckBinaryFilesTrackedByLfs">
            <summary>
            Gets or sets a value indicating whether the repository should be checked for
            binary files not tracked by Git LFS.
            Requires Git and Git-LFS to be available through Cake tool resolution.
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.GitRepositoryIssuesSettings.CheckFilesPathLength">
            <summary>
            Gets or sets a value indicating whether the repository should be checked for
            files path longer than <see cref="P:Cake.Issues.GitRepository.GitRepositoryIssuesSettings.MaxFilePathLength"/>.
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.GitRepositoryIssuesSettings.MaxFilePathLength">
            <summary>
            Gets or sets a value indicating the maximum allowed length of file paths if
            <see cref="P:Cake.Issues.GitRepository.GitRepositoryIssuesSettings.CheckFilesPathLength"/> is enabled.
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.GitRepositoryIssuesSettings.FilesToExclude">
            <summary>
            Gets the list of file patterns to exclude from all checks.
            Supports glob patterns (e.g., "*.tmp", "**/temp/**", "docs/generated/*").
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.GitRepositoryIssuesSettings.FilesToExcludeFromBinaryFilesLfsCheck">
            <summary>
            Gets the list of file patterns to exclude from binary files LFS tracking checks.
            Supports glob patterns (e.g., "*.tmp", "**/temp/**", "docs/generated/*").
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.GitRepositoryIssuesSettings.FilesToExcludeFromFilePathLengthCheck">
            <summary>
            Gets the list of file patterns to exclude from file path length checks.
            Supports glob patterns (e.g., "*.tmp", "**/temp/**", "docs/generated/*").
            </summary>
        </member>
        <member name="T:Cake.Issues.GitRepository.GitRunner">
            <summary>
            A wrapper around the Git CLI.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The Cake environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="toolLocator">The tool locator.</param>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Tooling.IToolLocator)">
            <summary>
            A wrapper around the Git CLI.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The Cake environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="toolLocator">The tool locator.</param>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRunner.RunCommand(Cake.Issues.GitRepository.GitRunnerSettings)">
            <summary>
            Runs Git with specified settings.
            </summary>
            <param name="settings">Settings for running Git.</param>
            <returns>Output of command.</returns>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRunner.GetToolExecutableNames">
            <summary>
            Gets the names of the tool executables.
            </summary>
            <returns>The tool executable names.</returns>
        </member>
        <member name="T:Cake.Issues.GitRepository.GitRunnerSettings">
            <summary>
            Settings for <see cref="T:Cake.Issues.GitRepository.GitRunner"/> .
            </summary>
        </member>
        <member name="P:Cake.Issues.GitRepository.GitRunnerSettings.Arguments">
            <summary>
            Gets arguments to pass to the target script.
            </summary>
        </member>
        <member name="M:Cake.Issues.GitRepository.GitRunnerSettings.Evaluate(Cake.Core.IO.ProcessArgumentBuilder)">
            <summary>
            Evaluates the settings and writes them into <paramref name="args"/>.
            </summary>
            <param name="args">Argument builder to which the settings should be added.</param>
        </member>
        <member name="T:Cake.Issues.GitRepository.IssueBuilderExtensions">
            <summary>
            Extensions for <see cref="T:Cake.Issues.IssueBuilder"/>.
            </summary>
        </member>
        <member name="M:Cake.Issues.GitRepository.IssueBuilderExtensions.OfRule(Cake.Issues.IssueBuilder,Cake.Issues.GitRepository.BaseGitRepositoryIssuesRuleDescription,System.String)">
            <summary>
            Sets the rule and priority of the issue.
            </summary>
            <param name="issueBuilder">Issue builder on which the properties should be set.</param>
            <param name="ruleDescription">Rule metadata.</param>
            <param name="issueProviderVersion">Version of the issue provider.</param>
            <returns>Issue Builder instance.</returns>
        </member>
    </members>
</doc>
